
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000013bc  00001450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000054  00800072  00800072  00001462  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  00001464  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00003354  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a0  00000000  00000000  00003a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c96  00000000  00000000  00003d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b57  00000000  00000000  00005996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9b  00000000  00000000  000064ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000738  00000000  00000000  00007488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000770  00000000  00000000  00007bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f5  00000000  00000000  00008330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__vector_1>
       8:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 01 07 	jmp	0xe02	; 0xe02 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cf 05 	call	0xb9e	; 0xb9e <main>
      8a:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <segment7_init>:
#define F_CPU 8000000


void segment7_init(void)
{
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT);
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT);
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	62 e0       	ldi	r22, 0x02	; 2
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPortDIR(DIO_PORTA, DIO_PORT_OUTPUT);
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	6f ef       	ldi	r22, 0xFF	; 255
      aa:	0e 94 28 01 	call	0x250	; 0x250 <DIO_SetPortDIR>
	
}
      ae:	08 95       	ret

000000b0 <segment7_display>:
void segment7_display(uint8 num, uint8 mode)
{
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	c8 2f       	mov	r28, r24
      b6:	26 2f       	mov	r18, r22
	
	uint8 temp=0;
	
	if (num >=10)
      b8:	8a 30       	cpi	r24, 0x0A	; 10
      ba:	08 f4       	brcc	.+2      	; 0xbe <segment7_display+0xe>
      bc:	70 c0       	rjmp	.+224    	; 0x19e <segment7_display+0xee>
	{
		temp=num/10;
      be:	6a e0       	ldi	r22, 0x0A	; 10
      c0:	0e 94 93 09 	call	0x1326	; 0x1326 <__udivmodqi4>
      c4:	d8 2f       	mov	r29, r24
      c6:	c9 2f       	mov	r28, r25
		num=num%10;
		
		if (mode==1)
      c8:	21 30       	cpi	r18, 0x01	; 1
      ca:	61 f5       	brne	.+88     	; 0x124 <segment7_display+0x74>
		{
			DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_LOW);
      cc:	81 e0       	ldi	r24, 0x01	; 1
      ce:	63 e0       	ldi	r22, 0x03	; 3
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			
			PORTA=(temp <<4);
      d6:	d2 95       	swap	r29
      d8:	d0 7f       	andi	r29, 0xF0	; 240
      da:	db bb       	out	0x1b, r29	; 27
			DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	41 e0       	ldi	r20, 0x01	; 1
      e2:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e6:	89 ef       	ldi	r24, 0xF9	; 249
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	01 97       	sbiw	r24, 0x01	; 1
      ec:	f1 f7       	brne	.-4      	; 0xea <segment7_display+0x3a>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <segment7_display+0x40>
      f0:	00 00       	nop
			_delay_ms(1);
			DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			
			
			PORTA=(num <<4);
      fc:	c2 95       	swap	r28
      fe:	c0 7f       	andi	r28, 0xF0	; 240
     100:	cb bb       	out	0x1b, r28	; 27
			DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     10c:	a9 ef       	ldi	r26, 0xF9	; 249
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	11 97       	sbiw	r26, 0x01	; 1
     112:	f1 f7       	brne	.-4      	; 0x110 <segment7_display+0x60>
     114:	00 c0       	rjmp	.+0      	; 0x116 <segment7_display+0x66>
     116:	00 00       	nop
			_delay_ms(1);
			DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	61 e0       	ldi	r22, 0x01	; 1
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     122:	4a c0       	rjmp	.+148    	; 0x1b8 <segment7_display+0x108>
		}
		
		if (mode==0)
     124:	22 23       	and	r18, r18
     126:	09 f0       	breq	.+2      	; 0x12a <segment7_display+0x7a>
     128:	47 c0       	rjmp	.+142    	; 0x1b8 <segment7_display+0x108>
		{
			
			DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_LOW);
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	63 e0       	ldi	r22, 0x03	; 3
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			
			PORTA=(temp <<4);
     134:	d2 95       	swap	r29
     136:	d0 7f       	andi	r29, 0xF0	; 240
     138:	db bb       	out	0x1b, r29	; 27
			DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	62 e0       	ldi	r22, 0x02	; 2
     13e:	41 e0       	ldi	r20, 0x01	; 1
     140:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     144:	83 e2       	ldi	r24, 0x23	; 35
     146:	94 ef       	ldi	r25, 0xF4	; 244
     148:	01 97       	sbiw	r24, 0x01	; 1
     14a:	f1 f7       	brne	.-4      	; 0x148 <segment7_display+0x98>
     14c:	00 c0       	rjmp	.+0      	; 0x14e <segment7_display+0x9e>
     14e:	00 00       	nop
			_delay_ms(250);
			DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	62 e0       	ldi	r22, 0x02	; 2
     154:	40 e0       	ldi	r20, 0x00	; 0
     156:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			
			
			PORTA=(num <<4);
     15a:	c2 95       	swap	r28
     15c:	c0 7f       	andi	r28, 0xF0	; 240
     15e:	cb bb       	out	0x1b, r28	; 27
			DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	61 e0       	ldi	r22, 0x01	; 1
     164:	41 e0       	ldi	r20, 0x01	; 1
     166:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     16a:	a3 e2       	ldi	r26, 0x23	; 35
     16c:	b4 ef       	ldi	r27, 0xF4	; 244
     16e:	11 97       	sbiw	r26, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <segment7_display+0xbe>
     172:	00 c0       	rjmp	.+0      	; 0x174 <segment7_display+0xc4>
     174:	00 00       	nop
			_delay_ms(250);
			DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	40 e0       	ldi	r20, 0x00	; 0
     17c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	62 e0       	ldi	r22, 0x02	; 2
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     18a:	8f e3       	ldi	r24, 0x3F	; 63
     18c:	9d e0       	ldi	r25, 0x0D	; 13
     18e:	a3 e0       	ldi	r26, 0x03	; 3
     190:	81 50       	subi	r24, 0x01	; 1
     192:	90 40       	sbci	r25, 0x00	; 0
     194:	a0 40       	sbci	r26, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <segment7_display+0xe0>
     198:	00 c0       	rjmp	.+0      	; 0x19a <segment7_display+0xea>
     19a:	00 00       	nop
     19c:	0d c0       	rjmp	.+26     	; 0x1b8 <segment7_display+0x108>
		
		
	}
	else if (num>=1 && num <10 ||num==0)
	{
		DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_LOW);
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	63 e0       	ldi	r22, 0x03	; 3
     1a2:	40 e0       	ldi	r20, 0x00	; 0
     1a4:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
		PORTA=(num<<4 );
     1a8:	c2 95       	swap	r28
     1aa:	c0 7f       	andi	r28, 0xF0	; 240
     1ac:	cb bb       	out	0x1b, r28	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	62 e0       	ldi	r22, 0x02	; 2
     1b2:	41 e0       	ldi	r20, 0x01	; 1
     1b4:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
		

	}
	
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <ADC_INIT>:

void ADC_INIT(void)
{
#if VOLTAGE_REFRENCE   ==    ADC_VREF_AVCC

Set_bit(ADMUX,6);
     1be:	3e 9a       	sbi	0x07, 6	; 7
Clr_bit(ADMUX,7);
     1c0:	3f 98       	cbi	0x07, 7	; 7
#endif

#if ADC_CHANNEL       ==   ADC_CHANNEL_1

Set_bit(ADMUX,0);
     1c2:	38 9a       	sbi	0x07, 0	; 7
#endif

#if VOLTAGE_ADJUCENT   ==    ADC_RIGHT_ADJUST
Clr_bit(ADMUX,5);
     1c4:	3d 98       	cbi	0x07, 5	; 7
#endif

#if ADC_CONVERSION_TRIGGER== ADC_AUTO_TRIGGER

Set_bit(ADCSRA,5);
     1c6:	35 9a       	sbi	0x06, 5	; 6

#endif

#if ADC_PRESCALER     ==     ADC_PRESEC_128

Set_bit(ADCSRA,0);
     1c8:	30 9a       	sbi	0x06, 0	; 6
Set_bit(ADCSRA,1);
     1ca:	31 9a       	sbi	0x06, 1	; 6
Set_bit(ADCSRA,2);
     1cc:	32 9a       	sbi	0x06, 2	; 6

#endif

#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE

Clr_bit(ADCSRA,3);
     1ce:	33 98       	cbi	0x06, 3	; 6

#endif

/* Enable ADC */

Set_bit(ADCSRA,7);
     1d0:	37 9a       	sbi	0x06, 7	; 6
}
     1d2:	08 95       	ret

000001d4 <ADC_READ>:

void ADC_READ(uint16* value)
{
     1d4:	fc 01       	movw	r30, r24
	uint16 Digital_value=0;
	
	Set_bit(ADCSRA,6);
     1d6:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE
	
	while (! Get_bit(ADCSRA,4));
     1d8:	86 b1       	in	r24, 0x06	; 6
     1da:	84 ff       	sbrs	r24, 4
     1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <ADC_READ+0x4>
	
	Digital_value=ADC_ADJUST;
     1de:	24 b1       	in	r18, 0x04	; 4
     1e0:	35 b1       	in	r19, 0x05	; 5
	
	*value=((Digital_value *500)/1024);
     1e2:	84 ef       	ldi	r24, 0xF4	; 244
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	28 9f       	mul	r18, r24
     1e8:	a0 01       	movw	r20, r0
     1ea:	29 9f       	mul	r18, r25
     1ec:	50 0d       	add	r21, r0
     1ee:	38 9f       	mul	r19, r24
     1f0:	50 0d       	add	r21, r0
     1f2:	11 24       	eor	r1, r1
     1f4:	85 2f       	mov	r24, r21
     1f6:	86 95       	lsr	r24
     1f8:	86 95       	lsr	r24
     1fa:	80 83       	st	Z, r24
     1fc:	11 82       	std	Z+1, r1	; 0x01
	
	#endif
	
     1fe:	08 95       	ret

00000200 <cooling_Init>:

#include "cooling_fan.h"

void cooling_Init(void)
{
	DIO_SetPINDIR(DIO_PORTC , DIO_PIN2 , DIO_PIN_OUTPUT) ;
     200:	82 e0       	ldi	r24, 0x02	; 2
     202:	62 e0       	ldi	r22, 0x02	; 2
     204:	41 e0       	ldi	r20, 0x01	; 1
     206:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
}
     20a:	08 95       	ret

0000020c <cooling_set_state>:

void cooling_set_state(uint8 state)
{
	switch (state)
     20c:	88 23       	and	r24, r24
     20e:	41 f0       	breq	.+16     	; 0x220 <cooling_set_state+0x14>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	59 f4       	brne	.+22     	; 0x22a <cooling_set_state+0x1e>
	{
		case cool_ON :
			DIO_WritePIN(DIO_PORTC , DIO_PIN2 , DIO_PIN_HIGH) ;
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	62 e0       	ldi	r22, 0x02	; 2
     218:	41 e0       	ldi	r20, 0x01	; 1
     21a:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
			break;
     21e:	08 95       	ret
			
		case cool_OFF :
			DIO_WritePIN(DIO_PORTC , DIO_PIN2 ,DIO_PIN_LOW) ;
     220:	82 e0       	ldi	r24, 0x02	; 2
     222:	62 e0       	ldi	r22, 0x02	; 2
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     22a:	08 95       	ret

0000022c <cooling_get_state>:
			break;
	}
}

uint8 cooling_get_state (void)
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	0f 92       	push	r0
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	uint8 st = 0;
     236:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTC , DIO_PIN2,&st);
     238:	82 e0       	ldi	r24, 0x02	; 2
     23a:	62 e0       	ldi	r22, 0x02	; 2
     23c:	ae 01       	movw	r20, r28
     23e:	4f 5f       	subi	r20, 0xFF	; 255
     240:	5f 4f       	sbci	r21, 0xFF	; 255
     242:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_ReadPin>
	
	return st ;
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	49 f0       	breq	.+18     	; 0x266 <DIO_SetPortDIR+0x16>
     254:	81 30       	cpi	r24, 0x01	; 1
     256:	28 f0       	brcs	.+10     	; 0x262 <DIO_SetPortDIR+0x12>
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	39 f0       	breq	.+14     	; 0x26a <DIO_SetPortDIR+0x1a>
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	41 f4       	brne	.+16     	; 0x270 <DIO_SetPortDIR+0x20>
     260:	06 c0       	rjmp	.+12     	; 0x26e <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
     262:	6a bb       	out	0x1a, r22	; 26
		break;
     264:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
     266:	67 bb       	out	0x17, r22	; 23
		break;
     268:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
     26a:	64 bb       	out	0x14, r22	; 20
		break;
     26c:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
     26e:	61 bb       	out	0x11, r22	; 17
     270:	08 95       	ret

00000272 <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
     272:	44 23       	and	r20, r20
     274:	09 f4       	brne	.+2      	; 0x278 <DIO_SetPINDIR+0x6>
     276:	41 c0       	rjmp	.+130    	; 0x2fa <DIO_SetPINDIR+0x88>
     278:	41 30       	cpi	r20, 0x01	; 1
     27a:	09 f0       	breq	.+2      	; 0x27e <DIO_SetPINDIR+0xc>
     27c:	7e c0       	rjmp	.+252    	; 0x37a <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	a9 f0       	breq	.+42     	; 0x2ac <DIO_SetPINDIR+0x3a>
     282:	81 30       	cpi	r24, 0x01	; 1
     284:	30 f0       	brcs	.+12     	; 0x292 <DIO_SetPINDIR+0x20>
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	f1 f0       	breq	.+60     	; 0x2c6 <DIO_SetPINDIR+0x54>
     28a:	83 30       	cpi	r24, 0x03	; 3
     28c:	09 f0       	breq	.+2      	; 0x290 <DIO_SetPINDIR+0x1e>
     28e:	75 c0       	rjmp	.+234    	; 0x37a <DIO_SetPINDIR+0x108>
     290:	27 c0       	rjmp	.+78     	; 0x2e0 <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
     292:	2a b3       	in	r18, 0x1a	; 26
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	ac 01       	movw	r20, r24
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_SetPINDIR+0x2e>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_SetPINDIR+0x2a>
     2a4:	ba 01       	movw	r22, r20
     2a6:	62 2b       	or	r22, r18
     2a8:	6a bb       	out	0x1a, r22	; 26
			break;
     2aa:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
     2ac:	27 b3       	in	r18, 0x17	; 23
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	ac 01       	movw	r20, r24
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_SetPINDIR+0x48>
     2b6:	44 0f       	add	r20, r20
     2b8:	55 1f       	adc	r21, r21
     2ba:	6a 95       	dec	r22
     2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_SetPINDIR+0x44>
     2be:	ba 01       	movw	r22, r20
     2c0:	62 2b       	or	r22, r18
     2c2:	67 bb       	out	0x17, r22	; 23
			break;
     2c4:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
     2c6:	24 b3       	in	r18, 0x14	; 20
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	ac 01       	movw	r20, r24
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPINDIR+0x62>
     2d0:	44 0f       	add	r20, r20
     2d2:	55 1f       	adc	r21, r21
     2d4:	6a 95       	dec	r22
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPINDIR+0x5e>
     2d8:	ba 01       	movw	r22, r20
     2da:	62 2b       	or	r22, r18
     2dc:	64 bb       	out	0x14, r22	; 20
			break;
     2de:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
     2e0:	21 b3       	in	r18, 0x11	; 17
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	ac 01       	movw	r20, r24
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_SetPINDIR+0x7c>
     2ea:	44 0f       	add	r20, r20
     2ec:	55 1f       	adc	r21, r21
     2ee:	6a 95       	dec	r22
     2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_SetPINDIR+0x78>
     2f2:	ba 01       	movw	r22, r20
     2f4:	62 2b       	or	r22, r18
     2f6:	61 bb       	out	0x11, r22	; 17
			break;
     2f8:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
     2fa:	81 30       	cpi	r24, 0x01	; 1
     2fc:	a9 f0       	breq	.+42     	; 0x328 <DIO_SetPINDIR+0xb6>
     2fe:	81 30       	cpi	r24, 0x01	; 1
     300:	28 f0       	brcs	.+10     	; 0x30c <DIO_SetPINDIR+0x9a>
     302:	82 30       	cpi	r24, 0x02	; 2
     304:	f9 f0       	breq	.+62     	; 0x344 <DIO_SetPINDIR+0xd2>
     306:	83 30       	cpi	r24, 0x03	; 3
     308:	c1 f5       	brne	.+112    	; 0x37a <DIO_SetPINDIR+0x108>
     30a:	2a c0       	rjmp	.+84     	; 0x360 <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
     30c:	2a b3       	in	r18, 0x1a	; 26
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	ac 01       	movw	r20, r24
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_SetPINDIR+0xa8>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	6a 95       	dec	r22
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_SetPINDIR+0xa4>
     31e:	ba 01       	movw	r22, r20
     320:	60 95       	com	r22
     322:	62 23       	and	r22, r18
     324:	6a bb       	out	0x1a, r22	; 26
			break;
     326:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
     328:	27 b3       	in	r18, 0x17	; 23
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	ac 01       	movw	r20, r24
     330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPINDIR+0xc4>
     332:	44 0f       	add	r20, r20
     334:	55 1f       	adc	r21, r21
     336:	6a 95       	dec	r22
     338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPINDIR+0xc0>
     33a:	ba 01       	movw	r22, r20
     33c:	60 95       	com	r22
     33e:	62 23       	and	r22, r18
     340:	67 bb       	out	0x17, r22	; 23
			break;
     342:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
     344:	24 b3       	in	r18, 0x14	; 20
     346:	81 e0       	ldi	r24, 0x01	; 1
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	ac 01       	movw	r20, r24
     34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_SetPINDIR+0xe0>
     34e:	44 0f       	add	r20, r20
     350:	55 1f       	adc	r21, r21
     352:	6a 95       	dec	r22
     354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_SetPINDIR+0xdc>
     356:	ba 01       	movw	r22, r20
     358:	60 95       	com	r22
     35a:	62 23       	and	r22, r18
     35c:	64 bb       	out	0x14, r22	; 20
			break;
     35e:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
     360:	21 b3       	in	r18, 0x11	; 17
     362:	81 e0       	ldi	r24, 0x01	; 1
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	ac 01       	movw	r20, r24
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPINDIR+0xfc>
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	6a 95       	dec	r22
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPINDIR+0xf8>
     372:	ba 01       	movw	r22, r20
     374:	60 95       	com	r22
     376:	62 23       	and	r22, r18
     378:	61 bb       	out	0x11, r22	; 17
     37a:	08 95       	ret

0000037c <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	49 f0       	breq	.+18     	; 0x392 <DIO_WritePort+0x16>
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	28 f0       	brcs	.+10     	; 0x38e <DIO_WritePort+0x12>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	39 f0       	breq	.+14     	; 0x396 <DIO_WritePort+0x1a>
     388:	83 30       	cpi	r24, 0x03	; 3
     38a:	41 f4       	brne	.+16     	; 0x39c <DIO_WritePort+0x20>
     38c:	06 c0       	rjmp	.+12     	; 0x39a <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
     38e:	6b bb       	out	0x1b, r22	; 27
	break;
     390:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
     392:	68 bb       	out	0x18, r22	; 24
	break;
     394:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
     396:	65 bb       	out	0x15, r22	; 21
	break;
     398:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
     39a:	62 bb       	out	0x12, r22	; 18
     39c:	08 95       	ret

0000039e <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
     39e:	44 23       	and	r20, r20
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <DIO_WritePIN+0x6>
     3a2:	41 c0       	rjmp	.+130    	; 0x426 <DIO_WritePIN+0x88>
     3a4:	41 30       	cpi	r20, 0x01	; 1
     3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_WritePIN+0xc>
     3a8:	7e c0       	rjmp	.+252    	; 0x4a6 <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	a9 f0       	breq	.+42     	; 0x3d8 <DIO_WritePIN+0x3a>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	30 f0       	brcs	.+12     	; 0x3be <DIO_WritePIN+0x20>
     3b2:	82 30       	cpi	r24, 0x02	; 2
     3b4:	f1 f0       	breq	.+60     	; 0x3f2 <DIO_WritePIN+0x54>
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	09 f0       	breq	.+2      	; 0x3bc <DIO_WritePIN+0x1e>
     3ba:	75 c0       	rjmp	.+234    	; 0x4a6 <DIO_WritePIN+0x108>
     3bc:	27 c0       	rjmp	.+78     	; 0x40c <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
     3be:	2b b3       	in	r18, 0x1b	; 27
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	ac 01       	movw	r20, r24
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_WritePIN+0x2e>
     3c8:	44 0f       	add	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_WritePIN+0x2a>
     3d0:	ba 01       	movw	r22, r20
     3d2:	62 2b       	or	r22, r18
     3d4:	6b bb       	out	0x1b, r22	; 27
			break;
     3d6:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
     3d8:	28 b3       	in	r18, 0x18	; 24
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	ac 01       	movw	r20, r24
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <DIO_WritePIN+0x48>
     3e2:	44 0f       	add	r20, r20
     3e4:	55 1f       	adc	r21, r21
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <DIO_WritePIN+0x44>
     3ea:	ba 01       	movw	r22, r20
     3ec:	62 2b       	or	r22, r18
     3ee:	68 bb       	out	0x18, r22	; 24
			break;
     3f0:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
     3f2:	25 b3       	in	r18, 0x15	; 21
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	ac 01       	movw	r20, r24
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <DIO_WritePIN+0x62>
     3fc:	44 0f       	add	r20, r20
     3fe:	55 1f       	adc	r21, r21
     400:	6a 95       	dec	r22
     402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_WritePIN+0x5e>
     404:	ba 01       	movw	r22, r20
     406:	62 2b       	or	r22, r18
     408:	65 bb       	out	0x15, r22	; 21
			break;
     40a:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
     40c:	22 b3       	in	r18, 0x12	; 18
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	ac 01       	movw	r20, r24
     414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_WritePIN+0x7c>
     416:	44 0f       	add	r20, r20
     418:	55 1f       	adc	r21, r21
     41a:	6a 95       	dec	r22
     41c:	e2 f7       	brpl	.-8      	; 0x416 <DIO_WritePIN+0x78>
     41e:	ba 01       	movw	r22, r20
     420:	62 2b       	or	r22, r18
     422:	62 bb       	out	0x12, r22	; 18
			break;
     424:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
     426:	81 30       	cpi	r24, 0x01	; 1
     428:	a9 f0       	breq	.+42     	; 0x454 <DIO_WritePIN+0xb6>
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	28 f0       	brcs	.+10     	; 0x438 <DIO_WritePIN+0x9a>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	f9 f0       	breq	.+62     	; 0x470 <DIO_WritePIN+0xd2>
     432:	83 30       	cpi	r24, 0x03	; 3
     434:	c1 f5       	brne	.+112    	; 0x4a6 <DIO_WritePIN+0x108>
     436:	2a c0       	rjmp	.+84     	; 0x48c <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
     438:	2b b3       	in	r18, 0x1b	; 27
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	ac 01       	movw	r20, r24
     440:	02 c0       	rjmp	.+4      	; 0x446 <DIO_WritePIN+0xa8>
     442:	44 0f       	add	r20, r20
     444:	55 1f       	adc	r21, r21
     446:	6a 95       	dec	r22
     448:	e2 f7       	brpl	.-8      	; 0x442 <DIO_WritePIN+0xa4>
     44a:	ba 01       	movw	r22, r20
     44c:	60 95       	com	r22
     44e:	62 23       	and	r22, r18
     450:	6b bb       	out	0x1b, r22	; 27
		break;
     452:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
     454:	28 b3       	in	r18, 0x18	; 24
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	ac 01       	movw	r20, r24
     45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_WritePIN+0xc4>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_WritePIN+0xc0>
     466:	ba 01       	movw	r22, r20
     468:	60 95       	com	r22
     46a:	62 23       	and	r22, r18
     46c:	68 bb       	out	0x18, r22	; 24
		break;
     46e:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
     470:	25 b3       	in	r18, 0x15	; 21
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	ac 01       	movw	r20, r24
     478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_WritePIN+0xe0>
     47a:	44 0f       	add	r20, r20
     47c:	55 1f       	adc	r21, r21
     47e:	6a 95       	dec	r22
     480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_WritePIN+0xdc>
     482:	ba 01       	movw	r22, r20
     484:	60 95       	com	r22
     486:	62 23       	and	r22, r18
     488:	65 bb       	out	0x15, r22	; 21
		break;
     48a:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
     48c:	22 b3       	in	r18, 0x12	; 18
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	ac 01       	movw	r20, r24
     494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_WritePIN+0xfc>
     496:	44 0f       	add	r20, r20
     498:	55 1f       	adc	r21, r21
     49a:	6a 95       	dec	r22
     49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_WritePIN+0xf8>
     49e:	ba 01       	movw	r22, r20
     4a0:	60 95       	com	r22
     4a2:	62 23       	and	r22, r18
     4a4:	62 bb       	out	0x12, r22	; 18
     4a6:	08 95       	ret

000004a8 <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
     4a8:	81 30       	cpi	r24, 0x01	; 1
     4aa:	59 f0       	breq	.+22     	; 0x4c2 <DIO_ReadPort+0x1a>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	28 f0       	brcs	.+10     	; 0x4ba <DIO_ReadPort+0x12>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	59 f0       	breq	.+22     	; 0x4ca <DIO_ReadPort+0x22>
     4b4:	83 30       	cpi	r24, 0x03	; 3
     4b6:	81 f4       	brne	.+32     	; 0x4d8 <DIO_ReadPort+0x30>
     4b8:	0c c0       	rjmp	.+24     	; 0x4d2 <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
     4ba:	89 b3       	in	r24, 0x19	; 25
     4bc:	fb 01       	movw	r30, r22
     4be:	80 83       	st	Z, r24
		break;
     4c0:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
     4c2:	86 b3       	in	r24, 0x16	; 22
     4c4:	fb 01       	movw	r30, r22
     4c6:	80 83       	st	Z, r24
		break;
     4c8:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
     4ca:	83 b3       	in	r24, 0x13	; 19
     4cc:	fb 01       	movw	r30, r22
     4ce:	80 83       	st	Z, r24
		break;
     4d0:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
     4d2:	80 b3       	in	r24, 0x10	; 16
     4d4:	fb 01       	movw	r30, r22
     4d6:	80 83       	st	Z, r24
     4d8:	08 95       	ret

000004da <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	a1 f0       	breq	.+40     	; 0x506 <DIO_ReadPin+0x2c>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	28 f0       	brcs	.+10     	; 0x4ec <DIO_ReadPin+0x12>
     4e2:	82 30       	cpi	r24, 0x02	; 2
     4e4:	e9 f0       	breq	.+58     	; 0x520 <DIO_ReadPin+0x46>
     4e6:	83 30       	cpi	r24, 0x03	; 3
     4e8:	a1 f5       	brne	.+104    	; 0x552 <DIO_ReadPin+0x78>
     4ea:	27 c0       	rjmp	.+78     	; 0x53a <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
     4ec:	89 b3       	in	r24, 0x19	; 25
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9c 01       	movw	r18, r24
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_ReadPin+0x1e>
     4f4:	35 95       	asr	r19
     4f6:	27 95       	ror	r18
     4f8:	6a 95       	dec	r22
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_ReadPin+0x1a>
     4fc:	b9 01       	movw	r22, r18
     4fe:	61 70       	andi	r22, 0x01	; 1
     500:	fa 01       	movw	r30, r20
     502:	60 83       	st	Z, r22
		break;
     504:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
     506:	86 b3       	in	r24, 0x16	; 22
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9c 01       	movw	r18, r24
     50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_ReadPin+0x38>
     50e:	35 95       	asr	r19
     510:	27 95       	ror	r18
     512:	6a 95       	dec	r22
     514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_ReadPin+0x34>
     516:	b9 01       	movw	r22, r18
     518:	61 70       	andi	r22, 0x01	; 1
     51a:	fa 01       	movw	r30, r20
     51c:	60 83       	st	Z, r22
		break;
     51e:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
     520:	83 b3       	in	r24, 0x13	; 19
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	9c 01       	movw	r18, r24
     526:	02 c0       	rjmp	.+4      	; 0x52c <DIO_ReadPin+0x52>
     528:	35 95       	asr	r19
     52a:	27 95       	ror	r18
     52c:	6a 95       	dec	r22
     52e:	e2 f7       	brpl	.-8      	; 0x528 <DIO_ReadPin+0x4e>
     530:	b9 01       	movw	r22, r18
     532:	61 70       	andi	r22, 0x01	; 1
     534:	fa 01       	movw	r30, r20
     536:	60 83       	st	Z, r22
		break;
     538:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
     53a:	80 b3       	in	r24, 0x10	; 16
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	9c 01       	movw	r18, r24
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_ReadPin+0x6c>
     542:	35 95       	asr	r19
     544:	27 95       	ror	r18
     546:	6a 95       	dec	r22
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_ReadPin+0x68>
     54a:	b9 01       	movw	r22, r18
     54c:	61 70       	andi	r22, 0x01	; 1
     54e:	fa 01       	movw	r30, r20
     550:	60 83       	st	Z, r22
     552:	08 95       	ret

00000554 <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
     554:	81 30       	cpi	r24, 0x01	; 1
     556:	a1 f0       	breq	.+40     	; 0x580 <DIO_togglePin+0x2c>
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	28 f0       	brcs	.+10     	; 0x566 <DIO_togglePin+0x12>
     55c:	82 30       	cpi	r24, 0x02	; 2
     55e:	e9 f0       	breq	.+58     	; 0x59a <DIO_togglePin+0x46>
     560:	83 30       	cpi	r24, 0x03	; 3
     562:	a1 f5       	brne	.+104    	; 0x5cc <DIO_togglePin+0x78>
     564:	27 c0       	rjmp	.+78     	; 0x5b4 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
     566:	2b b3       	in	r18, 0x1b	; 27
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	ac 01       	movw	r20, r24
     56e:	02 c0       	rjmp	.+4      	; 0x574 <DIO_togglePin+0x20>
     570:	44 0f       	add	r20, r20
     572:	55 1f       	adc	r21, r21
     574:	6a 95       	dec	r22
     576:	e2 f7       	brpl	.-8      	; 0x570 <DIO_togglePin+0x1c>
     578:	ba 01       	movw	r22, r20
     57a:	62 27       	eor	r22, r18
     57c:	6b bb       	out	0x1b, r22	; 27
		break;
     57e:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
     580:	28 b3       	in	r18, 0x18	; 24
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	ac 01       	movw	r20, r24
     588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_togglePin+0x3a>
     58a:	44 0f       	add	r20, r20
     58c:	55 1f       	adc	r21, r21
     58e:	6a 95       	dec	r22
     590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_togglePin+0x36>
     592:	ba 01       	movw	r22, r20
     594:	62 27       	eor	r22, r18
     596:	68 bb       	out	0x18, r22	; 24
		break;
     598:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
     59a:	25 b3       	in	r18, 0x15	; 21
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	ac 01       	movw	r20, r24
     5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <DIO_togglePin+0x54>
     5a4:	44 0f       	add	r20, r20
     5a6:	55 1f       	adc	r21, r21
     5a8:	6a 95       	dec	r22
     5aa:	e2 f7       	brpl	.-8      	; 0x5a4 <DIO_togglePin+0x50>
     5ac:	ba 01       	movw	r22, r20
     5ae:	62 27       	eor	r22, r18
     5b0:	65 bb       	out	0x15, r22	; 21
		break;
     5b2:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
     5b4:	22 b3       	in	r18, 0x12	; 18
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	ac 01       	movw	r20, r24
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <DIO_togglePin+0x6e>
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	6a 95       	dec	r22
     5c4:	e2 f7       	brpl	.-8      	; 0x5be <DIO_togglePin+0x6a>
     5c6:	ba 01       	movw	r22, r20
     5c8:	62 27       	eor	r22, r18
     5ca:	62 bb       	out	0x12, r22	; 18
     5cc:	08 95       	ret

000005ce <EEPROM_Init>:

#include "EEPROM.h"

void EEPROM_Init(void)
{
	i2c_voidInit(I2C_Prescaler_1) ;
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <i2c_voidInit>
}
     5d4:	08 95       	ret

000005d6 <EEPROM_Write>:

void EEPROM_Write (uint8 data, uint8 address)
{
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	c8 2f       	mov	r28, r24
     5dc:	d6 2f       	mov	r29, r22
	i2c_voidStart( ) ;
     5de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA0 ) ;				//Write Mode
     5e2:	80 ea       	ldi	r24, 0xA0	; 160
     5e4:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	i2c_voidSend_Data( address ) ;
     5e8:	8d 2f       	mov	r24, r29
     5ea:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	i2c_voidSend_Data( data ) ;
     5ee:	8c 2f       	mov	r24, r28
     5f0:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	
	i2c_voidStop( ) ;
     5f4:	0e 94 86 03 	call	0x70c	; 0x70c <i2c_voidStop>
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <EEPROM_Read>:


uint8 EEPROM_Read (uint8 address)
{
     5fe:	cf 93       	push	r28
     600:	c8 2f       	mov	r28, r24
	uint8 res = 0 ;
	
	i2c_voidStart( ) ;
     602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA0 ) ;				//Write Mode
     606:	80 ea       	ldi	r24, 0xA0	; 160
     608:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	i2c_voidSend_Data( address ) ;
     60c:	8c 2f       	mov	r24, r28
     60e:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	
	i2c_voidStart( ) ;
     612:	0e 94 79 03 	call	0x6f2	; 0x6f2 <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA1 ) ;				//Read Mode
     616:	81 ea       	ldi	r24, 0xA1	; 161
     618:	0e 94 90 03 	call	0x720	; 0x720 <i2c_voidSend_Data>
	
	res = i2c_u8Read_NACK() ;
     61c:	0e 94 a9 03 	call	0x752	; 0x752 <i2c_u8Read_NACK>
     620:	c8 2f       	mov	r28, r24
	
	i2c_voidStop( ) ;
     622:	0e 94 86 03 	call	0x70c	; 0x70c <i2c_voidStop>

	return res ;
     626:	8c 2f       	mov	r24, r28
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <Set_GlobalInterrupts>:
#include "External_INT.h"

void Set_GlobalInterrupts(void)
{
	#if GLOBAL_INTERRUPT==GLOBAL_INTERRUPT_ENABLE
	Set_bit(SREG,7);
     62c:	8f b7       	in	r24, 0x3f	; 63
     62e:	80 68       	ori	r24, 0x80	; 128
     630:	8f bf       	out	0x3f, r24	; 63
	#elif GLOBAL_INTERRUPT==GLOBAL_INTERRUPT_DISABLE
	Clr_bit(SREG,7);
	#endif
}
     632:	08 95       	ret

00000634 <ExternalINT0_INIT>:
void ExternalINT0_INIT(void)
{
	Set_GlobalInterrupts();
     634:	0e 94 16 03 	call	0x62c	; 0x62c <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT0);
     638:	8b b7       	in	r24, 0x3b	; 59
     63a:	80 64       	ori	r24, 0x40	; 64
     63c:	8b bf       	out	0x3b, r24	; 59
	Clr_bit(MCUCR,0);
	Set_bit(MCUCR,1);
	
	#elif EXTERNAL_INT0_TRIGGER ==INT0_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCR,0);
     63e:	85 b7       	in	r24, 0x35	; 53
     640:	81 60       	ori	r24, 0x01	; 1
     642:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,1);
     644:	85 b7       	in	r24, 0x35	; 53
     646:	82 60       	ori	r24, 0x02	; 2
     648:	85 bf       	out	0x35, r24	; 53
	
	#endif
	
}
     64a:	08 95       	ret

0000064c <ExternalINT1_INIT>:
void ExternalINT1_INIT(void)
{
	Set_GlobalInterrupts();
     64c:	0e 94 16 03 	call	0x62c	; 0x62c <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT1);
     650:	8b b7       	in	r24, 0x3b	; 59
     652:	80 68       	ori	r24, 0x80	; 128
     654:	8b bf       	out	0x3b, r24	; 59
	Clr_bit(MCUCR,2);
	Set_bit(MCUCR,3);
	
	#elif EXTERNAL_INT1_TRIGGER ==INT1_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCR,2);
     656:	85 b7       	in	r24, 0x35	; 53
     658:	84 60       	ori	r24, 0x04	; 4
     65a:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,3);
     65c:	85 b7       	in	r24, 0x35	; 53
     65e:	88 60       	ori	r24, 0x08	; 8
     660:	85 bf       	out	0x35, r24	; 53
	
	#endif
}
     662:	08 95       	ret

00000664 <ExternalINT2_INIT>:
void ExternalINT2_INIT(void)
{
	Set_GlobalInterrupts();
     664:	0e 94 16 03 	call	0x62c	; 0x62c <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT1);
     668:	8b b7       	in	r24, 0x3b	; 59
     66a:	80 68       	ori	r24, 0x80	; 128
     66c:	8b bf       	out	0x3b, r24	; 59
	
	
	#if EXTERNAL_INT2_TRIGGER ==INT2_TRIGGER_FALLING_EDGE
	Clr_bit(MCUCSR,6);
     66e:	84 b7       	in	r24, 0x34	; 52
     670:	8f 7b       	andi	r24, 0xBF	; 191
     672:	84 bf       	out	0x34, r24	; 52
	#elif EXTERNAL_INT2_TRIGGER ==INT2_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCSR,6);
	
	#endif
}
     674:	08 95       	ret

00000676 <heating_Init>:

#include "heating_element.h"

void heating_Init(void)
{
	DIO_SetPINDIR(DIO_PORTC , DIO_PIN7 , DIO_PIN_OUTPUT) ;
     676:	82 e0       	ldi	r24, 0x02	; 2
     678:	67 e0       	ldi	r22, 0x07	; 7
     67a:	41 e0       	ldi	r20, 0x01	; 1
     67c:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
}
     680:	08 95       	ret

00000682 <heating_set_state>:

void heating_set_state(uint8 state)
{
	switch (state)
     682:	88 23       	and	r24, r24
     684:	41 f0       	breq	.+16     	; 0x696 <heating_set_state+0x14>
     686:	81 30       	cpi	r24, 0x01	; 1
     688:	59 f4       	brne	.+22     	; 0x6a0 <heating_set_state+0x1e>
	{
		case heat_ON :
		DIO_WritePIN(DIO_PORTC , DIO_PIN7 ,DIO_PIN_HIGH) ;
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	67 e0       	ldi	r22, 0x07	; 7
     68e:	41 e0       	ldi	r20, 0x01	; 1
     690:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
		break;
     694:	08 95       	ret
		
		case heat_OFF :
		DIO_WritePIN(DIO_PORTC , DIO_PIN7 , DIO_PIN_LOW) ;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	67 e0       	ldi	r22, 0x07	; 7
     69a:	40 e0       	ldi	r20, 0x00	; 0
     69c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     6a0:	08 95       	ret

000006a2 <heating_get_state>:
		break;
	}
}

uint8 heating_get_state (void)
{
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	0f 92       	push	r0
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
	 uint8 st =0;
     6ac:	19 82       	std	Y+1, r1	; 0x01
	 DIO_ReadPin(DIO_PORTC , DIO_PIN7,&st) ;
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	67 e0       	ldi	r22, 0x07	; 7
     6b2:	ae 01       	movw	r20, r28
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_ReadPin>
	
	return st ;
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <i2c_voidInit>:

/* Initialize I2C */
void i2c_voidInit(I2C_PRESCALER pre)
{
	//Enable I2C
	Set_bit(TWCR , TWEN) ;			
     6c6:	96 b7       	in	r25, 0x36	; 54
     6c8:	94 60       	ori	r25, 0x04	; 4
     6ca:	96 bf       	out	0x36, r25	; 54
	
	//Bit Rate
	TWBR = 72 ;		
     6cc:	98 e4       	ldi	r25, 0x48	; 72
     6ce:	90 b9       	out	0x00, r25	; 0
				
	TWSR=0x00; ;	
     6d0:	11 b8       	out	0x01, r1	; 1
	
	switch ( pre )
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	31 f0       	breq	.+12     	; 0x6e2 <i2c_voidInit+0x1c>
     6d6:	83 30       	cpi	r24, 0x03	; 3
     6d8:	31 f0       	breq	.+12     	; 0x6e6 <i2c_voidInit+0x20>
     6da:	81 30       	cpi	r24, 0x01	; 1
     6dc:	31 f4       	brne	.+12     	; 0x6ea <i2c_voidInit+0x24>
	{
		case I2C_Prescaler_1 :
			break;
		case I2C_Prescaler_4 :
			Set_bit(TWSR , TWPS0) ;
     6de:	08 9a       	sbi	0x01, 0	; 1
			break;
     6e0:	04 c0       	rjmp	.+8      	; 0x6ea <i2c_voidInit+0x24>
		case I2C_Prescaler_16 :
			Set_bit(TWSR , TWPS1) ;
     6e2:	09 9a       	sbi	0x01, 1	; 1
			break;
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <i2c_voidInit+0x24>
		case I2C_Prescaler_64 :
			Set_bit(TWSR , TWPS0) ;
     6e6:	08 9a       	sbi	0x01, 0	; 1
			Set_bit(TWSR , TWPS1) ;
     6e8:	09 9a       	sbi	0x01, 1	; 1
		default:
			break;
	}
	
	//Enable Ack
	Set_bit(TWCR , TWEA) ;
     6ea:	86 b7       	in	r24, 0x36	; 54
     6ec:	80 64       	ori	r24, 0x40	; 64
     6ee:	86 bf       	out	0x36, r24	; 54
	
}
     6f0:	08 95       	ret

000006f2 <i2c_voidStart>:

/* Send Start condition */
void i2c_voidStart(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     6f2:	86 b7       	in	r24, 0x36	; 54
     6f4:	80 68       	ori	r24, 0x80	; 128
     6f6:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWSTA) ;				//Send start
     6f8:	86 b7       	in	r24, 0x36	; 54
     6fa:	80 62       	ori	r24, 0x20	; 32
     6fc:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     6fe:	86 b7       	in	r24, 0x36	; 54
     700:	84 60       	ori	r24, 0x04	; 4
     702:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1 << TWINT)))
     704:	06 b6       	in	r0, 0x36	; 54
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <i2c_voidStart+0x12>
	;
}
     70a:	08 95       	ret

0000070c <i2c_voidStop>:

/* Send Stop condition */
void i2c_voidStop(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     70c:	86 b7       	in	r24, 0x36	; 54
     70e:	80 68       	ori	r24, 0x80	; 128
     710:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWSTO) ;				//Send stop
     712:	86 b7       	in	r24, 0x36	; 54
     714:	80 61       	ori	r24, 0x10	; 16
     716:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     718:	86 b7       	in	r24, 0x36	; 54
     71a:	84 60       	ori	r24, 0x04	; 4
     71c:	86 bf       	out	0x36, r24	; 54
	
	//while( !(TWC_R & (1<<TWINT) ) ){};		//Wait for TWINT Flag set
}
     71e:	08 95       	ret

00000720 <i2c_voidSend_Data>:

/* Send data */
void i2c_voidSend_Data(uint8 data)
{
	TWDR = data ;
     720:	83 b9       	out	0x03, r24	; 3
	
	Set_bit(TWCR , TWINT) ;				//Clear flag
     722:	86 b7       	in	r24, 0x36	; 54
     724:	80 68       	ori	r24, 0x80	; 128
     726:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     728:	86 b7       	in	r24, 0x36	; 54
     72a:	84 60       	ori	r24, 0x04	; 4
     72c:	86 bf       	out	0x36, r24	; 54
		
	while (!(TWCR & (1 << TWINT)))
     72e:	06 b6       	in	r0, 0x36	; 54
     730:	07 fe       	sbrs	r0, 7
     732:	fd cf       	rjmp	.-6      	; 0x72e <i2c_voidSend_Data+0xe>
	;
}
     734:	08 95       	ret

00000736 <i2c_u8Read_Ack>:

/* Check Acknowledge Bit */
uint8 i2c_u8Read_Ack(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     736:	86 b7       	in	r24, 0x36	; 54
     738:	80 68       	ori	r24, 0x80	; 128
     73a:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     73c:	86 b7       	in	r24, 0x36	; 54
     73e:	84 60       	ori	r24, 0x04	; 4
     740:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEA)  ;				//Enable Ack
     742:	86 b7       	in	r24, 0x36	; 54
     744:	80 64       	ori	r24, 0x40	; 64
     746:	86 bf       	out	0x36, r24	; 54
		
	while (!(TWCR & (1 << TWINT)))
     748:	06 b6       	in	r0, 0x36	; 54
     74a:	07 fe       	sbrs	r0, 7
     74c:	fd cf       	rjmp	.-6      	; 0x748 <i2c_u8Read_Ack+0x12>
	;
		
	return TWDR ;
     74e:	83 b1       	in	r24, 0x03	; 3
}
     750:	08 95       	ret

00000752 <i2c_u8Read_NACK>:

/* Read NACK */
uint8 i2c_u8Read_NACK(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     752:	86 b7       	in	r24, 0x36	; 54
     754:	80 68       	ori	r24, 0x80	; 128
     756:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     758:	86 b7       	in	r24, 0x36	; 54
     75a:	84 60       	ori	r24, 0x04	; 4
     75c:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1 << TWINT)))
     75e:	06 b6       	in	r0, 0x36	; 54
     760:	07 fe       	sbrs	r0, 7
     762:	fd cf       	rjmp	.-6      	; 0x75e <i2c_u8Read_NACK+0xc>
	;
	
	return TWDR ;
     764:	83 b1       	in	r24, 0x03	; 3
}
     766:	08 95       	ret

00000768 <i2c_u8get_Status>:

/* Get status */
uint8 i2c_u8get_Status(void)
{
	uint8 status;
	status = TWSR & 0xF8;
     768:	81 b1       	in	r24, 0x01	; 1
	return status;
     76a:	88 7f       	andi	r24, 0xF8	; 248
     76c:	08 95       	ret

0000076e <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(0x02);	
	
	#endif
}
void LCD_WRITE_COMMAND(uint8 cmd)
{
     76e:	cf 93       	push	r28
     770:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_LOW) ;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	61 e0       	ldi	r22, 0x01	; 1
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	62 e0       	ldi	r22, 0x02	; 2
     780:	40 e0       	ldi	r20, 0x00	; 0
     782:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	63 e0       	ldi	r22, 0x03	; 3
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
     790:	8b b3       	in	r24, 0x1b	; 27
     792:	9c 2f       	mov	r25, r28
     794:	90 7f       	andi	r25, 0xF0	; 240
     796:	8f 70       	andi	r24, 0x0F	; 15
     798:	89 2b       	or	r24, r25
     79a:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	63 e0       	ldi	r22, 0x03	; 3
     7a0:	41 e0       	ldi	r20, 0x01	; 1
     7a2:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     7a6:	8f e9       	ldi	r24, 0x9F	; 159
     7a8:	9f e0       	ldi	r25, 0x0F	; 15
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	f1 f7       	brne	.-4      	; 0x7aa <LCD_WRITE_COMMAND+0x3c>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD_WRITE_COMMAND+0x42>
     7b0:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	63 e0       	ldi	r22, 0x03	; 3
     7b6:	40 e0       	ldi	r20, 0x00	; 0
     7b8:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	
	PORTA = (cmd <<4) | (PORTA & 0x0F);
     7bc:	8b b3       	in	r24, 0x1b	; 27
     7be:	c2 95       	swap	r28
     7c0:	c0 7f       	andi	r28, 0xF0	; 240
     7c2:	8f 70       	andi	r24, 0x0F	; 15
     7c4:	c8 2b       	or	r28, r24
     7c6:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     7d2:	8f e9       	ldi	r24, 0x9F	; 159
     7d4:	9f e0       	ldi	r25, 0x0F	; 15
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <LCD_WRITE_COMMAND+0x68>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <LCD_WRITE_COMMAND+0x6e>
     7dc:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	63 e0       	ldi	r22, 0x03	; 3
     7e2:	40 e0       	ldi	r20, 0x00	; 0
     7e4:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     7e8:	8f e1       	ldi	r24, 0x1F	; 31
     7ea:	9e e4       	ldi	r25, 0x4E	; 78
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <LCD_WRITE_COMMAND+0x7e>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <LCD_WRITE_COMMAND+0x84>
     7f2:	00 00       	nop
	
	_delay_ms(5);
	
	#endif 
	
}
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <LCD_INIT>:
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_OUTPUT) ;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_OUTPUT) ;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_OUTPUT) ;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	63 e0       	ldi	r22, 0x03	; 3
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	
	
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D4,DIO_PIN_OUTPUT);
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	64 e0       	ldi	r22, 0x04	; 4
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D5,DIO_PIN_OUTPUT);
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	65 e0       	ldi	r22, 0x05	; 5
     824:	41 e0       	ldi	r20, 0x01	; 1
     826:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D6,DIO_PIN_OUTPUT);
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	66 e0       	ldi	r22, 0x06	; 6
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D7,DIO_PIN_OUTPUT);
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	67 e0       	ldi	r22, 0x07	; 7
     838:	41 e0       	ldi	r20, 0x01	; 1
     83a:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
     83e:	8f ef       	ldi	r24, 0xFF	; 255
     840:	91 ee       	ldi	r25, 0xE1	; 225
     842:	a4 e0       	ldi	r26, 0x04	; 4
     844:	81 50       	subi	r24, 0x01	; 1
     846:	90 40       	sbci	r25, 0x00	; 0
     848:	a0 40       	sbci	r26, 0x00	; 0
     84a:	e1 f7       	brne	.-8      	; 0x844 <LCD_INIT+0x4c>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_INIT+0x56>
     84e:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WRITE_COMMAND(0x33);
     850:	83 e3       	ldi	r24, 0x33	; 51
     852:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x32);
     856:	82 e3       	ldi	r24, 0x32	; 50
     858:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
     85c:	88 e2       	ldi	r24, 0x28	; 40
     85e:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0E);
     862:	8e e0       	ldi	r24, 0x0E	; 14
     864:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);	
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
	
	#endif
}
     874:	08 95       	ret

00000876 <LCD_WRITE_CHARACHTER>:
	
	#endif 
	
}
void LCD_WRITE_CHARACHTER(uint8 chr)
{
     876:	cf 93       	push	r28
     878:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_HIGH) ;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	62 e0       	ldi	r22, 0x02	; 2
     888:	40 e0       	ldi	r20, 0x00	; 0
     88a:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	63 e0       	ldi	r22, 0x03	; 3
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	
	PORTA = (chr & 0xF0);
     898:	8c 2f       	mov	r24, r28
     89a:	80 7f       	andi	r24, 0xF0	; 240
     89c:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	63 e0       	ldi	r22, 0x03	; 3
     8a2:	41 e0       	ldi	r20, 0x01	; 1
     8a4:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     8a8:	8f e9       	ldi	r24, 0x9F	; 159
     8aa:	9f e0       	ldi	r25, 0x0F	; 15
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <LCD_WRITE_CHARACHTER+0x36>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <LCD_WRITE_CHARACHTER+0x3c>
     8b2:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	63 e0       	ldi	r22, 0x03	; 3
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
	
	PORTA = (chr <<4);
     8be:	c2 95       	swap	r28
     8c0:	c0 7f       	andi	r28, 0xF0	; 240
     8c2:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	63 e0       	ldi	r22, 0x03	; 3
     8c8:	41 e0       	ldi	r20, 0x01	; 1
     8ca:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     8ce:	8f e9       	ldi	r24, 0x9F	; 159
     8d0:	9f e0       	ldi	r25, 0x0F	; 15
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	f1 f7       	brne	.-4      	; 0x8d2 <LCD_WRITE_CHARACHTER+0x5c>
     8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <LCD_WRITE_CHARACHTER+0x62>
     8d8:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	63 e0       	ldi	r22, 0x03	; 3
     8de:	40 e0       	ldi	r20, 0x00	; 0
     8e0:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
     8e4:	8f e1       	ldi	r24, 0x1F	; 31
     8e6:	9e e4       	ldi	r25, 0x4E	; 78
     8e8:	01 97       	sbiw	r24, 0x01	; 1
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <LCD_WRITE_CHARACHTER+0x72>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <LCD_WRITE_CHARACHTER+0x78>
     8ee:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
}
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <LCD_WriteString>:
void LCD_WriteString(uint8 *str)
{
     8f4:	0f 93       	push	r16
     8f6:	1f 93       	push	r17
     8f8:	cf 93       	push	r28
     8fa:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != '\0')
     8fc:	fc 01       	movw	r30, r24
     8fe:	80 81       	ld	r24, Z
     900:	88 23       	and	r24, r24
     902:	51 f0       	breq	.+20     	; 0x918 <LCD_WriteString+0x24>
	
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
     904:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_WRITE_CHARACHTER(str[i]);
     906:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_WRITE_CHARACHTER>
		i++;
     90a:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
	while(str[i] != '\0')
     90c:	f8 01       	movw	r30, r16
     90e:	ec 0f       	add	r30, r28
     910:	f1 1d       	adc	r31, r1
     912:	80 81       	ld	r24, Z
     914:	88 23       	and	r24, r24
     916:	b9 f7       	brne	.-18     	; 0x906 <LCD_WriteString+0x12>
	{
		LCD_WRITE_CHARACHTER(str[i]);
		i++;
	}
}
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <LCD_CLEAR>:
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(0x01);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
}
     926:	08 95       	ret

00000928 <LCD_MoveTo>:
void LCD_MoveTo(uint8 row , uint8 col)
{
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	00 d0       	rcall	.+0      	; 0x92e <LCD_MoveTo+0x6>
     92e:	cd b7       	in	r28, 0x3d	; 61
     930:	de b7       	in	r29, 0x3e	; 62
          uint8 pos[2] = {0x80 , 0xC0};
     932:	90 e8       	ldi	r25, 0x80	; 128
     934:	99 83       	std	Y+1, r25	; 0x01
     936:	90 ec       	ldi	r25, 0xC0	; 192
     938:	9a 83       	std	Y+2, r25	; 0x02

          LCD_WRITE_COMMAND(pos[row]+col);
     93a:	fe 01       	movw	r30, r28
     93c:	e8 0f       	add	r30, r24
     93e:	f1 1d       	adc	r31, r1
     940:	81 81       	ldd	r24, Z+1	; 0x01
     942:	86 0f       	add	r24, r22
     944:	0e 94 b7 03 	call	0x76e	; 0x76e <LCD_WRITE_COMMAND>
}
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 num)
{
     952:	4f 92       	push	r4
     954:	5f 92       	push	r5
     956:	6f 92       	push	r6
     958:	7f 92       	push	r7
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	cf 92       	push	r12
     964:	df 92       	push	r13
     966:	ef 92       	push	r14
     968:	ff 92       	push	r15
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	6b 01       	movw	r12, r22
     970:	7c 01       	movw	r14, r24
	sint32 temp =1;
	if(num < 0)
     972:	99 23       	and	r25, r25
     974:	5c f4       	brge	.+22     	; 0x98c <LCD_WriteInteger+0x3a>
	{
		LCD_WRITE_CHARACHTER('-');
     976:	8d e2       	ldi	r24, 0x2D	; 45
     978:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_WRITE_CHARACHTER>
		num *= -1;
     97c:	f0 94       	com	r15
     97e:	e0 94       	com	r14
     980:	d0 94       	com	r13
     982:	c0 94       	com	r12
     984:	c1 1c       	adc	r12, r1
     986:	d1 1c       	adc	r13, r1
     988:	e1 1c       	adc	r14, r1
     98a:	f1 1c       	adc	r15, r1
	}
	
	while (num != 0)
     98c:	c1 14       	cp	r12, r1
     98e:	d1 04       	cpc	r13, r1
     990:	e1 04       	cpc	r14, r1
     992:	f1 04       	cpc	r15, r1
     994:	09 f4       	brne	.+2      	; 0x998 <LCD_WriteInteger+0x46>
     996:	4f c0       	rjmp	.+158    	; 0xa36 <LCD_WriteInteger+0xe4>
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
	{
		
		temp = (temp *10) +num %10;
     9a0:	0f 2e       	mov	r0, r31
     9a2:	fa e0       	ldi	r31, 0x0A	; 10
     9a4:	8f 2e       	mov	r8, r31
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	9f 2e       	mov	r9, r31
     9aa:	f0 e0       	ldi	r31, 0x00	; 0
     9ac:	af 2e       	mov	r10, r31
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	bf 2e       	mov	r11, r31
     9b2:	f0 2d       	mov	r31, r0
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	a5 01       	movw	r20, r10
     9ba:	94 01       	movw	r18, r8
     9bc:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__mulsi3>
     9c0:	2b 01       	movw	r4, r22
     9c2:	3c 01       	movw	r6, r24
     9c4:	c7 01       	movw	r24, r14
     9c6:	b6 01       	movw	r22, r12
     9c8:	0e 94 9f 09 	call	0x133e	; 0x133e <__divmodsi4>
     9cc:	dc 01       	movw	r26, r24
     9ce:	cb 01       	movw	r24, r22
     9d0:	84 0d       	add	r24, r4
     9d2:	95 1d       	adc	r25, r5
     9d4:	a6 1d       	adc	r26, r6
     9d6:	b7 1d       	adc	r27, r7
		num=num/10;
     9d8:	c2 2e       	mov	r12, r18
     9da:	d3 2e       	mov	r13, r19
     9dc:	e4 2e       	mov	r14, r20
     9de:	f5 2e       	mov	r15, r21
	{
		LCD_WRITE_CHARACHTER('-');
		num *= -1;
	}
	
	while (num != 0)
     9e0:	c1 14       	cp	r12, r1
     9e2:	d1 04       	cpc	r13, r1
     9e4:	e1 04       	cpc	r14, r1
     9e6:	f1 04       	cpc	r15, r1
     9e8:	29 f7       	brne	.-54     	; 0x9b4 <LCD_WriteInteger+0x62>
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	91 05       	cpc	r25, r1
     9ee:	a1 05       	cpc	r26, r1
     9f0:	b1 05       	cpc	r27, r1
     9f2:	0c f1       	brlt	.+66     	; 0xa36 <LCD_WriteInteger+0xe4>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
     9f4:	0f 2e       	mov	r0, r31
     9f6:	fa e0       	ldi	r31, 0x0A	; 10
     9f8:	4f 2e       	mov	r4, r31
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	5f 2e       	mov	r5, r31
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	6f 2e       	mov	r6, r31
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	7f 2e       	mov	r7, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	a3 01       	movw	r20, r6
     a0e:	92 01       	movw	r18, r4
     a10:	0e 94 9f 09 	call	0x133e	; 0x133e <__divmodsi4>
     a14:	82 2e       	mov	r8, r18
     a16:	c3 2e       	mov	r12, r19
     a18:	c4 2f       	mov	r28, r20
     a1a:	d5 2f       	mov	r29, r21
     a1c:	86 2f       	mov	r24, r22
     a1e:	80 5d       	subi	r24, 0xD0	; 208
     a20:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_WRITE_CHARACHTER>
		temp/=10;
     a24:	88 2d       	mov	r24, r8
     a26:	9c 2d       	mov	r25, r12
     a28:	ac 2f       	mov	r26, r28
     a2a:	bd 2f       	mov	r27, r29
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	91 05       	cpc	r25, r1
     a30:	a1 05       	cpc	r26, r1
     a32:	b1 05       	cpc	r27, r1
     a34:	4c f7       	brge	.-46     	; 0xa08 <LCD_WriteInteger+0xb6>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
		temp/=10;
	}
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	ff 90       	pop	r15
     a3c:	ef 90       	pop	r14
     a3e:	df 90       	pop	r13
     a40:	cf 90       	pop	r12
     a42:	bf 90       	pop	r11
     a44:	af 90       	pop	r10
     a46:	9f 90       	pop	r9
     a48:	8f 90       	pop	r8
     a4a:	7f 90       	pop	r7
     a4c:	6f 90       	pop	r6
     a4e:	5f 90       	pop	r5
     a50:	4f 90       	pop	r4
     a52:	08 95       	ret

00000a54 <LCD_WriteFloat>:

LCD_WriteFloat(float num)
{
     a54:	8f 92       	push	r8
     a56:	9f 92       	push	r9
     a58:	af 92       	push	r10
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
	if (num<0)
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	a9 01       	movw	r20, r18
     a6e:	0e 94 26 08 	call	0x104c	; 0x104c <__cmpsf2>
     a72:	88 23       	and	r24, r24
     a74:	3c f4       	brge	.+14     	; 0xa84 <LCD_WriteFloat+0x30>
	{
		LCD_WRITE_CHARACHTER('-');
     a76:	8d e2       	ldi	r24, 0x2D	; 45
     a78:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_WRITE_CHARACHTER>
		num=-1*num;
     a7c:	f7 fa       	bst	r15, 7
     a7e:	f0 94       	com	r15
     a80:	f7 f8       	bld	r15, 7
     a82:	f0 94       	com	r15
	}
	if (num>0 && num<1)
     a84:	c7 01       	movw	r24, r14
     a86:	b6 01       	movw	r22, r12
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	a9 01       	movw	r20, r18
     a8e:	0e 94 0d 09 	call	0x121a	; 0x121a <__gesf2>
     a92:	18 16       	cp	r1, r24
     a94:	7c f4       	brge	.+30     	; 0xab4 <LCD_WriteFloat+0x60>
     a96:	c7 01       	movw	r24, r14
     a98:	b6 01       	movw	r22, r12
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e8       	ldi	r20, 0x80	; 128
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	0e 94 26 08 	call	0x104c	; 0x104c <__cmpsf2>
     aa6:	88 23       	and	r24, r24
     aa8:	2c f4       	brge	.+10     	; 0xab4 <LCD_WriteFloat+0x60>
	{
		LCD_WriteInteger(0);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	cb 01       	movw	r24, r22
     ab0:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteInteger>
	}

	LCD_WriteInteger((uint32)num);
     ab4:	c7 01       	movw	r24, r14
     ab6:	b6 01       	movw	r22, r12
     ab8:	0e 94 2f 08 	call	0x105e	; 0x105e <__fixunssfsi>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
     ac0:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteInteger>
	LCD_WRITE_CHARACHTER('.');
     ac4:	8e e2       	ldi	r24, 0x2E	; 46
     ac6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_WRITE_CHARACHTER>
	num=(num-(uint32)num)*100;
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatunsisf>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	0e 94 c1 07 	call	0xf82	; 0xf82 <__subsf3>
     ade:	46 2f       	mov	r20, r22
     ae0:	57 2f       	mov	r21, r23
     ae2:	68 2f       	mov	r22, r24
     ae4:	79 2f       	mov	r23, r25
     ae6:	cb 01       	movw	r24, r22
     ae8:	ba 01       	movw	r22, r20
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	48 ec       	ldi	r20, 0xC8	; 200
     af0:	52 e4       	ldi	r21, 0x42	; 66
     af2:	0e 94 11 09 	call	0x1222	; 0x1222 <__mulsf3>
	LCD_WriteInteger(num);
     af6:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fixsfsi>
     afa:	0e 94 a9 04 	call	0x952	; 0x952 <LCD_WriteInteger>
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	bf 90       	pop	r11
     b08:	af 90       	pop	r10
     b0a:	9f 90       	pop	r9
     b0c:	8f 90       	pop	r8
     b0e:	08 95       	ret

00000b10 <LED0_INIT>:

#include "LED.h"

void LED0_INIT()
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN3 , DIO_PIN_OUTPUT);
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	63 e0       	ldi	r22, 0x03	; 3
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
}
     b1a:	08 95       	ret

00000b1c <LED0_ON>:

void LED0_ON()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_HIGH);
     b1c:	83 e0       	ldi	r24, 0x03	; 3
     b1e:	63 e0       	ldi	r22, 0x03	; 3
     b20:	41 e0       	ldi	r20, 0x01	; 1
     b22:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
}
     b26:	08 95       	ret

00000b28 <LED0_OFF>:

void LED0_OFF()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_LOW);
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	63 e0       	ldi	r22, 0x03	; 3
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	0e 94 cf 01 	call	0x39e	; 0x39e <DIO_WritePIN>
}
     b32:	08 95       	ret

00000b34 <LED0_toggle>:

void LED0_toggle()
{
	DIO_togglePin(DIO_PORTD , DIO_PIN3);
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	63 e0       	ldi	r22, 0x03	; 3
     b38:	0e 94 aa 02 	call	0x554	; 0x554 <DIO_togglePin>
}
     b3c:	08 95       	ret

00000b3e <Button_UP_Init>:

void Button_UP_Init(void)
{
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN0, DIO_PIN_INPUT);
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
}
     b48:	08 95       	ret

00000b4a <Button_UP_GetVal>:
uint8 Button_UP_GetVal(void)
{
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	uint8 Button_value=0;
     b54:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTB, DIO_PIN0, &Button_value);
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	ae 01       	movw	r20, r28
     b5c:	4f 5f       	subi	r20, 0xFF	; 255
     b5e:	5f 4f       	sbci	r21, 0xFF	; 255
     b60:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_ReadPin>
	return Button_value;
}
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	0f 90       	pop	r0
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <Button_Down_Init>:
void Button_Down_Init(void)
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
     b6e:	83 e0       	ldi	r24, 0x03	; 3
     b70:	62 e0       	ldi	r22, 0x02	; 2
     b72:	40 e0       	ldi	r20, 0x00	; 0
     b74:	0e 94 39 01 	call	0x272	; 0x272 <DIO_SetPINDIR>
}
     b78:	08 95       	ret

00000b7a <Button_Down_GetVal>:
uint8 Button_Down_GetVal(void)
{
     b7a:	cf 93       	push	r28
     b7c:	df 93       	push	r29
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
	uint8 Button_value=0;
     b84:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTD, DIO_PIN2, &Button_value);
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	62 e0       	ldi	r22, 0x02	; 2
     b8a:	ae 01       	movw	r20, r28
     b8c:	4f 5f       	subi	r20, 0xFF	; 255
     b8e:	5f 4f       	sbci	r21, 0xFF	; 255
     b90:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_ReadPin>
	return Button_value;
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <main>:
 

int main(void)
{
	
	SCH_Init_T2();
     b9e:	0e 94 f3 06 	call	0xde6	; 0xde6 <SCH_Init_T2>
	LED0_INIT();
     ba2:	0e 94 88 05 	call	0xb10	; 0xb10 <LED0_INIT>
	TempsSensor_INIT();
     ba6:	0e 94 66 07 	call	0xecc	; 0xecc <TempsSensor_INIT>
	cooling_Init();
     baa:	0e 94 00 01 	call	0x200	; 0x200 <cooling_Init>
	heating_Init();
     bae:	0e 94 3b 03 	call	0x676	; 0x676 <heating_Init>
	ExternalINT0_INIT();
     bb2:	0e 94 1a 03 	call	0x634	; 0x634 <ExternalINT0_INIT>
	ExternalINT1_INIT();
     bb6:	0e 94 26 03 	call	0x64c	; 0x64c <ExternalINT1_INIT>
	segment7_init();
     bba:	0e 94 49 00 	call	0x92	; 0x92 <segment7_init>
	Button_UP_Init();
     bbe:	0e 94 9f 05 	call	0xb3e	; 0xb3e <Button_UP_Init>
	Button_Down_Init();
     bc2:	0e 94 b7 05 	call	0xb6e	; 0xb6e <Button_Down_Init>
	EEPROM_Init();
     bc6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <EEPROM_Init>
	
	if (EEPROM_Read(EEPROM_Address)!=60)
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <EEPROM_Read>
     bd0:	8c 33       	cpi	r24, 0x3C	; 60
     bd2:	29 f0       	breq	.+10     	; 0xbde <main+0x40>
	{
		Set_Tempreature=EEPROM_Read(EEPROM_Address);
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <EEPROM_Read>
     bda:	80 93 61 00 	sts	0x0061, r24
	}
	
    while(1)
    {	
		SCH_Dispatch_Tasks();
     bde:	0e 94 c3 06 	call	0xd86	; 0xd86 <SCH_Dispatch_Tasks>
     be2:	fd cf       	rjmp	.-6      	; 0xbde <main+0x40>

00000be4 <__vector_1>:
    }
	
}

ISR(INT0_vect)
{
     be4:	1f 92       	push	r1
     be6:	0f 92       	push	r0
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	0f 92       	push	r0
     bec:	11 24       	eor	r1, r1
     bee:	2f 93       	push	r18
     bf0:	3f 93       	push	r19
     bf2:	4f 93       	push	r20
     bf4:	5f 93       	push	r21
     bf6:	6f 93       	push	r22
     bf8:	7f 93       	push	r23
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
     c02:	ef 93       	push	r30
     c04:	ff 93       	push	r31
		
		Frist_Click=0;
     c06:	10 92 60 00 	sts	0x0060, r1
		if (Set_Tempreature>35)
     c0a:	80 91 61 00 	lds	r24, 0x0061
     c0e:	84 32       	cpi	r24, 0x24	; 36
     c10:	48 f0       	brcs	.+18     	; 0xc24 <__vector_1+0x40>
		{
			while(Button_Down_GetVal());
     c12:	0e 94 bd 05 	call	0xb7a	; 0xb7a <Button_Down_GetVal>
     c16:	88 23       	and	r24, r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <__vector_1+0x2e>
			Set_Tempreature=Set_Tempreature-5;
     c1a:	80 91 61 00 	lds	r24, 0x0061
     c1e:	85 50       	subi	r24, 0x05	; 5
     c20:	80 93 61 00 	sts	0x0061, r24
		}
			  
	//EEPROM_Write(Set_Tempreature,EEPROM_Address);
}
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <__vector_2>:
ISR(INT1_vect)
{
     c46:	1f 92       	push	r1
     c48:	0f 92       	push	r0
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	0f 92       	push	r0
     c4e:	11 24       	eor	r1, r1
     c50:	2f 93       	push	r18
     c52:	3f 93       	push	r19
     c54:	4f 93       	push	r20
     c56:	5f 93       	push	r21
     c58:	6f 93       	push	r22
     c5a:	7f 93       	push	r23
     c5c:	8f 93       	push	r24
     c5e:	9f 93       	push	r25
     c60:	af 93       	push	r26
     c62:	bf 93       	push	r27
     c64:	ef 93       	push	r30
     c66:	ff 93       	push	r31
	Frist_Click=0;
     c68:	10 92 60 00 	sts	0x0060, r1
		
		if (Set_Tempreature<75)
     c6c:	80 91 61 00 	lds	r24, 0x0061
     c70:	8b 34       	cpi	r24, 0x4B	; 75
     c72:	48 f4       	brcc	.+18     	; 0xc86 <__vector_2+0x40>
		{
				while(Button_UP_GetVal());
     c74:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Button_UP_GetVal>
     c78:	88 23       	and	r24, r24
     c7a:	e1 f7       	brne	.-8      	; 0xc74 <__vector_2+0x2e>
				Set_Tempreature+=5;
     c7c:	80 91 61 00 	lds	r24, 0x0061
     c80:	8b 5f       	subi	r24, 0xFB	; 251
     c82:	80 93 61 00 	sts	0x0061, r24
			
		}
	
	//EEPROM_Write(Set_Tempreature,EEPROM_Address);
}
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <Sch_Add_Task>:
	
	
}

uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
     cb2:	dc 01       	movw	r26, r24
     cb4:	7b 01       	movw	r14, r22
     cb6:	8a 01       	movw	r16, r20
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     cb8:	80 91 80 00 	lds	r24, 0x0080
     cbc:	90 91 81 00 	lds	r25, 0x0081
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	f9 f0       	breq	.+62     	; 0xd02 <Sch_Add_Task+0x5a>
     cc4:	e7 e8       	ldi	r30, 0x87	; 135
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
	{
		index++;
     ccc:	84 2f       	mov	r24, r20
uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     cce:	ba 01       	movw	r22, r20
     cd0:	20 81       	ld	r18, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	21 15       	cp	r18, r1
     cd6:	31 05       	cpc	r19, r1
     cd8:	41 f0       	breq	.+16     	; 0xcea <Sch_Add_Task+0x42>
     cda:	4f 5f       	subi	r20, 0xFF	; 255
     cdc:	5f 4f       	sbci	r21, 0xFF	; 255
     cde:	37 96       	adiw	r30, 0x07	; 7
     ce0:	4b 30       	cpi	r20, 0x0B	; 11
     ce2:	51 05       	cpc	r21, r1
     ce4:	99 f7       	brne	.-26     	; 0xccc <Sch_Add_Task+0x24>
	{
		index++;
     ce6:	c8 2f       	mov	r28, r24
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <Sch_Add_Task+0x44>
     cea:	c4 2f       	mov	r28, r20
	}
	if (index==SCH_MAX_TASKS)
     cec:	ca 30       	cpi	r28, 0x0A	; 10
     cee:	61 f4       	brne	.+24     	; 0xd08 <Sch_Add_Task+0x60>
	{
		//Task List is full
		LCD_WriteString("Too many Tasks");
     cf0:	82 e6       	ldi	r24, 0x62	; 98
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <LCD_WriteString>
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 72 00 	sts	0x0072, r24
		//return an error code
		return SCH_MAX_TASKS;
     cfe:	8c 2f       	mov	r24, r28
     d00:	16 c0       	rjmp	.+44     	; 0xd2e <Sch_Add_Task+0x86>
uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	70 e0       	ldi	r23, 0x00	; 0
	
}

uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
     d06:	80 e0       	ldi	r24, 0x00	; 0
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
		//return an error code
		return SCH_MAX_TASKS;
	}
	//if there is a space for a new task
	SCH_Tasks_G[index].ptask=Task_Name;
     d08:	9b 01       	movw	r18, r22
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	22 0f       	add	r18, r18
     d10:	33 1f       	adc	r19, r19
     d12:	22 0f       	add	r18, r18
     d14:	33 1f       	adc	r19, r19
     d16:	26 1b       	sub	r18, r22
     d18:	37 0b       	sbc	r19, r23
     d1a:	f9 01       	movw	r30, r18
     d1c:	e0 58       	subi	r30, 0x80	; 128
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255
     d20:	b1 83       	std	Z+1, r27	; 0x01
     d22:	a0 83       	st	Z, r26
	SCH_Tasks_G[index].delay=Initial_Delay;
     d24:	f3 82       	std	Z+3, r15	; 0x03
     d26:	e2 82       	std	Z+2, r14	; 0x02
	SCH_Tasks_G[index].period=Period;
     d28:	15 83       	std	Z+5, r17	; 0x05
     d2a:	04 83       	std	Z+4, r16	; 0x04
	SCH_Tasks_G[index].Runme=0;
     d2c:	16 82       	std	Z+6, r1	; 0x06
	return index; // return position of task (to allow later deletion)
}
     d2e:	cf 91       	pop	r28
     d30:	1f 91       	pop	r17
     d32:	0f 91       	pop	r16
     d34:	ff 90       	pop	r15
     d36:	ef 90       	pop	r14
     d38:	08 95       	ret

00000d3a <SCH_Delete_Task>:
		}
	}
}
uint8 SCH_Delete_Task(const uint8 id)
{
	if (SCH_Tasks_G[id].ptask==0)
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	fc 01       	movw	r30, r24
     d3e:	ee 0f       	add	r30, r30
     d40:	ff 1f       	adc	r31, r31
     d42:	ee 0f       	add	r30, r30
     d44:	ff 1f       	adc	r31, r31
     d46:	ee 0f       	add	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	e8 1b       	sub	r30, r24
     d4c:	f9 0b       	sbc	r31, r25
     d4e:	e0 58       	subi	r30, 0x80	; 128
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	20 81       	ld	r18, Z
     d54:	31 81       	ldd	r19, Z+1	; 0x01
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	11 f4       	brne	.+4      	; 0xd60 <SCH_Delete_Task+0x26>
	{
		return 0;
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	08 95       	ret
	}
	SCH_Tasks_G[id].ptask=0x00;
     d60:	fc 01       	movw	r30, r24
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e8 1b       	sub	r30, r24
     d70:	f9 0b       	sbc	r31, r25
     d72:	e0 58       	subi	r30, 0x80	; 128
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	11 82       	std	Z+1, r1	; 0x01
     d78:	10 82       	st	Z, r1
	SCH_Tasks_G[id].period=0;
     d7a:	15 82       	std	Z+5, r1	; 0x05
     d7c:	14 82       	std	Z+4, r1	; 0x04
	SCH_Tasks_G[id].delay=0;
     d7e:	13 82       	std	Z+3, r1	; 0x03
     d80:	12 82       	std	Z+2, r1	; 0x02
	SCH_Tasks_G[id].Runme=0;
     d82:	16 82       	std	Z+6, r1	; 0x06
}
     d84:	08 95       	ret

00000d86 <SCH_Dispatch_Tasks>:
	SCH_Tasks_G[index].Runme=0;
	return index; // return position of task (to allow later deletion)
}

void SCH_Dispatch_Tasks(void)
{
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
     d90:	c6 e8       	ldi	r28, 0x86	; 134
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	0f 2e       	mov	r0, r31
     d96:	fa ef       	ldi	r31, 0xFA	; 250
     d98:	ef 2e       	mov	r14, r31
     d9a:	ff ef       	ldi	r31, 0xFF	; 255
     d9c:	ff 2e       	mov	r15, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	ec 0e       	add	r14, r28
     da2:	fd 1e       	adc	r15, r29
     da4:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (SCH_Tasks_G[index].Runme>0)
     da6:	88 81       	ld	r24, Y
     da8:	88 23       	and	r24, r24
     daa:	79 f0       	breq	.+30     	; 0xdca <SCH_Dispatch_Tasks+0x44>
		{
			(*SCH_Tasks_G[index].ptask)();//run the task.
     dac:	d7 01       	movw	r26, r14
     dae:	ed 91       	ld	r30, X+
     db0:	fc 91       	ld	r31, X
     db2:	09 95       	icall
			SCH_Tasks_G[index].Runme-=1;
     db4:	88 81       	ld	r24, Y
     db6:	81 50       	subi	r24, 0x01	; 1
     db8:	88 83       	st	Y, r24
			if (SCH_Tasks_G[index].period==0)
     dba:	f7 01       	movw	r30, r14
     dbc:	84 81       	ldd	r24, Z+4	; 0x04
     dbe:	95 81       	ldd	r25, Z+5	; 0x05
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	19 f4       	brne	.+6      	; 0xdca <SCH_Dispatch_Tasks+0x44>
			{
				SCH_Delete_Task(index);
     dc4:	81 2f       	mov	r24, r17
     dc6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SCH_Delete_Task>

void SCH_Dispatch_Tasks(void)
{
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
     dca:	1f 5f       	subi	r17, 0xFF	; 255
     dcc:	27 96       	adiw	r28, 0x07	; 7
     dce:	87 e0       	ldi	r24, 0x07	; 7
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	e8 0e       	add	r14, r24
     dd4:	f9 1e       	adc	r15, r25
     dd6:	1a 30       	cpi	r17, 0x0A	; 10
     dd8:	31 f7       	brne	.-52     	; 0xda6 <SCH_Dispatch_Tasks+0x20>
				SCH_Delete_Task(index);
			}
			
		}
	}
}
     dda:	df 91       	pop	r29
     ddc:	cf 91       	pop	r28
     dde:	1f 91       	pop	r17
     de0:	ff 90       	pop	r15
     de2:	ef 90       	pop	r14
     de4:	08 95       	ret

00000de6 <SCH_Init_T2>:
#include <avr/interrupt.h>

uint8 Error_Code_G=0;

void SCH_Init_T2(void)
{
     de6:	cf 93       	push	r28
	uint8 i;
	for (i=0;i<SCH_MAX_TASKS;i++)
     de8:	c0 e0       	ldi	r28, 0x00	; 0
	{
	 SCH_Delete_Task(i);
     dea:	8c 2f       	mov	r24, r28
     dec:	0e 94 9d 06 	call	0xd3a	; 0xd3a <SCH_Delete_Task>
uint8 Error_Code_G=0;

void SCH_Init_T2(void)
{
	uint8 i;
	for (i=0;i<SCH_MAX_TASKS;i++)
     df0:	cf 5f       	subi	r28, 0xFF	; 255
     df2:	ca 30       	cpi	r28, 0x0A	; 10
     df4:	d1 f7       	brne	.-12     	; 0xdea <SCH_Init_T2+0x4>
	{
	 SCH_Delete_Task(i);
	}
	
	Error_Code_G=0;
     df6:	10 92 72 00 	sts	0x0072, r1
	
	Timer1_Init();
     dfa:	0e 94 6c 07 	call	0xed8	; 0xed8 <Timer1_Init>
	
	
}
     dfe:	cf 91       	pop	r28
     e00:	08 95       	ret

00000e02 <__vector_7>:
}

														

ISR(TIMER1_COMPA_vect)
{
     e02:	1f 92       	push	r1
     e04:	0f 92       	push	r0
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	0f 92       	push	r0
     e0a:	11 24       	eor	r1, r1
     e0c:	2f 93       	push	r18
     e0e:	3f 93       	push	r19
     e10:	4f 93       	push	r20
     e12:	5f 93       	push	r21
     e14:	6f 93       	push	r22
     e16:	7f 93       	push	r23
     e18:	8f 93       	push	r24
     e1a:	9f 93       	push	r25
     e1c:	af 93       	push	r26
     e1e:	bf 93       	push	r27
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ef 93       	push	r30
     e26:	ff 93       	push	r31
	static uint8 i=0;
	uint8 average=0;
	i++;
     e28:	80 91 75 00 	lds	r24, 0x0075
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	80 93 75 00 	sts	0x0075, r24
	if (i==100) //ADC read every 100ms
     e32:	84 36       	cpi	r24, 0x64	; 100
     e34:	81 f4       	brne	.+32     	; 0xe56 <__vector_7+0x54>
	{
		//Taking average for 10 reads
		for (i=0;i<10;i++)
     e36:	10 92 75 00 	sts	0x0075, r1
		{
			TempSensor_READ(&read);
     e3a:	c3 e7       	ldi	r28, 0x73	; 115
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	ce 01       	movw	r24, r28
     e40:	0e 94 69 07 	call	0xed2	; 0xed2 <TempSensor_READ>
	uint8 average=0;
	i++;
	if (i==100) //ADC read every 100ms
	{
		//Taking average for 10 reads
		for (i=0;i<10;i++)
     e44:	80 91 75 00 	lds	r24, 0x0075
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 75 00 	sts	0x0075, r24
     e4e:	8a 30       	cpi	r24, 0x0A	; 10
     e50:	b0 f3       	brcs	.-20     	; 0xe3e <__vector_7+0x3c>
		{
			TempSensor_READ(&read);
			average=average+read;
		}
		average=average/10;
		i=0;
     e52:	10 92 75 00 	sts	0x0075, r1
	}
		
	segment7_display(Set_Tempreature,Frist_Click);
     e56:	60 91 60 00 	lds	r22, 0x0060
     e5a:	80 91 61 00 	lds	r24, 0x0061
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	70 e0       	ldi	r23, 0x00	; 0
     e62:	0e 94 58 00 	call	0xb0	; 0xb0 <segment7_display>
     e66:	e0 e8       	ldi	r30, 0x80	; 128
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	df 01       	movw	r26, r30
     e6c:	16 96       	adiw	r26, 0x06	; 6
	SCH_Tasks_G[id].Runme=0;
}

														

ISR(TIMER1_COMPA_vect)
     e6e:	26 ec       	ldi	r18, 0xC6	; 198
     e70:	30 e0       	ldi	r19, 0x00	; 0
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
	{
		//check if there is a task at this location.
		if (SCH_Tasks_G[index].ptask)
     e72:	80 81       	ld	r24, Z
     e74:	91 81       	ldd	r25, Z+1	; 0x01
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	89 f0       	breq	.+34     	; 0xe9c <__vector_7+0x9a>
		{
			if (SCH_Tasks_G[index].delay==0)
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	51 f4       	brne	.+20     	; 0xe96 <__vector_7+0x94>
			{
				//The task is due to run.
				SCH_Tasks_G[index].Runme+=1; // increase the tun me flag.
     e82:	8c 91       	ld	r24, X
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	8c 93       	st	X, r24
				if (SCH_Tasks_G[index].period)
     e88:	84 81       	ldd	r24, Z+4	; 0x04
     e8a:	95 81       	ldd	r25, Z+5	; 0x05
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	31 f0       	breq	.+12     	; 0xe9c <__vector_7+0x9a>
				{
					//schedule periodic task to run again.
					SCH_Tasks_G[index].delay=SCH_Tasks_G[index].period;
     e90:	93 83       	std	Z+3, r25	; 0x03
     e92:	82 83       	std	Z+2, r24	; 0x02
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <__vector_7+0x9a>
				
			}
			else
			{
				//not yet ready to run.
				SCH_Tasks_G[index].delay-=1;
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	93 83       	std	Z+3, r25	; 0x03
     e9a:	82 83       	std	Z+2, r24	; 0x02
     e9c:	37 96       	adiw	r30, 0x07	; 7
     e9e:	17 96       	adiw	r26, 0x07	; 7
		
	segment7_display(Set_Tempreature,Frist_Click);
	uint8 index=0;
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
     ea0:	e2 17       	cp	r30, r18
     ea2:	f3 07       	cpc	r31, r19
     ea4:	31 f7       	brne	.-52     	; 0xe72 <__vector_7+0x70>
				SCH_Tasks_G[index].delay-=1;
			}
		}
		//Timer1_Manual_Reload();
	}
}
     ea6:	ff 91       	pop	r31
     ea8:	ef 91       	pop	r30
     eaa:	df 91       	pop	r29
     eac:	cf 91       	pop	r28
     eae:	bf 91       	pop	r27
     eb0:	af 91       	pop	r26
     eb2:	9f 91       	pop	r25
     eb4:	8f 91       	pop	r24
     eb6:	7f 91       	pop	r23
     eb8:	6f 91       	pop	r22
     eba:	5f 91       	pop	r21
     ebc:	4f 91       	pop	r20
     ebe:	3f 91       	pop	r19
     ec0:	2f 91       	pop	r18
     ec2:	0f 90       	pop	r0
     ec4:	0f be       	out	0x3f, r0	; 63
     ec6:	0f 90       	pop	r0
     ec8:	1f 90       	pop	r1
     eca:	18 95       	reti

00000ecc <TempsSensor_INIT>:

#include "Temp_sensor.h"
#include "DIO.h"
void TempsSensor_INIT(void)
{
	ADC_INIT();
     ecc:	0e 94 df 00 	call	0x1be	; 0x1be <ADC_INIT>
}
     ed0:	08 95       	ret

00000ed2 <TempSensor_READ>:
void TempSensor_READ(uint16* temp)
{
	ADC_READ(temp);
     ed2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ADC_READ>
     ed6:	08 95       	ret

00000ed8 <Timer1_Init>:
uint8  Num0_ComMatch=0;

/*****************************************************************Timer 1********************************************************************/
void Timer1_Init(void)
{
	TIMSK  |=0x10; //Enable interrupt for timer over flow.
     ed8:	89 b7       	in	r24, 0x39	; 57
     eda:	80 61       	ori	r24, 0x10	; 16
     edc:	89 bf       	out	0x39, r24	; 57
	SREG   |=0x80; //Enable the global interrupt.
     ede:	8f b7       	in	r24, 0x3f	; 63
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	8f bf       	out	0x3f, r24	; 63
	//Timer1_Manual_Reload();
	TCCR1A |=0x00; //OC1A state at compare match & mode of the timer.
     ee4:	8f b5       	in	r24, 0x2f	; 47
     ee6:	8f bd       	out	0x2f, r24	; 47
	TCNT1 =0;
     ee8:	1d bc       	out	0x2d, r1	; 45
     eea:	1c bc       	out	0x2c, r1	; 44
	OCR1A=16;
     eec:	80 e1       	ldi	r24, 0x10	; 16
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9b bd       	out	0x2b, r25	; 43
     ef2:	8a bd       	out	0x2a, r24	; 42
	TCCR1B =13;
     ef4:	8d e0       	ldi	r24, 0x0D	; 13
     ef6:	8e bd       	out	0x2e, r24	; 46
	
	
}
     ef8:	08 95       	ret

00000efa <Set_Call_Back_Timer1>:

void Set_Call_Back_Timer1(void(*ptr)(void))
{
	Time1_Call_Back_ptr = ptr;
     efa:	90 93 7d 00 	sts	0x007D, r25
     efe:	80 93 7c 00 	sts	0x007C, r24
}
     f02:	08 95       	ret

00000f04 <Timer0_Init>:
{
	#if TIMER0_MODE==NORMAL
	
	/*Initialize Timer 0  in Normal mode */
	
	TCCR0 |= 0x00 ;
     f04:	83 b7       	in	r24, 0x33	; 51
     f06:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= 0x01;
     f08:	89 b7       	in	r24, 0x39	; 57
     f0a:	81 60       	ori	r24, 0x01	; 1
     f0c:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
     f0e:	8f b7       	in	r24, 0x3f	; 63
     f10:	80 68       	ori	r24, 0x80	; 128
     f12:	8f bf       	out	0x3f, r24	; 63
	Set_bit(TCCR0,3);
	SREG |=0x80;
	Set_bit(TIMSK,1);
	
	#endif
}
     f14:	08 95       	ret

00000f16 <Timer0_Start>:
void Timer0_Start(void)
{
	
	/* start timer with prescaller   1024 */
	
	TCCR0 |= 0x05;
     f16:	83 b7       	in	r24, 0x33	; 51
     f18:	85 60       	ori	r24, 0x05	; 5
     f1a:	83 bf       	out	0x33, r24	; 51
	
}
     f1c:	08 95       	ret

00000f1e <Timer0_Manual_Reload>:

void Timer0_Manual_Reload(void)
{
	TCCR0 |=0x00;
     f1e:	83 b7       	in	r24, 0x33	; 51
     f20:	83 bf       	out	0x33, r24	; 51
	TCNT0 =0;
     f22:	12 be       	out	0x32, r1	; 50
	TCCR0 |=0x05;
     f24:	83 b7       	in	r24, 0x33	; 51
     f26:	85 60       	ori	r24, 0x05	; 5
     f28:	83 bf       	out	0x33, r24	; 51
}
     f2a:	08 95       	ret

00000f2c <Set_Call_Back_Timer0>:

void Set_Call_Back_Timer0(void(*ptr)(uint8 *str))
{
	Time0_Call_Back_ptr=ptr;
     f2c:	90 93 7f 00 	sts	0x007F, r25
     f30:	80 93 7e 00 	sts	0x007E, r24
}
     f34:	08 95       	ret

00000f36 <Timer0_SetDelay>:
	
	
	/* tick time in micro second */
	uint8 Tick_Time_us = (1024 / 16);
	
	uint32 Total_Ticks = (Delay_Ms * 1000) / Tick_Time_us;
     f36:	28 ee       	ldi	r18, 0xE8	; 232
     f38:	33 e0       	ldi	r19, 0x03	; 3
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	50 e0       	ldi	r21, 0x00	; 0
     f3e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__mulsi3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	68 94       	set
     f48:	15 f8       	bld	r1, 5
     f4a:	b6 95       	lsr	r27
     f4c:	a7 95       	ror	r26
     f4e:	97 95       	ror	r25
     f50:	87 95       	ror	r24
     f52:	16 94       	lsr	r1
     f54:	d1 f7       	brne	.-12     	; 0xf4a <Timer0_SetDelay+0x14>
	
	#if TIMER0_MODE==NORMAL
	
	Number_OverFlows = Total_Ticks / 256 ;
     f56:	49 2f       	mov	r20, r25
     f58:	5a 2f       	mov	r21, r26
     f5a:	6b 2f       	mov	r22, r27
     f5c:	77 27       	eor	r23, r23
	
	CounterRegister_InitValue = 256 - (Total_Ticks % 256) ; //256 - ((  ((float) Total_Ticks / 256 ) - Number_OverFlows ) * 256 );
     f5e:	81 95       	neg	r24
     f60:	80 93 7b 00 	sts	0x007B, r24
	
	
	TCNT0 = CounterRegister_InitValue ;
     f64:	82 bf       	out	0x32, r24	; 50
	
	Number_OverFlows ++;
     f66:	db 01       	movw	r26, r22
     f68:	ca 01       	movw	r24, r20
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	a1 1d       	adc	r26, r1
     f6e:	b1 1d       	adc	r27, r1
     f70:	80 93 77 00 	sts	0x0077, r24
     f74:	90 93 78 00 	sts	0x0078, r25
     f78:	a0 93 79 00 	sts	0x0079, r26
     f7c:	b0 93 7a 00 	sts	0x007A, r27
		Num0_ComMatch=1;
	}
	
	
	#endif
     f80:	08 95       	ret

00000f82 <__subsf3>:
     f82:	50 58       	subi	r21, 0x80	; 128

00000f84 <__addsf3>:
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	0e d0       	rcall	.+28     	; 0xfa6 <__addsf3x>
     f8a:	0d c1       	rjmp	.+538    	; 0x11a6 <__fp_round>
     f8c:	fe d0       	rcall	.+508    	; 0x118a <__fp_pscA>
     f8e:	30 f0       	brcs	.+12     	; 0xf9c <__addsf3+0x18>
     f90:	03 d1       	rcall	.+518    	; 0x1198 <__fp_pscB>
     f92:	20 f0       	brcs	.+8      	; 0xf9c <__addsf3+0x18>
     f94:	31 f4       	brne	.+12     	; 0xfa2 <__addsf3+0x1e>
     f96:	9f 3f       	cpi	r25, 0xFF	; 255
     f98:	11 f4       	brne	.+4      	; 0xf9e <__addsf3+0x1a>
     f9a:	1e f4       	brtc	.+6      	; 0xfa2 <__addsf3+0x1e>
     f9c:	f3 c0       	rjmp	.+486    	; 0x1184 <__fp_nan>
     f9e:	0e f4       	brtc	.+2      	; 0xfa2 <__addsf3+0x1e>
     fa0:	e0 95       	com	r30
     fa2:	e7 fb       	bst	r30, 7
     fa4:	e9 c0       	rjmp	.+466    	; 0x1178 <__fp_inf>

00000fa6 <__addsf3x>:
     fa6:	e9 2f       	mov	r30, r25
     fa8:	0f d1       	rcall	.+542    	; 0x11c8 <__fp_split3>
     faa:	80 f3       	brcs	.-32     	; 0xf8c <__addsf3+0x8>
     fac:	ba 17       	cp	r27, r26
     fae:	62 07       	cpc	r22, r18
     fb0:	73 07       	cpc	r23, r19
     fb2:	84 07       	cpc	r24, r20
     fb4:	95 07       	cpc	r25, r21
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__addsf3x+0x18>
     fb8:	71 f4       	brne	.+28     	; 0xfd6 <__addsf3x+0x30>
     fba:	9e f5       	brtc	.+102    	; 0x1022 <__addsf3x+0x7c>
     fbc:	27 c1       	rjmp	.+590    	; 0x120c <__fp_zero>
     fbe:	0e f4       	brtc	.+2      	; 0xfc2 <__addsf3x+0x1c>
     fc0:	e0 95       	com	r30
     fc2:	0b 2e       	mov	r0, r27
     fc4:	ba 2f       	mov	r27, r26
     fc6:	a0 2d       	mov	r26, r0
     fc8:	0b 01       	movw	r0, r22
     fca:	b9 01       	movw	r22, r18
     fcc:	90 01       	movw	r18, r0
     fce:	0c 01       	movw	r0, r24
     fd0:	ca 01       	movw	r24, r20
     fd2:	a0 01       	movw	r20, r0
     fd4:	11 24       	eor	r1, r1
     fd6:	ff 27       	eor	r31, r31
     fd8:	59 1b       	sub	r21, r25
     fda:	99 f0       	breq	.+38     	; 0x1002 <__addsf3x+0x5c>
     fdc:	59 3f       	cpi	r21, 0xF9	; 249
     fde:	50 f4       	brcc	.+20     	; 0xff4 <__addsf3x+0x4e>
     fe0:	50 3e       	cpi	r21, 0xE0	; 224
     fe2:	68 f1       	brcs	.+90     	; 0x103e <__addsf3x+0x98>
     fe4:	1a 16       	cp	r1, r26
     fe6:	f0 40       	sbci	r31, 0x00	; 0
     fe8:	a2 2f       	mov	r26, r18
     fea:	23 2f       	mov	r18, r19
     fec:	34 2f       	mov	r19, r20
     fee:	44 27       	eor	r20, r20
     ff0:	58 5f       	subi	r21, 0xF8	; 248
     ff2:	f3 cf       	rjmp	.-26     	; 0xfda <__addsf3x+0x34>
     ff4:	46 95       	lsr	r20
     ff6:	37 95       	ror	r19
     ff8:	27 95       	ror	r18
     ffa:	a7 95       	ror	r26
     ffc:	f0 40       	sbci	r31, 0x00	; 0
     ffe:	53 95       	inc	r21
    1000:	c9 f7       	brne	.-14     	; 0xff4 <__addsf3x+0x4e>
    1002:	7e f4       	brtc	.+30     	; 0x1022 <__addsf3x+0x7c>
    1004:	1f 16       	cp	r1, r31
    1006:	ba 0b       	sbc	r27, r26
    1008:	62 0b       	sbc	r22, r18
    100a:	73 0b       	sbc	r23, r19
    100c:	84 0b       	sbc	r24, r20
    100e:	ba f0       	brmi	.+46     	; 0x103e <__addsf3x+0x98>
    1010:	91 50       	subi	r25, 0x01	; 1
    1012:	a1 f0       	breq	.+40     	; 0x103c <__addsf3x+0x96>
    1014:	ff 0f       	add	r31, r31
    1016:	bb 1f       	adc	r27, r27
    1018:	66 1f       	adc	r22, r22
    101a:	77 1f       	adc	r23, r23
    101c:	88 1f       	adc	r24, r24
    101e:	c2 f7       	brpl	.-16     	; 0x1010 <__addsf3x+0x6a>
    1020:	0e c0       	rjmp	.+28     	; 0x103e <__addsf3x+0x98>
    1022:	ba 0f       	add	r27, r26
    1024:	62 1f       	adc	r22, r18
    1026:	73 1f       	adc	r23, r19
    1028:	84 1f       	adc	r24, r20
    102a:	48 f4       	brcc	.+18     	; 0x103e <__addsf3x+0x98>
    102c:	87 95       	ror	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f7 95       	ror	r31
    1036:	9e 3f       	cpi	r25, 0xFE	; 254
    1038:	08 f0       	brcs	.+2      	; 0x103c <__addsf3x+0x96>
    103a:	b3 cf       	rjmp	.-154    	; 0xfa2 <__addsf3+0x1e>
    103c:	93 95       	inc	r25
    103e:	88 0f       	add	r24, r24
    1040:	08 f0       	brcs	.+2      	; 0x1044 <__addsf3x+0x9e>
    1042:	99 27       	eor	r25, r25
    1044:	ee 0f       	add	r30, r30
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	08 95       	ret

0000104c <__cmpsf2>:
    104c:	71 d0       	rcall	.+226    	; 0x1130 <__fp_cmp>
    104e:	08 f4       	brcc	.+2      	; 0x1052 <__cmpsf2+0x6>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	08 95       	ret

00001054 <__fixsfsi>:
    1054:	04 d0       	rcall	.+8      	; 0x105e <__fixunssfsi>
    1056:	68 94       	set
    1058:	b1 11       	cpse	r27, r1
    105a:	d9 c0       	rjmp	.+434    	; 0x120e <__fp_szero>
    105c:	08 95       	ret

0000105e <__fixunssfsi>:
    105e:	bc d0       	rcall	.+376    	; 0x11d8 <__fp_splitA>
    1060:	88 f0       	brcs	.+34     	; 0x1084 <__fixunssfsi+0x26>
    1062:	9f 57       	subi	r25, 0x7F	; 127
    1064:	90 f0       	brcs	.+36     	; 0x108a <__fixunssfsi+0x2c>
    1066:	b9 2f       	mov	r27, r25
    1068:	99 27       	eor	r25, r25
    106a:	b7 51       	subi	r27, 0x17	; 23
    106c:	a0 f0       	brcs	.+40     	; 0x1096 <__fixunssfsi+0x38>
    106e:	d1 f0       	breq	.+52     	; 0x10a4 <__fixunssfsi+0x46>
    1070:	66 0f       	add	r22, r22
    1072:	77 1f       	adc	r23, r23
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	1a f0       	brmi	.+6      	; 0x1080 <__fixunssfsi+0x22>
    107a:	ba 95       	dec	r27
    107c:	c9 f7       	brne	.-14     	; 0x1070 <__fixunssfsi+0x12>
    107e:	12 c0       	rjmp	.+36     	; 0x10a4 <__fixunssfsi+0x46>
    1080:	b1 30       	cpi	r27, 0x01	; 1
    1082:	81 f0       	breq	.+32     	; 0x10a4 <__fixunssfsi+0x46>
    1084:	c3 d0       	rcall	.+390    	; 0x120c <__fp_zero>
    1086:	b1 e0       	ldi	r27, 0x01	; 1
    1088:	08 95       	ret
    108a:	c0 c0       	rjmp	.+384    	; 0x120c <__fp_zero>
    108c:	67 2f       	mov	r22, r23
    108e:	78 2f       	mov	r23, r24
    1090:	88 27       	eor	r24, r24
    1092:	b8 5f       	subi	r27, 0xF8	; 248
    1094:	39 f0       	breq	.+14     	; 0x10a4 <__fixunssfsi+0x46>
    1096:	b9 3f       	cpi	r27, 0xF9	; 249
    1098:	cc f3       	brlt	.-14     	; 0x108c <__fixunssfsi+0x2e>
    109a:	86 95       	lsr	r24
    109c:	77 95       	ror	r23
    109e:	67 95       	ror	r22
    10a0:	b3 95       	inc	r27
    10a2:	d9 f7       	brne	.-10     	; 0x109a <__fixunssfsi+0x3c>
    10a4:	3e f4       	brtc	.+14     	; 0x10b4 <__fixunssfsi+0x56>
    10a6:	90 95       	com	r25
    10a8:	80 95       	com	r24
    10aa:	70 95       	com	r23
    10ac:	61 95       	neg	r22
    10ae:	7f 4f       	sbci	r23, 0xFF	; 255
    10b0:	8f 4f       	sbci	r24, 0xFF	; 255
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__floatunsisf>:
    10b6:	e8 94       	clt
    10b8:	09 c0       	rjmp	.+18     	; 0x10cc <__floatsisf+0x12>

000010ba <__floatsisf>:
    10ba:	97 fb       	bst	r25, 7
    10bc:	3e f4       	brtc	.+14     	; 0x10cc <__floatsisf+0x12>
    10be:	90 95       	com	r25
    10c0:	80 95       	com	r24
    10c2:	70 95       	com	r23
    10c4:	61 95       	neg	r22
    10c6:	7f 4f       	sbci	r23, 0xFF	; 255
    10c8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255
    10cc:	99 23       	and	r25, r25
    10ce:	a9 f0       	breq	.+42     	; 0x10fa <__floatsisf+0x40>
    10d0:	f9 2f       	mov	r31, r25
    10d2:	96 e9       	ldi	r25, 0x96	; 150
    10d4:	bb 27       	eor	r27, r27
    10d6:	93 95       	inc	r25
    10d8:	f6 95       	lsr	r31
    10da:	87 95       	ror	r24
    10dc:	77 95       	ror	r23
    10de:	67 95       	ror	r22
    10e0:	b7 95       	ror	r27
    10e2:	f1 11       	cpse	r31, r1
    10e4:	f8 cf       	rjmp	.-16     	; 0x10d6 <__floatsisf+0x1c>
    10e6:	fa f4       	brpl	.+62     	; 0x1126 <__floatsisf+0x6c>
    10e8:	bb 0f       	add	r27, r27
    10ea:	11 f4       	brne	.+4      	; 0x10f0 <__floatsisf+0x36>
    10ec:	60 ff       	sbrs	r22, 0
    10ee:	1b c0       	rjmp	.+54     	; 0x1126 <__floatsisf+0x6c>
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
    10f4:	8f 4f       	sbci	r24, 0xFF	; 255
    10f6:	9f 4f       	sbci	r25, 0xFF	; 255
    10f8:	16 c0       	rjmp	.+44     	; 0x1126 <__floatsisf+0x6c>
    10fa:	88 23       	and	r24, r24
    10fc:	11 f0       	breq	.+4      	; 0x1102 <__floatsisf+0x48>
    10fe:	96 e9       	ldi	r25, 0x96	; 150
    1100:	11 c0       	rjmp	.+34     	; 0x1124 <__floatsisf+0x6a>
    1102:	77 23       	and	r23, r23
    1104:	21 f0       	breq	.+8      	; 0x110e <__floatsisf+0x54>
    1106:	9e e8       	ldi	r25, 0x8E	; 142
    1108:	87 2f       	mov	r24, r23
    110a:	76 2f       	mov	r23, r22
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <__floatsisf+0x5e>
    110e:	66 23       	and	r22, r22
    1110:	71 f0       	breq	.+28     	; 0x112e <__floatsisf+0x74>
    1112:	96 e8       	ldi	r25, 0x86	; 134
    1114:	86 2f       	mov	r24, r22
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	2a f0       	brmi	.+10     	; 0x1126 <__floatsisf+0x6c>
    111c:	9a 95       	dec	r25
    111e:	66 0f       	add	r22, r22
    1120:	77 1f       	adc	r23, r23
    1122:	88 1f       	adc	r24, r24
    1124:	da f7       	brpl	.-10     	; 0x111c <__floatsisf+0x62>
    1126:	88 0f       	add	r24, r24
    1128:	96 95       	lsr	r25
    112a:	87 95       	ror	r24
    112c:	97 f9       	bld	r25, 7
    112e:	08 95       	ret

00001130 <__fp_cmp>:
    1130:	99 0f       	add	r25, r25
    1132:	00 08       	sbc	r0, r0
    1134:	55 0f       	add	r21, r21
    1136:	aa 0b       	sbc	r26, r26
    1138:	e0 e8       	ldi	r30, 0x80	; 128
    113a:	fe ef       	ldi	r31, 0xFE	; 254
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	e8 07       	cpc	r30, r24
    1142:	f9 07       	cpc	r31, r25
    1144:	c0 f0       	brcs	.+48     	; 0x1176 <__fp_cmp+0x46>
    1146:	12 16       	cp	r1, r18
    1148:	13 06       	cpc	r1, r19
    114a:	e4 07       	cpc	r30, r20
    114c:	f5 07       	cpc	r31, r21
    114e:	98 f0       	brcs	.+38     	; 0x1176 <__fp_cmp+0x46>
    1150:	62 1b       	sub	r22, r18
    1152:	73 0b       	sbc	r23, r19
    1154:	84 0b       	sbc	r24, r20
    1156:	95 0b       	sbc	r25, r21
    1158:	39 f4       	brne	.+14     	; 0x1168 <__fp_cmp+0x38>
    115a:	0a 26       	eor	r0, r26
    115c:	61 f0       	breq	.+24     	; 0x1176 <__fp_cmp+0x46>
    115e:	23 2b       	or	r18, r19
    1160:	24 2b       	or	r18, r20
    1162:	25 2b       	or	r18, r21
    1164:	21 f4       	brne	.+8      	; 0x116e <__fp_cmp+0x3e>
    1166:	08 95       	ret
    1168:	0a 26       	eor	r0, r26
    116a:	09 f4       	brne	.+2      	; 0x116e <__fp_cmp+0x3e>
    116c:	a1 40       	sbci	r26, 0x01	; 1
    116e:	a6 95       	lsr	r26
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	81 1d       	adc	r24, r1
    1174:	81 1d       	adc	r24, r1
    1176:	08 95       	ret

00001178 <__fp_inf>:
    1178:	97 f9       	bld	r25, 7
    117a:	9f 67       	ori	r25, 0x7F	; 127
    117c:	80 e8       	ldi	r24, 0x80	; 128
    117e:	70 e0       	ldi	r23, 0x00	; 0
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	08 95       	ret

00001184 <__fp_nan>:
    1184:	9f ef       	ldi	r25, 0xFF	; 255
    1186:	80 ec       	ldi	r24, 0xC0	; 192
    1188:	08 95       	ret

0000118a <__fp_pscA>:
    118a:	00 24       	eor	r0, r0
    118c:	0a 94       	dec	r0
    118e:	16 16       	cp	r1, r22
    1190:	17 06       	cpc	r1, r23
    1192:	18 06       	cpc	r1, r24
    1194:	09 06       	cpc	r0, r25
    1196:	08 95       	ret

00001198 <__fp_pscB>:
    1198:	00 24       	eor	r0, r0
    119a:	0a 94       	dec	r0
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	14 06       	cpc	r1, r20
    11a2:	05 06       	cpc	r0, r21
    11a4:	08 95       	ret

000011a6 <__fp_round>:
    11a6:	09 2e       	mov	r0, r25
    11a8:	03 94       	inc	r0
    11aa:	00 0c       	add	r0, r0
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <__fp_round+0xc>
    11ae:	88 23       	and	r24, r24
    11b0:	52 f0       	brmi	.+20     	; 0x11c6 <__fp_round+0x20>
    11b2:	bb 0f       	add	r27, r27
    11b4:	40 f4       	brcc	.+16     	; 0x11c6 <__fp_round+0x20>
    11b6:	bf 2b       	or	r27, r31
    11b8:	11 f4       	brne	.+4      	; 0x11be <__fp_round+0x18>
    11ba:	60 ff       	sbrs	r22, 0
    11bc:	04 c0       	rjmp	.+8      	; 0x11c6 <__fp_round+0x20>
    11be:	6f 5f       	subi	r22, 0xFF	; 255
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	08 95       	ret

000011c8 <__fp_split3>:
    11c8:	57 fd       	sbrc	r21, 7
    11ca:	90 58       	subi	r25, 0x80	; 128
    11cc:	44 0f       	add	r20, r20
    11ce:	55 1f       	adc	r21, r21
    11d0:	59 f0       	breq	.+22     	; 0x11e8 <__fp_splitA+0x10>
    11d2:	5f 3f       	cpi	r21, 0xFF	; 255
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <__fp_splitA+0x1a>
    11d6:	47 95       	ror	r20

000011d8 <__fp_splitA>:
    11d8:	88 0f       	add	r24, r24
    11da:	97 fb       	bst	r25, 7
    11dc:	99 1f       	adc	r25, r25
    11de:	61 f0       	breq	.+24     	; 0x11f8 <__fp_splitA+0x20>
    11e0:	9f 3f       	cpi	r25, 0xFF	; 255
    11e2:	79 f0       	breq	.+30     	; 0x1202 <__fp_splitA+0x2a>
    11e4:	87 95       	ror	r24
    11e6:	08 95       	ret
    11e8:	12 16       	cp	r1, r18
    11ea:	13 06       	cpc	r1, r19
    11ec:	14 06       	cpc	r1, r20
    11ee:	55 1f       	adc	r21, r21
    11f0:	f2 cf       	rjmp	.-28     	; 0x11d6 <__fp_split3+0xe>
    11f2:	46 95       	lsr	r20
    11f4:	f1 df       	rcall	.-30     	; 0x11d8 <__fp_splitA>
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <__fp_splitA+0x30>
    11f8:	16 16       	cp	r1, r22
    11fa:	17 06       	cpc	r1, r23
    11fc:	18 06       	cpc	r1, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	f1 cf       	rjmp	.-30     	; 0x11e4 <__fp_splitA+0xc>
    1202:	86 95       	lsr	r24
    1204:	71 05       	cpc	r23, r1
    1206:	61 05       	cpc	r22, r1
    1208:	08 94       	sec
    120a:	08 95       	ret

0000120c <__fp_zero>:
    120c:	e8 94       	clt

0000120e <__fp_szero>:
    120e:	bb 27       	eor	r27, r27
    1210:	66 27       	eor	r22, r22
    1212:	77 27       	eor	r23, r23
    1214:	cb 01       	movw	r24, r22
    1216:	97 f9       	bld	r25, 7
    1218:	08 95       	ret

0000121a <__gesf2>:
    121a:	8a df       	rcall	.-236    	; 0x1130 <__fp_cmp>
    121c:	08 f4       	brcc	.+2      	; 0x1220 <__gesf2+0x6>
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__mulsf3>:
    1222:	0b d0       	rcall	.+22     	; 0x123a <__mulsf3x>
    1224:	c0 cf       	rjmp	.-128    	; 0x11a6 <__fp_round>
    1226:	b1 df       	rcall	.-158    	; 0x118a <__fp_pscA>
    1228:	28 f0       	brcs	.+10     	; 0x1234 <__mulsf3+0x12>
    122a:	b6 df       	rcall	.-148    	; 0x1198 <__fp_pscB>
    122c:	18 f0       	brcs	.+6      	; 0x1234 <__mulsf3+0x12>
    122e:	95 23       	and	r25, r21
    1230:	09 f0       	breq	.+2      	; 0x1234 <__mulsf3+0x12>
    1232:	a2 cf       	rjmp	.-188    	; 0x1178 <__fp_inf>
    1234:	a7 cf       	rjmp	.-178    	; 0x1184 <__fp_nan>
    1236:	11 24       	eor	r1, r1
    1238:	ea cf       	rjmp	.-44     	; 0x120e <__fp_szero>

0000123a <__mulsf3x>:
    123a:	c6 df       	rcall	.-116    	; 0x11c8 <__fp_split3>
    123c:	a0 f3       	brcs	.-24     	; 0x1226 <__mulsf3+0x4>

0000123e <__mulsf3_pse>:
    123e:	95 9f       	mul	r25, r21
    1240:	d1 f3       	breq	.-12     	; 0x1236 <__mulsf3+0x14>
    1242:	95 0f       	add	r25, r21
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	55 1f       	adc	r21, r21
    1248:	62 9f       	mul	r22, r18
    124a:	f0 01       	movw	r30, r0
    124c:	72 9f       	mul	r23, r18
    124e:	bb 27       	eor	r27, r27
    1250:	f0 0d       	add	r31, r0
    1252:	b1 1d       	adc	r27, r1
    1254:	63 9f       	mul	r22, r19
    1256:	aa 27       	eor	r26, r26
    1258:	f0 0d       	add	r31, r0
    125a:	b1 1d       	adc	r27, r1
    125c:	aa 1f       	adc	r26, r26
    125e:	64 9f       	mul	r22, r20
    1260:	66 27       	eor	r22, r22
    1262:	b0 0d       	add	r27, r0
    1264:	a1 1d       	adc	r26, r1
    1266:	66 1f       	adc	r22, r22
    1268:	82 9f       	mul	r24, r18
    126a:	22 27       	eor	r18, r18
    126c:	b0 0d       	add	r27, r0
    126e:	a1 1d       	adc	r26, r1
    1270:	62 1f       	adc	r22, r18
    1272:	73 9f       	mul	r23, r19
    1274:	b0 0d       	add	r27, r0
    1276:	a1 1d       	adc	r26, r1
    1278:	62 1f       	adc	r22, r18
    127a:	83 9f       	mul	r24, r19
    127c:	a0 0d       	add	r26, r0
    127e:	61 1d       	adc	r22, r1
    1280:	22 1f       	adc	r18, r18
    1282:	74 9f       	mul	r23, r20
    1284:	33 27       	eor	r19, r19
    1286:	a0 0d       	add	r26, r0
    1288:	61 1d       	adc	r22, r1
    128a:	23 1f       	adc	r18, r19
    128c:	84 9f       	mul	r24, r20
    128e:	60 0d       	add	r22, r0
    1290:	21 1d       	adc	r18, r1
    1292:	82 2f       	mov	r24, r18
    1294:	76 2f       	mov	r23, r22
    1296:	6a 2f       	mov	r22, r26
    1298:	11 24       	eor	r1, r1
    129a:	9f 57       	subi	r25, 0x7F	; 127
    129c:	50 40       	sbci	r21, 0x00	; 0
    129e:	8a f0       	brmi	.+34     	; 0x12c2 <__mulsf3_pse+0x84>
    12a0:	e1 f0       	breq	.+56     	; 0x12da <__mulsf3_pse+0x9c>
    12a2:	88 23       	and	r24, r24
    12a4:	4a f0       	brmi	.+18     	; 0x12b8 <__mulsf3_pse+0x7a>
    12a6:	ee 0f       	add	r30, r30
    12a8:	ff 1f       	adc	r31, r31
    12aa:	bb 1f       	adc	r27, r27
    12ac:	66 1f       	adc	r22, r22
    12ae:	77 1f       	adc	r23, r23
    12b0:	88 1f       	adc	r24, r24
    12b2:	91 50       	subi	r25, 0x01	; 1
    12b4:	50 40       	sbci	r21, 0x00	; 0
    12b6:	a9 f7       	brne	.-22     	; 0x12a2 <__mulsf3_pse+0x64>
    12b8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ba:	51 05       	cpc	r21, r1
    12bc:	70 f0       	brcs	.+28     	; 0x12da <__mulsf3_pse+0x9c>
    12be:	5c cf       	rjmp	.-328    	; 0x1178 <__fp_inf>
    12c0:	a6 cf       	rjmp	.-180    	; 0x120e <__fp_szero>
    12c2:	5f 3f       	cpi	r21, 0xFF	; 255
    12c4:	ec f3       	brlt	.-6      	; 0x12c0 <__mulsf3_pse+0x82>
    12c6:	98 3e       	cpi	r25, 0xE8	; 232
    12c8:	dc f3       	brlt	.-10     	; 0x12c0 <__mulsf3_pse+0x82>
    12ca:	86 95       	lsr	r24
    12cc:	77 95       	ror	r23
    12ce:	67 95       	ror	r22
    12d0:	b7 95       	ror	r27
    12d2:	f7 95       	ror	r31
    12d4:	e7 95       	ror	r30
    12d6:	9f 5f       	subi	r25, 0xFF	; 255
    12d8:	c1 f7       	brne	.-16     	; 0x12ca <__mulsf3_pse+0x8c>
    12da:	fe 2b       	or	r31, r30
    12dc:	88 0f       	add	r24, r24
    12de:	91 1d       	adc	r25, r1
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	97 f9       	bld	r25, 7
    12e6:	08 95       	ret

000012e8 <__mulsi3>:
    12e8:	62 9f       	mul	r22, r18
    12ea:	d0 01       	movw	r26, r0
    12ec:	73 9f       	mul	r23, r19
    12ee:	f0 01       	movw	r30, r0
    12f0:	82 9f       	mul	r24, r18
    12f2:	e0 0d       	add	r30, r0
    12f4:	f1 1d       	adc	r31, r1
    12f6:	64 9f       	mul	r22, r20
    12f8:	e0 0d       	add	r30, r0
    12fa:	f1 1d       	adc	r31, r1
    12fc:	92 9f       	mul	r25, r18
    12fe:	f0 0d       	add	r31, r0
    1300:	83 9f       	mul	r24, r19
    1302:	f0 0d       	add	r31, r0
    1304:	74 9f       	mul	r23, r20
    1306:	f0 0d       	add	r31, r0
    1308:	65 9f       	mul	r22, r21
    130a:	f0 0d       	add	r31, r0
    130c:	99 27       	eor	r25, r25
    130e:	72 9f       	mul	r23, r18
    1310:	b0 0d       	add	r27, r0
    1312:	e1 1d       	adc	r30, r1
    1314:	f9 1f       	adc	r31, r25
    1316:	63 9f       	mul	r22, r19
    1318:	b0 0d       	add	r27, r0
    131a:	e1 1d       	adc	r30, r1
    131c:	f9 1f       	adc	r31, r25
    131e:	bd 01       	movw	r22, r26
    1320:	cf 01       	movw	r24, r30
    1322:	11 24       	eor	r1, r1
    1324:	08 95       	ret

00001326 <__udivmodqi4>:
    1326:	99 1b       	sub	r25, r25
    1328:	79 e0       	ldi	r23, 0x09	; 9
    132a:	04 c0       	rjmp	.+8      	; 0x1334 <__udivmodqi4_ep>

0000132c <__udivmodqi4_loop>:
    132c:	99 1f       	adc	r25, r25
    132e:	96 17       	cp	r25, r22
    1330:	08 f0       	brcs	.+2      	; 0x1334 <__udivmodqi4_ep>
    1332:	96 1b       	sub	r25, r22

00001334 <__udivmodqi4_ep>:
    1334:	88 1f       	adc	r24, r24
    1336:	7a 95       	dec	r23
    1338:	c9 f7       	brne	.-14     	; 0x132c <__udivmodqi4_loop>
    133a:	80 95       	com	r24
    133c:	08 95       	ret

0000133e <__divmodsi4>:
    133e:	97 fb       	bst	r25, 7
    1340:	09 2e       	mov	r0, r25
    1342:	05 26       	eor	r0, r21
    1344:	0e d0       	rcall	.+28     	; 0x1362 <__divmodsi4_neg1>
    1346:	57 fd       	sbrc	r21, 7
    1348:	04 d0       	rcall	.+8      	; 0x1352 <__divmodsi4_neg2>
    134a:	14 d0       	rcall	.+40     	; 0x1374 <__udivmodsi4>
    134c:	0a d0       	rcall	.+20     	; 0x1362 <__divmodsi4_neg1>
    134e:	00 1c       	adc	r0, r0
    1350:	38 f4       	brcc	.+14     	; 0x1360 <__divmodsi4_exit>

00001352 <__divmodsi4_neg2>:
    1352:	50 95       	com	r21
    1354:	40 95       	com	r20
    1356:	30 95       	com	r19
    1358:	21 95       	neg	r18
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	4f 4f       	sbci	r20, 0xFF	; 255
    135e:	5f 4f       	sbci	r21, 0xFF	; 255

00001360 <__divmodsi4_exit>:
    1360:	08 95       	ret

00001362 <__divmodsi4_neg1>:
    1362:	f6 f7       	brtc	.-4      	; 0x1360 <__divmodsi4_exit>
    1364:	90 95       	com	r25
    1366:	80 95       	com	r24
    1368:	70 95       	com	r23
    136a:	61 95       	neg	r22
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	08 95       	ret

00001374 <__udivmodsi4>:
    1374:	a1 e2       	ldi	r26, 0x21	; 33
    1376:	1a 2e       	mov	r1, r26
    1378:	aa 1b       	sub	r26, r26
    137a:	bb 1b       	sub	r27, r27
    137c:	fd 01       	movw	r30, r26
    137e:	0d c0       	rjmp	.+26     	; 0x139a <__udivmodsi4_ep>

00001380 <__udivmodsi4_loop>:
    1380:	aa 1f       	adc	r26, r26
    1382:	bb 1f       	adc	r27, r27
    1384:	ee 1f       	adc	r30, r30
    1386:	ff 1f       	adc	r31, r31
    1388:	a2 17       	cp	r26, r18
    138a:	b3 07       	cpc	r27, r19
    138c:	e4 07       	cpc	r30, r20
    138e:	f5 07       	cpc	r31, r21
    1390:	20 f0       	brcs	.+8      	; 0x139a <__udivmodsi4_ep>
    1392:	a2 1b       	sub	r26, r18
    1394:	b3 0b       	sbc	r27, r19
    1396:	e4 0b       	sbc	r30, r20
    1398:	f5 0b       	sbc	r31, r21

0000139a <__udivmodsi4_ep>:
    139a:	66 1f       	adc	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	1a 94       	dec	r1
    13a4:	69 f7       	brne	.-38     	; 0x1380 <__udivmodsi4_loop>
    13a6:	60 95       	com	r22
    13a8:	70 95       	com	r23
    13aa:	80 95       	com	r24
    13ac:	90 95       	com	r25
    13ae:	9b 01       	movw	r18, r22
    13b0:	ac 01       	movw	r20, r24
    13b2:	bd 01       	movw	r22, r26
    13b4:	cf 01       	movw	r24, r30
    13b6:	08 95       	ret

000013b8 <_exit>:
    13b8:	f8 94       	cli

000013ba <__stop_program>:
    13ba:	ff cf       	rjmp	.-2      	; 0x13ba <__stop_program>
