
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001460  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005c  0080007e  0080007e  00001512  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  00001514  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002a0  00000000  00000000  00003b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e02  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf9  00000000  00000000  00005bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fd5  00000000  00000000  000067ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  00007780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007eb  00000000  00000000  00007f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e6f  00000000  00000000  0000870b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3d       	cpi	r26, 0xDA	; 218
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c2 05 	call	0xb84	; 0xb84 <main>
      8a:	0c 94 2e 0a 	jmp	0x145c	; 0x145c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <segment7_init>:
uint8 j,x;								//To store each number of the value displayed

void segment7_init(void)
{
	//Define 7-semnents enable pins as output
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT);
      92:	81 e0       	ldi	r24, 0x01	; 1
      94:	61 e0       	ldi	r22, 0x01	; 1
      96:	41 e0       	ldi	r20, 0x01	; 1
      98:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT);
      9c:	81 e0       	ldi	r24, 0x01	; 1
      9e:	62 e0       	ldi	r22, 0x02	; 2
      a0:	41 e0       	ldi	r20, 0x01	; 1
      a2:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	//Define Data Port as output
	DIO_SetPortDIR(DIO_PORTA,DIO_PORT_OUTPUT);
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	6f ef       	ldi	r22, 0xFF	; 255
      aa:	0e 94 06 01 	call	0x20c	; 0x20c <DIO_SetPortDIR>
	
	
}
      ae:	08 95       	ret

000000b0 <segment7_Set_Number>:
void segment7_Set_Number(uint16 num)
{
	//split the value into 2 values to display each number on different 7-segment
	j=num%10;
      b0:	6a e0       	ldi	r22, 0x0A	; 10
      b2:	70 e0       	ldi	r23, 0x00	; 0
      b4:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodhi4>
      b8:	80 93 92 00 	sts	0x0092, r24
	num=num/10;
	
	x=num%100;
      bc:	cb 01       	movw	r24, r22
      be:	64 e6       	ldi	r22, 0x64	; 100
      c0:	70 e0       	ldi	r23, 0x00	; 0
      c2:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodhi4>
      c6:	80 93 93 00 	sts	0x0093, r24
}
      ca:	08 95       	ret

000000cc <first_segment7_display>:
void first_segment7_display(void)
{
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
		counter=0;
		segment_blinking_speed=20;
		Set_Tempreature=average;
	}*/
		//Prepare the value for display
		segment7_Set_Number(Set_Tempreature);
      d0:	80 91 6c 00 	lds	r24, 0x006C
      d4:	90 91 6d 00 	lds	r25, 0x006D
      d8:	0e 94 58 00 	call	0xb0	; 0xb0 <segment7_Set_Number>
		//Display the value
		PORTA=((arr[x])<<4);
      dc:	80 91 93 00 	lds	r24, 0x0093
      e0:	c0 e6       	ldi	r28, 0x60	; 96
      e2:	d0 e0       	ldi	r29, 0x00	; 0
      e4:	fe 01       	movw	r30, r28
      e6:	e8 0f       	add	r30, r24
      e8:	f1 1d       	adc	r31, r1
      ea:	80 81       	ld	r24, Z
      ec:	82 95       	swap	r24
      ee:	80 7f       	andi	r24, 0xF0	; 240
      f0:	8b bb       	out	0x1b, r24	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	41 e0       	ldi	r20, 0x01	; 1
      f8:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	83 ec       	ldi	r24, 0xC3	; 195
      fe:	99 e0       	ldi	r25, 0x09	; 9
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <first_segment7_display+0x34>
     104:	00 c0       	rjmp	.+0      	; 0x106 <first_segment7_display+0x3a>
     106:	00 00       	nop
		_delay_ms(10);
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	62 e0       	ldi	r22, 0x02	; 2
     10c:	40 e0       	ldi	r20, 0x00	; 0
     10e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
		PORTA=((arr[j])<<4);
     112:	80 91 92 00 	lds	r24, 0x0092
     116:	c8 0f       	add	r28, r24
     118:	d1 1d       	adc	r29, r1
     11a:	88 81       	ld	r24, Y
     11c:	82 95       	swap	r24
     11e:	80 7f       	andi	r24, 0xF0	; 240
     120:	8b bb       	out	0x1b, r24	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	61 e0       	ldi	r22, 0x01	; 1
     126:	41 e0       	ldi	r20, 0x01	; 1
     128:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     12c:	83 ec       	ldi	r24, 0xC3	; 195
     12e:	99 e0       	ldi	r25, 0x09	; 9
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <first_segment7_display+0x64>
     134:	00 c0       	rjmp	.+0      	; 0x136 <first_segment7_display+0x6a>
     136:	00 00       	nop
		_delay_ms(10);
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
     138:	81 e0       	ldi	r24, 0x01	; 1
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	40 e0       	ldi	r20, 0x00	; 0
     13e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	08 95       	ret

00000148 <segment7_Stop>:
void segment7_Stop (void)
{
	DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	61 e0       	ldi	r22, 0x01	; 1
     14c:	40 e0       	ldi	r20, 0x00	; 0
     14e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	62 e0       	ldi	r22, 0x02	; 2
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     15c:	08 95       	ret

0000015e <mode_selection>:
	
}
*/

void mode_selection(void)
{
     15e:	05 c0       	rjmp	.+10     	; 0x16a <mode_selection+0xc>
	
	while ((!(Get_bit(GIFR,6)))&&(!(Get_bit(GIFR,7)))&&(k<5000))//if the buttons not pressed & counter less than 5 seconds
	{
		k++;											   //increase the counter
     160:	80 91 6a 00 	lds	r24, 0x006A
     164:	8f 5f       	subi	r24, 0xFF	; 255
     166:	80 93 6a 00 	sts	0x006A, r24
*/

void mode_selection(void)
{
	
	while ((!(Get_bit(GIFR,6)))&&(!(Get_bit(GIFR,7)))&&(k<5000))//if the buttons not pressed & counter less than 5 seconds
     16a:	8a b7       	in	r24, 0x3a	; 58
     16c:	86 fd       	sbrc	r24, 6
     16e:	03 c0       	rjmp	.+6      	; 0x176 <mode_selection+0x18>
     170:	0a b6       	in	r0, 0x3a	; 58
     172:	07 fe       	sbrs	r0, 7
     174:	f5 cf       	rjmp	.-22     	; 0x160 <mode_selection+0x2>
     176:	08 95       	ret

00000178 <ADC_INIT>:
uint16 read=0;
void ADC_INIT(void)
{
#if VOLTAGE_REFRENCE   ==    ADC_VREF_AVCC

Set_bit(ADMUX,6);
     178:	3e 9a       	sbi	0x07, 6	; 7
Clr_bit(ADMUX,7);
     17a:	3f 98       	cbi	0x07, 7	; 7
#if ADC_CHANNEL       ==   ADC_CHANNEL_1

Set_bit(ADMUX,0);

#elif ADC_CHANNEL     ==   ADC_CHANNEL_0
Clr_bit(ADMUX,0);
     17c:	38 98       	cbi	0x07, 0	; 7

#endif

#if VOLTAGE_ADJUCENT   ==    ADC_RIGHT_ADJUST
Clr_bit(ADMUX,5);
     17e:	3d 98       	cbi	0x07, 5	; 7
#endif

#if ADC_CONVERSION_TRIGGER== ADC_AUTO_TRIGGER

Set_bit(ADCSRA,5);
     180:	35 9a       	sbi	0x06, 5	; 6

#endif

#if ADC_PRESCALER     ==     ADC_PRESEC_128

Set_bit(ADCSRA,0);
     182:	30 9a       	sbi	0x06, 0	; 6
Set_bit(ADCSRA,1);
     184:	31 9a       	sbi	0x06, 1	; 6
Set_bit(ADCSRA,2);
     186:	32 9a       	sbi	0x06, 2	; 6

#endif

#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE

Clr_bit(ADCSRA,3);
     188:	33 98       	cbi	0x06, 3	; 6

#endif

/* Enable ADC */

Set_bit(ADCSRA,7);
     18a:	37 9a       	sbi	0x06, 7	; 6
}
     18c:	08 95       	ret

0000018e <ADC_READ>:

void ADC_READ(void)
{
	uint16 Digital_value=0;
	
	Set_bit(ADCSRA,6);
     18e:	36 9a       	sbi	0x06, 6	; 6
	
	#if ADC_INTERRUPT_STATUS  == ADC_INTERRUPT_DISABLE
	
	while (! Get_bit(ADCSRA,4));
     190:	86 b1       	in	r24, 0x06	; 6
     192:	84 ff       	sbrs	r24, 4
     194:	fd cf       	rjmp	.-6      	; 0x190 <ADC_READ+0x2>
	
	Digital_value=ADC_ADJUST;
     196:	44 b1       	in	r20, 0x04	; 4
     198:	55 b1       	in	r21, 0x05	; 5
	
	read=((Digital_value *500)/1024);
     19a:	24 ef       	ldi	r18, 0xF4	; 244
     19c:	31 e0       	ldi	r19, 0x01	; 1
     19e:	42 9f       	mul	r20, r18
     1a0:	c0 01       	movw	r24, r0
     1a2:	43 9f       	mul	r20, r19
     1a4:	90 0d       	add	r25, r0
     1a6:	52 9f       	mul	r21, r18
     1a8:	90 0d       	add	r25, r0
     1aa:	11 24       	eor	r1, r1
     1ac:	89 2f       	mov	r24, r25
     1ae:	86 95       	lsr	r24
     1b0:	86 95       	lsr	r24
     1b2:	80 93 7e 00 	sts	0x007E, r24
     1b6:	10 92 7f 00 	sts	0x007F, r1
	
	#endif
	
}
     1ba:	08 95       	ret

000001bc <cooling_Init>:

#include "cooling_fan.h"

void cooling_Init(void)
{
	DIO_SetPINDIR(DIO_PORTC , DIO_PIN2 , DIO_PIN_OUTPUT) ;
     1bc:	82 e0       	ldi	r24, 0x02	; 2
     1be:	62 e0       	ldi	r22, 0x02	; 2
     1c0:	41 e0       	ldi	r20, 0x01	; 1
     1c2:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
}
     1c6:	08 95       	ret

000001c8 <cooling_set_state>:

void cooling_set_state(uint8 state)
{
	switch (state)
     1c8:	88 23       	and	r24, r24
     1ca:	41 f0       	breq	.+16     	; 0x1dc <cooling_set_state+0x14>
     1cc:	81 30       	cpi	r24, 0x01	; 1
     1ce:	59 f4       	brne	.+22     	; 0x1e6 <cooling_set_state+0x1e>
	{
		case cool_ON :
			DIO_WritePIN(DIO_PORTC , DIO_PIN2 , DIO_PIN_HIGH) ;
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	62 e0       	ldi	r22, 0x02	; 2
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
			break;
     1da:	08 95       	ret
			
		case cool_OFF :
			DIO_WritePIN(DIO_PORTC , DIO_PIN2 ,DIO_PIN_LOW) ;
     1dc:	82 e0       	ldi	r24, 0x02	; 2
     1de:	62 e0       	ldi	r22, 0x02	; 2
     1e0:	40 e0       	ldi	r20, 0x00	; 0
     1e2:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     1e6:	08 95       	ret

000001e8 <cooling_get_state>:
			break;
	}
}

uint8 cooling_get_state (void)
{
     1e8:	cf 93       	push	r28
     1ea:	df 93       	push	r29
     1ec:	0f 92       	push	r0
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
	uint8 st = 0;
     1f2:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTC , DIO_PIN2,&st);
     1f4:	82 e0       	ldi	r24, 0x02	; 2
     1f6:	62 e0       	ldi	r22, 0x02	; 2
     1f8:	ae 01       	movw	r20, r28
     1fa:	4f 5f       	subi	r20, 0xFF	; 255
     1fc:	5f 4f       	sbci	r21, 0xFF	; 255
     1fe:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_ReadPin>
	
	return st ;
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
     20c:	81 30       	cpi	r24, 0x01	; 1
     20e:	49 f0       	breq	.+18     	; 0x222 <DIO_SetPortDIR+0x16>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	28 f0       	brcs	.+10     	; 0x21e <DIO_SetPortDIR+0x12>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	39 f0       	breq	.+14     	; 0x226 <DIO_SetPortDIR+0x1a>
     218:	83 30       	cpi	r24, 0x03	; 3
     21a:	41 f4       	brne	.+16     	; 0x22c <DIO_SetPortDIR+0x20>
     21c:	06 c0       	rjmp	.+12     	; 0x22a <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
     21e:	6a bb       	out	0x1a, r22	; 26
		break;
     220:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
     222:	67 bb       	out	0x17, r22	; 23
		break;
     224:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
     226:	64 bb       	out	0x14, r22	; 20
		break;
     228:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
     22a:	61 bb       	out	0x11, r22	; 17
     22c:	08 95       	ret

0000022e <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
     22e:	44 23       	and	r20, r20
     230:	09 f4       	brne	.+2      	; 0x234 <DIO_SetPINDIR+0x6>
     232:	41 c0       	rjmp	.+130    	; 0x2b6 <DIO_SetPINDIR+0x88>
     234:	41 30       	cpi	r20, 0x01	; 1
     236:	09 f0       	breq	.+2      	; 0x23a <DIO_SetPINDIR+0xc>
     238:	7e c0       	rjmp	.+252    	; 0x336 <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	a9 f0       	breq	.+42     	; 0x268 <DIO_SetPINDIR+0x3a>
     23e:	81 30       	cpi	r24, 0x01	; 1
     240:	30 f0       	brcs	.+12     	; 0x24e <DIO_SetPINDIR+0x20>
     242:	82 30       	cpi	r24, 0x02	; 2
     244:	f1 f0       	breq	.+60     	; 0x282 <DIO_SetPINDIR+0x54>
     246:	83 30       	cpi	r24, 0x03	; 3
     248:	09 f0       	breq	.+2      	; 0x24c <DIO_SetPINDIR+0x1e>
     24a:	75 c0       	rjmp	.+234    	; 0x336 <DIO_SetPINDIR+0x108>
     24c:	27 c0       	rjmp	.+78     	; 0x29c <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
     24e:	2a b3       	in	r18, 0x1a	; 26
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	ac 01       	movw	r20, r24
     256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPINDIR+0x2e>
     258:	44 0f       	add	r20, r20
     25a:	55 1f       	adc	r21, r21
     25c:	6a 95       	dec	r22
     25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPINDIR+0x2a>
     260:	ba 01       	movw	r22, r20
     262:	62 2b       	or	r22, r18
     264:	6a bb       	out	0x1a, r22	; 26
			break;
     266:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
     268:	27 b3       	in	r18, 0x17	; 23
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_SetPINDIR+0x48>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_SetPINDIR+0x44>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	67 bb       	out	0x17, r22	; 23
			break;
     280:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
     282:	24 b3       	in	r18, 0x14	; 20
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPINDIR+0x62>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPINDIR+0x5e>
     294:	ba 01       	movw	r22, r20
     296:	62 2b       	or	r22, r18
     298:	64 bb       	out	0x14, r22	; 20
			break;
     29a:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
     29c:	21 b3       	in	r18, 0x11	; 17
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	ac 01       	movw	r20, r24
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPINDIR+0x7c>
     2a6:	44 0f       	add	r20, r20
     2a8:	55 1f       	adc	r21, r21
     2aa:	6a 95       	dec	r22
     2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPINDIR+0x78>
     2ae:	ba 01       	movw	r22, r20
     2b0:	62 2b       	or	r22, r18
     2b2:	61 bb       	out	0x11, r22	; 17
			break;
     2b4:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
     2b6:	81 30       	cpi	r24, 0x01	; 1
     2b8:	a9 f0       	breq	.+42     	; 0x2e4 <DIO_SetPINDIR+0xb6>
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	28 f0       	brcs	.+10     	; 0x2c8 <DIO_SetPINDIR+0x9a>
     2be:	82 30       	cpi	r24, 0x02	; 2
     2c0:	f9 f0       	breq	.+62     	; 0x300 <DIO_SetPINDIR+0xd2>
     2c2:	83 30       	cpi	r24, 0x03	; 3
     2c4:	c1 f5       	brne	.+112    	; 0x336 <DIO_SetPINDIR+0x108>
     2c6:	2a c0       	rjmp	.+84     	; 0x31c <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
     2c8:	2a b3       	in	r18, 0x1a	; 26
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	ac 01       	movw	r20, r24
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_SetPINDIR+0xa8>
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	6a 95       	dec	r22
     2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_SetPINDIR+0xa4>
     2da:	ba 01       	movw	r22, r20
     2dc:	60 95       	com	r22
     2de:	62 23       	and	r22, r18
     2e0:	6a bb       	out	0x1a, r22	; 26
			break;
     2e2:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
     2e4:	27 b3       	in	r18, 0x17	; 23
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	ac 01       	movw	r20, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_SetPINDIR+0xc4>
     2ee:	44 0f       	add	r20, r20
     2f0:	55 1f       	adc	r21, r21
     2f2:	6a 95       	dec	r22
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_SetPINDIR+0xc0>
     2f6:	ba 01       	movw	r22, r20
     2f8:	60 95       	com	r22
     2fa:	62 23       	and	r22, r18
     2fc:	67 bb       	out	0x17, r22	; 23
			break;
     2fe:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
     300:	24 b3       	in	r18, 0x14	; 20
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	ac 01       	movw	r20, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_SetPINDIR+0xe0>
     30a:	44 0f       	add	r20, r20
     30c:	55 1f       	adc	r21, r21
     30e:	6a 95       	dec	r22
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_SetPINDIR+0xdc>
     312:	ba 01       	movw	r22, r20
     314:	60 95       	com	r22
     316:	62 23       	and	r22, r18
     318:	64 bb       	out	0x14, r22	; 20
			break;
     31a:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
     31c:	21 b3       	in	r18, 0x11	; 17
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	ac 01       	movw	r20, r24
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_SetPINDIR+0xfc>
     326:	44 0f       	add	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	6a 95       	dec	r22
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_SetPINDIR+0xf8>
     32e:	ba 01       	movw	r22, r20
     330:	60 95       	com	r22
     332:	62 23       	and	r22, r18
     334:	61 bb       	out	0x11, r22	; 17
     336:	08 95       	ret

00000338 <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	49 f0       	breq	.+18     	; 0x34e <DIO_WritePort+0x16>
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	28 f0       	brcs	.+10     	; 0x34a <DIO_WritePort+0x12>
     340:	82 30       	cpi	r24, 0x02	; 2
     342:	39 f0       	breq	.+14     	; 0x352 <DIO_WritePort+0x1a>
     344:	83 30       	cpi	r24, 0x03	; 3
     346:	41 f4       	brne	.+16     	; 0x358 <DIO_WritePort+0x20>
     348:	06 c0       	rjmp	.+12     	; 0x356 <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
     34a:	6b bb       	out	0x1b, r22	; 27
	break;
     34c:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
     34e:	68 bb       	out	0x18, r22	; 24
	break;
     350:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
     352:	65 bb       	out	0x15, r22	; 21
	break;
     354:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
     356:	62 bb       	out	0x12, r22	; 18
     358:	08 95       	ret

0000035a <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
     35a:	44 23       	and	r20, r20
     35c:	09 f4       	brne	.+2      	; 0x360 <DIO_WritePIN+0x6>
     35e:	41 c0       	rjmp	.+130    	; 0x3e2 <DIO_WritePIN+0x88>
     360:	41 30       	cpi	r20, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <DIO_WritePIN+0xc>
     364:	7e c0       	rjmp	.+252    	; 0x462 <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	a9 f0       	breq	.+42     	; 0x394 <DIO_WritePIN+0x3a>
     36a:	81 30       	cpi	r24, 0x01	; 1
     36c:	30 f0       	brcs	.+12     	; 0x37a <DIO_WritePIN+0x20>
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	f1 f0       	breq	.+60     	; 0x3ae <DIO_WritePIN+0x54>
     372:	83 30       	cpi	r24, 0x03	; 3
     374:	09 f0       	breq	.+2      	; 0x378 <DIO_WritePIN+0x1e>
     376:	75 c0       	rjmp	.+234    	; 0x462 <DIO_WritePIN+0x108>
     378:	27 c0       	rjmp	.+78     	; 0x3c8 <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
     37a:	2b b3       	in	r18, 0x1b	; 27
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	ac 01       	movw	r20, r24
     382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_WritePIN+0x2e>
     384:	44 0f       	add	r20, r20
     386:	55 1f       	adc	r21, r21
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_WritePIN+0x2a>
     38c:	ba 01       	movw	r22, r20
     38e:	62 2b       	or	r22, r18
     390:	6b bb       	out	0x1b, r22	; 27
			break;
     392:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
     394:	28 b3       	in	r18, 0x18	; 24
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	ac 01       	movw	r20, r24
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_WritePIN+0x48>
     39e:	44 0f       	add	r20, r20
     3a0:	55 1f       	adc	r21, r21
     3a2:	6a 95       	dec	r22
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_WritePIN+0x44>
     3a6:	ba 01       	movw	r22, r20
     3a8:	62 2b       	or	r22, r18
     3aa:	68 bb       	out	0x18, r22	; 24
			break;
     3ac:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
     3ae:	25 b3       	in	r18, 0x15	; 21
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	ac 01       	movw	r20, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_WritePIN+0x62>
     3b8:	44 0f       	add	r20, r20
     3ba:	55 1f       	adc	r21, r21
     3bc:	6a 95       	dec	r22
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_WritePIN+0x5e>
     3c0:	ba 01       	movw	r22, r20
     3c2:	62 2b       	or	r22, r18
     3c4:	65 bb       	out	0x15, r22	; 21
			break;
     3c6:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
     3c8:	22 b3       	in	r18, 0x12	; 18
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	ac 01       	movw	r20, r24
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_WritePIN+0x7c>
     3d2:	44 0f       	add	r20, r20
     3d4:	55 1f       	adc	r21, r21
     3d6:	6a 95       	dec	r22
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_WritePIN+0x78>
     3da:	ba 01       	movw	r22, r20
     3dc:	62 2b       	or	r22, r18
     3de:	62 bb       	out	0x12, r22	; 18
			break;
     3e0:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
     3e2:	81 30       	cpi	r24, 0x01	; 1
     3e4:	a9 f0       	breq	.+42     	; 0x410 <DIO_WritePIN+0xb6>
     3e6:	81 30       	cpi	r24, 0x01	; 1
     3e8:	28 f0       	brcs	.+10     	; 0x3f4 <DIO_WritePIN+0x9a>
     3ea:	82 30       	cpi	r24, 0x02	; 2
     3ec:	f9 f0       	breq	.+62     	; 0x42c <DIO_WritePIN+0xd2>
     3ee:	83 30       	cpi	r24, 0x03	; 3
     3f0:	c1 f5       	brne	.+112    	; 0x462 <DIO_WritePIN+0x108>
     3f2:	2a c0       	rjmp	.+84     	; 0x448 <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
     3f4:	2b b3       	in	r18, 0x1b	; 27
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	ac 01       	movw	r20, r24
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_WritePIN+0xa8>
     3fe:	44 0f       	add	r20, r20
     400:	55 1f       	adc	r21, r21
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_WritePIN+0xa4>
     406:	ba 01       	movw	r22, r20
     408:	60 95       	com	r22
     40a:	62 23       	and	r22, r18
     40c:	6b bb       	out	0x1b, r22	; 27
		break;
     40e:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
     410:	28 b3       	in	r18, 0x18	; 24
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	ac 01       	movw	r20, r24
     418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_WritePIN+0xc4>
     41a:	44 0f       	add	r20, r20
     41c:	55 1f       	adc	r21, r21
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_WritePIN+0xc0>
     422:	ba 01       	movw	r22, r20
     424:	60 95       	com	r22
     426:	62 23       	and	r22, r18
     428:	68 bb       	out	0x18, r22	; 24
		break;
     42a:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
     42c:	25 b3       	in	r18, 0x15	; 21
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	ac 01       	movw	r20, r24
     434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_WritePIN+0xe0>
     436:	44 0f       	add	r20, r20
     438:	55 1f       	adc	r21, r21
     43a:	6a 95       	dec	r22
     43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_WritePIN+0xdc>
     43e:	ba 01       	movw	r22, r20
     440:	60 95       	com	r22
     442:	62 23       	and	r22, r18
     444:	65 bb       	out	0x15, r22	; 21
		break;
     446:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
     448:	22 b3       	in	r18, 0x12	; 18
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	ac 01       	movw	r20, r24
     450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_WritePIN+0xfc>
     452:	44 0f       	add	r20, r20
     454:	55 1f       	adc	r21, r21
     456:	6a 95       	dec	r22
     458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_WritePIN+0xf8>
     45a:	ba 01       	movw	r22, r20
     45c:	60 95       	com	r22
     45e:	62 23       	and	r22, r18
     460:	62 bb       	out	0x12, r22	; 18
     462:	08 95       	ret

00000464 <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
     464:	81 30       	cpi	r24, 0x01	; 1
     466:	59 f0       	breq	.+22     	; 0x47e <DIO_ReadPort+0x1a>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	28 f0       	brcs	.+10     	; 0x476 <DIO_ReadPort+0x12>
     46c:	82 30       	cpi	r24, 0x02	; 2
     46e:	59 f0       	breq	.+22     	; 0x486 <DIO_ReadPort+0x22>
     470:	83 30       	cpi	r24, 0x03	; 3
     472:	81 f4       	brne	.+32     	; 0x494 <DIO_ReadPort+0x30>
     474:	0c c0       	rjmp	.+24     	; 0x48e <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
     476:	89 b3       	in	r24, 0x19	; 25
     478:	fb 01       	movw	r30, r22
     47a:	80 83       	st	Z, r24
		break;
     47c:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
     47e:	86 b3       	in	r24, 0x16	; 22
     480:	fb 01       	movw	r30, r22
     482:	80 83       	st	Z, r24
		break;
     484:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
     486:	83 b3       	in	r24, 0x13	; 19
     488:	fb 01       	movw	r30, r22
     48a:	80 83       	st	Z, r24
		break;
     48c:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
     48e:	80 b3       	in	r24, 0x10	; 16
     490:	fb 01       	movw	r30, r22
     492:	80 83       	st	Z, r24
     494:	08 95       	ret

00000496 <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
     496:	81 30       	cpi	r24, 0x01	; 1
     498:	a1 f0       	breq	.+40     	; 0x4c2 <DIO_ReadPin+0x2c>
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	28 f0       	brcs	.+10     	; 0x4a8 <DIO_ReadPin+0x12>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	e9 f0       	breq	.+58     	; 0x4dc <DIO_ReadPin+0x46>
     4a2:	83 30       	cpi	r24, 0x03	; 3
     4a4:	a1 f5       	brne	.+104    	; 0x50e <DIO_ReadPin+0x78>
     4a6:	27 c0       	rjmp	.+78     	; 0x4f6 <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
     4a8:	89 b3       	in	r24, 0x19	; 25
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	9c 01       	movw	r18, r24
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_ReadPin+0x1e>
     4b0:	35 95       	asr	r19
     4b2:	27 95       	ror	r18
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_ReadPin+0x1a>
     4b8:	b9 01       	movw	r22, r18
     4ba:	61 70       	andi	r22, 0x01	; 1
     4bc:	fa 01       	movw	r30, r20
     4be:	60 83       	st	Z, r22
		break;
     4c0:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
     4c2:	86 b3       	in	r24, 0x16	; 22
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9c 01       	movw	r18, r24
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_ReadPin+0x38>
     4ca:	35 95       	asr	r19
     4cc:	27 95       	ror	r18
     4ce:	6a 95       	dec	r22
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_ReadPin+0x34>
     4d2:	b9 01       	movw	r22, r18
     4d4:	61 70       	andi	r22, 0x01	; 1
     4d6:	fa 01       	movw	r30, r20
     4d8:	60 83       	st	Z, r22
		break;
     4da:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
     4dc:	83 b3       	in	r24, 0x13	; 19
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	9c 01       	movw	r18, r24
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_ReadPin+0x52>
     4e4:	35 95       	asr	r19
     4e6:	27 95       	ror	r18
     4e8:	6a 95       	dec	r22
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_ReadPin+0x4e>
     4ec:	b9 01       	movw	r22, r18
     4ee:	61 70       	andi	r22, 0x01	; 1
     4f0:	fa 01       	movw	r30, r20
     4f2:	60 83       	st	Z, r22
		break;
     4f4:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
     4f6:	80 b3       	in	r24, 0x10	; 16
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	9c 01       	movw	r18, r24
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_ReadPin+0x6c>
     4fe:	35 95       	asr	r19
     500:	27 95       	ror	r18
     502:	6a 95       	dec	r22
     504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_ReadPin+0x68>
     506:	b9 01       	movw	r22, r18
     508:	61 70       	andi	r22, 0x01	; 1
     50a:	fa 01       	movw	r30, r20
     50c:	60 83       	st	Z, r22
     50e:	08 95       	ret

00000510 <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	a1 f0       	breq	.+40     	; 0x53c <DIO_togglePin+0x2c>
     514:	81 30       	cpi	r24, 0x01	; 1
     516:	28 f0       	brcs	.+10     	; 0x522 <DIO_togglePin+0x12>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	e9 f0       	breq	.+58     	; 0x556 <DIO_togglePin+0x46>
     51c:	83 30       	cpi	r24, 0x03	; 3
     51e:	a1 f5       	brne	.+104    	; 0x588 <DIO_togglePin+0x78>
     520:	27 c0       	rjmp	.+78     	; 0x570 <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
     522:	2b b3       	in	r18, 0x1b	; 27
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	ac 01       	movw	r20, r24
     52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_togglePin+0x20>
     52c:	44 0f       	add	r20, r20
     52e:	55 1f       	adc	r21, r21
     530:	6a 95       	dec	r22
     532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_togglePin+0x1c>
     534:	ba 01       	movw	r22, r20
     536:	62 27       	eor	r22, r18
     538:	6b bb       	out	0x1b, r22	; 27
		break;
     53a:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
     53c:	28 b3       	in	r18, 0x18	; 24
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	ac 01       	movw	r20, r24
     544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_togglePin+0x3a>
     546:	44 0f       	add	r20, r20
     548:	55 1f       	adc	r21, r21
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_togglePin+0x36>
     54e:	ba 01       	movw	r22, r20
     550:	62 27       	eor	r22, r18
     552:	68 bb       	out	0x18, r22	; 24
		break;
     554:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
     556:	25 b3       	in	r18, 0x15	; 21
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	ac 01       	movw	r20, r24
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_togglePin+0x54>
     560:	44 0f       	add	r20, r20
     562:	55 1f       	adc	r21, r21
     564:	6a 95       	dec	r22
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_togglePin+0x50>
     568:	ba 01       	movw	r22, r20
     56a:	62 27       	eor	r22, r18
     56c:	65 bb       	out	0x15, r22	; 21
		break;
     56e:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
     570:	22 b3       	in	r18, 0x12	; 18
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	ac 01       	movw	r20, r24
     578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_togglePin+0x6e>
     57a:	44 0f       	add	r20, r20
     57c:	55 1f       	adc	r21, r21
     57e:	6a 95       	dec	r22
     580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_togglePin+0x6a>
     582:	ba 01       	movw	r22, r20
     584:	62 27       	eor	r22, r18
     586:	62 bb       	out	0x12, r22	; 18
     588:	08 95       	ret

0000058a <EEPROM_Init>:

#include "EEPROM.h"

void EEPROM_Init(void)
{
	i2c_voidInit(I2C_Prescaler_1) ;
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	0e 94 41 03 	call	0x682	; 0x682 <i2c_voidInit>
}
     590:	08 95       	ret

00000592 <EEPROM_Write>:

void EEPROM_Write (uint8 data, uint8 address)
{
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	c8 2f       	mov	r28, r24
     598:	d6 2f       	mov	r29, r22
	i2c_voidStart( ) ;
     59a:	0e 94 57 03 	call	0x6ae	; 0x6ae <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA0 ) ;				//Write Mode
     59e:	80 ea       	ldi	r24, 0xA0	; 160
     5a0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	i2c_voidSend_Data( address ) ;
     5a4:	8d 2f       	mov	r24, r29
     5a6:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	i2c_voidSend_Data( data ) ;
     5aa:	8c 2f       	mov	r24, r28
     5ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	
	i2c_voidStop( ) ;
     5b0:	0e 94 64 03 	call	0x6c8	; 0x6c8 <i2c_voidStop>
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <EEPROM_Read>:


uint8 EEPROM_Read (uint8 address)
{
     5ba:	cf 93       	push	r28
     5bc:	c8 2f       	mov	r28, r24
	uint8 res = 0 ;
	
	i2c_voidStart( ) ;
     5be:	0e 94 57 03 	call	0x6ae	; 0x6ae <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA0 ) ;				//Write Mode
     5c2:	80 ea       	ldi	r24, 0xA0	; 160
     5c4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	i2c_voidSend_Data( address ) ;
     5c8:	8c 2f       	mov	r24, r28
     5ca:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	
	i2c_voidStart( ) ;
     5ce:	0e 94 57 03 	call	0x6ae	; 0x6ae <i2c_voidStart>
	
	i2c_voidSend_Data( 0xA1 ) ;				//Read Mode
     5d2:	81 ea       	ldi	r24, 0xA1	; 161
     5d4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <i2c_voidSend_Data>
	
	res = i2c_u8Read_NACK() ;
     5d8:	0e 94 87 03 	call	0x70e	; 0x70e <i2c_u8Read_NACK>
     5dc:	c8 2f       	mov	r28, r24
	
	i2c_voidStop( ) ;
     5de:	0e 94 64 03 	call	0x6c8	; 0x6c8 <i2c_voidStop>

	return res ;
     5e2:	8c 2f       	mov	r24, r28
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <Set_GlobalInterrupts>:
#include "External_INT.h"

void Set_GlobalInterrupts(void)
{
	#if GLOBAL_INTERRUPT==GLOBAL_INTERRUPT_ENABLE
	Set_bit(SREG,7);
     5e8:	8f b7       	in	r24, 0x3f	; 63
     5ea:	80 68       	ori	r24, 0x80	; 128
     5ec:	8f bf       	out	0x3f, r24	; 63
	#elif GLOBAL_INTERRUPT==GLOBAL_INTERRUPT_DISABLE
	Clr_bit(SREG,7);
	#endif
}
     5ee:	08 95       	ret

000005f0 <ExternalINT0_INIT>:
void ExternalINT0_INIT(void)
{
	Set_GlobalInterrupts();
     5f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT0);
     5f4:	8b b7       	in	r24, 0x3b	; 59
     5f6:	80 64       	ori	r24, 0x40	; 64
     5f8:	8b bf       	out	0x3b, r24	; 59
	Clr_bit(MCUCR,0);
	Set_bit(MCUCR,1);
	
	#elif EXTERNAL_INT0_TRIGGER ==INT0_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCR,0);
     5fa:	85 b7       	in	r24, 0x35	; 53
     5fc:	81 60       	ori	r24, 0x01	; 1
     5fe:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,1);
     600:	85 b7       	in	r24, 0x35	; 53
     602:	82 60       	ori	r24, 0x02	; 2
     604:	85 bf       	out	0x35, r24	; 53
	
	#endif
	
}
     606:	08 95       	ret

00000608 <ExternalINT1_INIT>:
void ExternalINT1_INIT(void)
{
	Set_GlobalInterrupts();
     608:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT1);
     60c:	8b b7       	in	r24, 0x3b	; 59
     60e:	80 68       	ori	r24, 0x80	; 128
     610:	8b bf       	out	0x3b, r24	; 59
	Clr_bit(MCUCR,2);
	Set_bit(MCUCR,3);
	
	#elif EXTERNAL_INT1_TRIGGER ==INT1_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCR,2);
     612:	85 b7       	in	r24, 0x35	; 53
     614:	84 60       	ori	r24, 0x04	; 4
     616:	85 bf       	out	0x35, r24	; 53
	Set_bit(MCUCR,3);
     618:	85 b7       	in	r24, 0x35	; 53
     61a:	88 60       	ori	r24, 0x08	; 8
     61c:	85 bf       	out	0x35, r24	; 53
	
	#endif
}
     61e:	08 95       	ret

00000620 <ExternalINT2_INIT>:
void ExternalINT2_INIT(void)
{
	Set_GlobalInterrupts();
     620:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <Set_GlobalInterrupts>
	Set_bit(GICR,EXTERNAL_INT1);
     624:	8b b7       	in	r24, 0x3b	; 59
     626:	80 68       	ori	r24, 0x80	; 128
     628:	8b bf       	out	0x3b, r24	; 59
	Clr_bit(MCUCSR,6);
	
	
	#elif EXTERNAL_INT2_TRIGGER ==INT2_TRIGGER_RISING_EDGE
	
	Set_bit(MCUCSR,6);
     62a:	84 b7       	in	r24, 0x34	; 52
     62c:	80 64       	ori	r24, 0x40	; 64
     62e:	84 bf       	out	0x34, r24	; 52
	
	#endif
}
     630:	08 95       	ret

00000632 <heating_Init>:

#include "heating_element.h"

void heating_Init(void)
{
	DIO_SetPINDIR(DIO_PORTC , DIO_PIN7 , DIO_PIN_OUTPUT) ;
     632:	82 e0       	ldi	r24, 0x02	; 2
     634:	67 e0       	ldi	r22, 0x07	; 7
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
}
     63c:	08 95       	ret

0000063e <heating_set_state>:

void heating_set_state(uint8 state)
{
	switch (state)
     63e:	88 23       	and	r24, r24
     640:	41 f0       	breq	.+16     	; 0x652 <heating_set_state+0x14>
     642:	81 30       	cpi	r24, 0x01	; 1
     644:	59 f4       	brne	.+22     	; 0x65c <heating_set_state+0x1e>
	{
		case heat_ON :
		DIO_WritePIN(DIO_PORTC , DIO_PIN7 ,DIO_PIN_HIGH) ;
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	67 e0       	ldi	r22, 0x07	; 7
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
		break;
     650:	08 95       	ret
		
		case heat_OFF :
		DIO_WritePIN(DIO_PORTC , DIO_PIN7 , DIO_PIN_LOW) ;
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	67 e0       	ldi	r22, 0x07	; 7
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     65c:	08 95       	ret

0000065e <heating_get_state>:
		break;
	}
}

uint8 heating_get_state (void)
{
     65e:	cf 93       	push	r28
     660:	df 93       	push	r29
     662:	0f 92       	push	r0
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
	 uint8 st =0;
     668:	19 82       	std	Y+1, r1	; 0x01
	 DIO_ReadPin(DIO_PORTC , DIO_PIN7,&st) ;
     66a:	82 e0       	ldi	r24, 0x02	; 2
     66c:	67 e0       	ldi	r22, 0x07	; 7
     66e:	ae 01       	movw	r20, r28
     670:	4f 5f       	subi	r20, 0xFF	; 255
     672:	5f 4f       	sbci	r21, 0xFF	; 255
     674:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_ReadPin>
	
	return st ;
     678:	89 81       	ldd	r24, Y+1	; 0x01
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <i2c_voidInit>:

/* Initialize I2C */
void i2c_voidInit(I2C_PRESCALER pre)
{
	//Enable I2C
	Set_bit(TWCR , TWEN) ;			
     682:	96 b7       	in	r25, 0x36	; 54
     684:	94 60       	ori	r25, 0x04	; 4
     686:	96 bf       	out	0x36, r25	; 54
	
	//Bit Rate
	TWBR = 72 ;		
     688:	98 e4       	ldi	r25, 0x48	; 72
     68a:	90 b9       	out	0x00, r25	; 0
				
	TWSR=0x00; ;	
     68c:	11 b8       	out	0x01, r1	; 1
	
	switch ( pre )
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	31 f0       	breq	.+12     	; 0x69e <i2c_voidInit+0x1c>
     692:	83 30       	cpi	r24, 0x03	; 3
     694:	31 f0       	breq	.+12     	; 0x6a2 <i2c_voidInit+0x20>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	31 f4       	brne	.+12     	; 0x6a6 <i2c_voidInit+0x24>
	{
		case I2C_Prescaler_1 :
			break;
		case I2C_Prescaler_4 :
			Set_bit(TWSR , TWPS0) ;
     69a:	08 9a       	sbi	0x01, 0	; 1
			break;
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <i2c_voidInit+0x24>
		case I2C_Prescaler_16 :
			Set_bit(TWSR , TWPS1) ;
     69e:	09 9a       	sbi	0x01, 1	; 1
			break;
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <i2c_voidInit+0x24>
		case I2C_Prescaler_64 :
			Set_bit(TWSR , TWPS0) ;
     6a2:	08 9a       	sbi	0x01, 0	; 1
			Set_bit(TWSR , TWPS1) ;
     6a4:	09 9a       	sbi	0x01, 1	; 1
		default:
			break;
	}
	
	//Enable Ack
	Set_bit(TWCR , TWEA) ;
     6a6:	86 b7       	in	r24, 0x36	; 54
     6a8:	80 64       	ori	r24, 0x40	; 64
     6aa:	86 bf       	out	0x36, r24	; 54
	
}
     6ac:	08 95       	ret

000006ae <i2c_voidStart>:

/* Send Start condition */
void i2c_voidStart(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     6ae:	86 b7       	in	r24, 0x36	; 54
     6b0:	80 68       	ori	r24, 0x80	; 128
     6b2:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWSTA) ;				//Send start
     6b4:	86 b7       	in	r24, 0x36	; 54
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     6ba:	86 b7       	in	r24, 0x36	; 54
     6bc:	84 60       	ori	r24, 0x04	; 4
     6be:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1 << TWINT)))
     6c0:	06 b6       	in	r0, 0x36	; 54
     6c2:	07 fe       	sbrs	r0, 7
     6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <i2c_voidStart+0x12>
	;
}
     6c6:	08 95       	ret

000006c8 <i2c_voidStop>:

/* Send Stop condition */
void i2c_voidStop(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     6c8:	86 b7       	in	r24, 0x36	; 54
     6ca:	80 68       	ori	r24, 0x80	; 128
     6cc:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWSTO) ;				//Send stop
     6ce:	86 b7       	in	r24, 0x36	; 54
     6d0:	80 61       	ori	r24, 0x10	; 16
     6d2:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     6d4:	86 b7       	in	r24, 0x36	; 54
     6d6:	84 60       	ori	r24, 0x04	; 4
     6d8:	86 bf       	out	0x36, r24	; 54
	
	//while( !(TWC_R & (1<<TWINT) ) ){};		//Wait for TWINT Flag set
}
     6da:	08 95       	ret

000006dc <i2c_voidSend_Data>:

/* Send data */
void i2c_voidSend_Data(uint8 data)
{
	TWDR = data ;
     6dc:	83 b9       	out	0x03, r24	; 3
	
	Set_bit(TWCR , TWINT) ;				//Clear flag
     6de:	86 b7       	in	r24, 0x36	; 54
     6e0:	80 68       	ori	r24, 0x80	; 128
     6e2:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     6e4:	86 b7       	in	r24, 0x36	; 54
     6e6:	84 60       	ori	r24, 0x04	; 4
     6e8:	86 bf       	out	0x36, r24	; 54
		
	while (!(TWCR & (1 << TWINT)))
     6ea:	06 b6       	in	r0, 0x36	; 54
     6ec:	07 fe       	sbrs	r0, 7
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <i2c_voidSend_Data+0xe>
	;
}
     6f0:	08 95       	ret

000006f2 <i2c_u8Read_Ack>:

/* Check Acknowledge Bit */
uint8 i2c_u8Read_Ack(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     6f2:	86 b7       	in	r24, 0x36	; 54
     6f4:	80 68       	ori	r24, 0x80	; 128
     6f6:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     6f8:	86 b7       	in	r24, 0x36	; 54
     6fa:	84 60       	ori	r24, 0x04	; 4
     6fc:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEA)  ;				//Enable Ack
     6fe:	86 b7       	in	r24, 0x36	; 54
     700:	80 64       	ori	r24, 0x40	; 64
     702:	86 bf       	out	0x36, r24	; 54
		
	while (!(TWCR & (1 << TWINT)))
     704:	06 b6       	in	r0, 0x36	; 54
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <i2c_u8Read_Ack+0x12>
	;
		
	return TWDR ;
     70a:	83 b1       	in	r24, 0x03	; 3
}
     70c:	08 95       	ret

0000070e <i2c_u8Read_NACK>:

/* Read NACK */
uint8 i2c_u8Read_NACK(void)
{
	Set_bit(TWCR , TWINT) ;				//Clear flag
     70e:	86 b7       	in	r24, 0x36	; 54
     710:	80 68       	ori	r24, 0x80	; 128
     712:	86 bf       	out	0x36, r24	; 54
	Set_bit(TWCR , TWEN)  ;				//Enable I2C
     714:	86 b7       	in	r24, 0x36	; 54
     716:	84 60       	ori	r24, 0x04	; 4
     718:	86 bf       	out	0x36, r24	; 54
	
	while (!(TWCR & (1 << TWINT)))
     71a:	06 b6       	in	r0, 0x36	; 54
     71c:	07 fe       	sbrs	r0, 7
     71e:	fd cf       	rjmp	.-6      	; 0x71a <i2c_u8Read_NACK+0xc>
	;
	
	return TWDR ;
     720:	83 b1       	in	r24, 0x03	; 3
}
     722:	08 95       	ret

00000724 <i2c_u8get_Status>:

/* Get status */
uint8 i2c_u8get_Status(void)
{
	uint8 status;
	status = TWSR & 0xF8;
     724:	81 b1       	in	r24, 0x01	; 1
	return status;
     726:	88 7f       	andi	r24, 0xF8	; 248
     728:	08 95       	ret

0000072a <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(0x02);	
	
	#endif
}
void LCD_WRITE_COMMAND(uint8 cmd)
{
     72a:	cf 93       	push	r28
     72c:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_LOW) ;
     72e:	81 e0       	ldi	r24, 0x01	; 1
     730:	61 e0       	ldi	r22, 0x01	; 1
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	63 e0       	ldi	r22, 0x03	; 3
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
     74c:	8b b3       	in	r24, 0x1b	; 27
     74e:	9c 2f       	mov	r25, r28
     750:	90 7f       	andi	r25, 0xF0	; 240
     752:	8f 70       	andi	r24, 0x0F	; 15
     754:	89 2b       	or	r24, r25
     756:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	63 e0       	ldi	r22, 0x03	; 3
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     762:	8f e9       	ldi	r24, 0x9F	; 159
     764:	9f e0       	ldi	r25, 0x0F	; 15
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	f1 f7       	brne	.-4      	; 0x766 <LCD_WRITE_COMMAND+0x3c>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <LCD_WRITE_COMMAND+0x42>
     76c:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	63 e0       	ldi	r22, 0x03	; 3
     772:	40 e0       	ldi	r20, 0x00	; 0
     774:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	
	PORTA = (cmd <<4) | (PORTA & 0x0F);
     778:	8b b3       	in	r24, 0x1b	; 27
     77a:	c2 95       	swap	r28
     77c:	c0 7f       	andi	r28, 0xF0	; 240
     77e:	8f 70       	andi	r24, 0x0F	; 15
     780:	c8 2b       	or	r28, r24
     782:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	63 e0       	ldi	r22, 0x03	; 3
     788:	41 e0       	ldi	r20, 0x01	; 1
     78a:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     78e:	8f e9       	ldi	r24, 0x9F	; 159
     790:	9f e0       	ldi	r25, 0x0F	; 15
     792:	01 97       	sbiw	r24, 0x01	; 1
     794:	f1 f7       	brne	.-4      	; 0x792 <LCD_WRITE_COMMAND+0x68>
     796:	00 c0       	rjmp	.+0      	; 0x798 <LCD_WRITE_COMMAND+0x6e>
     798:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	63 e0       	ldi	r22, 0x03	; 3
     79e:	40 e0       	ldi	r20, 0x00	; 0
     7a0:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     7a4:	8f e1       	ldi	r24, 0x1F	; 31
     7a6:	9e e4       	ldi	r25, 0x4E	; 78
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <LCD_WRITE_COMMAND+0x7e>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <LCD_WRITE_COMMAND+0x84>
     7ae:	00 00       	nop
	
	_delay_ms(5);
	
	#endif 
	
}
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <LCD_INIT>:
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_OUTPUT) ;
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	41 e0       	ldi	r20, 0x01	; 1
     7ba:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_OUTPUT) ;
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_OUTPUT) ;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	63 e0       	ldi	r22, 0x03	; 3
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	
	
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D4,DIO_PIN_OUTPUT);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	64 e0       	ldi	r22, 0x04	; 4
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D5,DIO_PIN_OUTPUT);
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	65 e0       	ldi	r22, 0x05	; 5
     7e0:	41 e0       	ldi	r20, 0x01	; 1
     7e2:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D6,DIO_PIN_OUTPUT);
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	66 e0       	ldi	r22, 0x06	; 6
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D7,DIO_PIN_OUTPUT);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	67 e0       	ldi	r22, 0x07	; 7
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	91 ee       	ldi	r25, 0xE1	; 225
     7fe:	a4 e0       	ldi	r26, 0x04	; 4
     800:	81 50       	subi	r24, 0x01	; 1
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	a0 40       	sbci	r26, 0x00	; 0
     806:	e1 f7       	brne	.-8      	; 0x800 <LCD_INIT+0x4c>
     808:	00 c0       	rjmp	.+0      	; 0x80a <LCD_INIT+0x56>
     80a:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WRITE_COMMAND(0x33);
     80c:	83 e3       	ldi	r24, 0x33	; 51
     80e:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x32);
     812:	82 e3       	ldi	r24, 0x32	; 50
     814:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
     818:	88 e2       	ldi	r24, 0x28	; 40
     81a:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0E);
     81e:	8e e0       	ldi	r24, 0x0E	; 14
     820:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);	
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
	
	#endif
}
     830:	08 95       	ret

00000832 <LCD_WRITE_CHARACHTER>:
	
	#endif 
	
}
void LCD_WRITE_CHARACHTER(uint8 chr)
{
     832:	cf 93       	push	r28
     834:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_HIGH) ;
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	62 e0       	ldi	r22, 0x02	; 2
     844:	40 e0       	ldi	r20, 0x00	; 0
     846:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	63 e0       	ldi	r22, 0x03	; 3
     84e:	40 e0       	ldi	r20, 0x00	; 0
     850:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	
	PORTA = (chr & 0xF0);
     854:	8c 2f       	mov	r24, r28
     856:	80 7f       	andi	r24, 0xF0	; 240
     858:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	63 e0       	ldi	r22, 0x03	; 3
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     864:	8f e9       	ldi	r24, 0x9F	; 159
     866:	9f e0       	ldi	r25, 0x0F	; 15
     868:	01 97       	sbiw	r24, 0x01	; 1
     86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	63 e0       	ldi	r22, 0x03	; 3
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
	
	PORTA = (chr <<4);
     87a:	c2 95       	swap	r28
     87c:	c0 7f       	andi	r28, 0xF0	; 240
     87e:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	63 e0       	ldi	r22, 0x03	; 3
     884:	41 e0       	ldi	r20, 0x01	; 1
     886:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     88a:	8f e9       	ldi	r24, 0x9F	; 159
     88c:	9f e0       	ldi	r25, 0x0F	; 15
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <__stack+0x2f>
     892:	00 c0       	rjmp	.+0      	; 0x894 <__stack+0x35>
     894:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	63 e0       	ldi	r22, 0x03	; 3
     89a:	40 e0       	ldi	r20, 0x00	; 0
     89c:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
     8a0:	8f e1       	ldi	r24, 0x1F	; 31
     8a2:	9e e4       	ldi	r25, 0x4E	; 78
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <__stack+0x45>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <__stack+0x4b>
     8aa:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
}
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <LCD_WriteString>:
void LCD_WriteString(uint8 *str)
{
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != '\0')
     8b8:	fc 01       	movw	r30, r24
     8ba:	80 81       	ld	r24, Z
     8bc:	88 23       	and	r24, r24
     8be:	51 f0       	breq	.+20     	; 0x8d4 <LCD_WriteString+0x24>
	
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
     8c0:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_WRITE_CHARACHTER(str[i]);
     8c2:	0e 94 19 04 	call	0x832	; 0x832 <LCD_WRITE_CHARACHTER>
		i++;
     8c6:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
	while(str[i] != '\0')
     8c8:	f8 01       	movw	r30, r16
     8ca:	ec 0f       	add	r30, r28
     8cc:	f1 1d       	adc	r31, r1
     8ce:	80 81       	ld	r24, Z
     8d0:	88 23       	and	r24, r24
     8d2:	b9 f7       	brne	.-18     	; 0x8c2 <LCD_WriteString+0x12>
	{
		LCD_WRITE_CHARACHTER(str[i]);
		i++;
	}
}
     8d4:	cf 91       	pop	r28
     8d6:	1f 91       	pop	r17
     8d8:	0f 91       	pop	r16
     8da:	08 95       	ret

000008dc <LCD_CLEAR>:
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(0x01);
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
}
     8e2:	08 95       	ret

000008e4 <LCD_MoveTo>:
void LCD_MoveTo(uint8 row , uint8 col)
{
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <LCD_MoveTo+0x6>
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
          uint8 pos[2] = {0x80 , 0xC0};
     8ee:	90 e8       	ldi	r25, 0x80	; 128
     8f0:	99 83       	std	Y+1, r25	; 0x01
     8f2:	90 ec       	ldi	r25, 0xC0	; 192
     8f4:	9a 83       	std	Y+2, r25	; 0x02

          LCD_WRITE_COMMAND(pos[row]+col);
     8f6:	fe 01       	movw	r30, r28
     8f8:	e8 0f       	add	r30, r24
     8fa:	f1 1d       	adc	r31, r1
     8fc:	81 81       	ldd	r24, Z+1	; 0x01
     8fe:	86 0f       	add	r24, r22
     900:	0e 94 95 03 	call	0x72a	; 0x72a <LCD_WRITE_COMMAND>
}
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 num)
{
     90e:	4f 92       	push	r4
     910:	5f 92       	push	r5
     912:	6f 92       	push	r6
     914:	7f 92       	push	r7
     916:	8f 92       	push	r8
     918:	9f 92       	push	r9
     91a:	af 92       	push	r10
     91c:	bf 92       	push	r11
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	6b 01       	movw	r12, r22
     92c:	7c 01       	movw	r14, r24
	sint32 temp =1;
	if(num < 0)
     92e:	99 23       	and	r25, r25
     930:	5c f4       	brge	.+22     	; 0x948 <LCD_WriteInteger+0x3a>
	{
		LCD_WRITE_CHARACHTER('-');
     932:	8d e2       	ldi	r24, 0x2D	; 45
     934:	0e 94 19 04 	call	0x832	; 0x832 <LCD_WRITE_CHARACHTER>
		num *= -1;
     938:	f0 94       	com	r15
     93a:	e0 94       	com	r14
     93c:	d0 94       	com	r13
     93e:	c0 94       	com	r12
     940:	c1 1c       	adc	r12, r1
     942:	d1 1c       	adc	r13, r1
     944:	e1 1c       	adc	r14, r1
     946:	f1 1c       	adc	r15, r1
	}
	
	while (num != 0)
     948:	c1 14       	cp	r12, r1
     94a:	d1 04       	cpc	r13, r1
     94c:	e1 04       	cpc	r14, r1
     94e:	f1 04       	cpc	r15, r1
     950:	09 f4       	brne	.+2      	; 0x954 <LCD_WriteInteger+0x46>
     952:	4f c0       	rjmp	.+158    	; 0x9f2 <LCD_WriteInteger+0xe4>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e0       	ldi	r26, 0x00	; 0
     95a:	b0 e0       	ldi	r27, 0x00	; 0
	{
		
		temp = (temp *10) +num %10;
     95c:	0f 2e       	mov	r0, r31
     95e:	fa e0       	ldi	r31, 0x0A	; 10
     960:	8f 2e       	mov	r8, r31
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	9f 2e       	mov	r9, r31
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	af 2e       	mov	r10, r31
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	bf 2e       	mov	r11, r31
     96e:	f0 2d       	mov	r31, r0
     970:	bc 01       	movw	r22, r24
     972:	cd 01       	movw	r24, r26
     974:	a5 01       	movw	r20, r10
     976:	94 01       	movw	r18, r8
     978:	0e 94 be 09 	call	0x137c	; 0x137c <__mulsi3>
     97c:	2b 01       	movw	r4, r22
     97e:	3c 01       	movw	r6, r24
     980:	c7 01       	movw	r24, r14
     982:	b6 01       	movw	r22, r12
     984:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     988:	dc 01       	movw	r26, r24
     98a:	cb 01       	movw	r24, r22
     98c:	84 0d       	add	r24, r4
     98e:	95 1d       	adc	r25, r5
     990:	a6 1d       	adc	r26, r6
     992:	b7 1d       	adc	r27, r7
		num=num/10;
     994:	c2 2e       	mov	r12, r18
     996:	d3 2e       	mov	r13, r19
     998:	e4 2e       	mov	r14, r20
     99a:	f5 2e       	mov	r15, r21
	{
		LCD_WRITE_CHARACHTER('-');
		num *= -1;
	}
	
	while (num != 0)
     99c:	c1 14       	cp	r12, r1
     99e:	d1 04       	cpc	r13, r1
     9a0:	e1 04       	cpc	r14, r1
     9a2:	f1 04       	cpc	r15, r1
     9a4:	29 f7       	brne	.-54     	; 0x970 <LCD_WriteInteger+0x62>
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	91 05       	cpc	r25, r1
     9aa:	a1 05       	cpc	r26, r1
     9ac:	b1 05       	cpc	r27, r1
     9ae:	0c f1       	brlt	.+66     	; 0x9f2 <LCD_WriteInteger+0xe4>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
     9b0:	0f 2e       	mov	r0, r31
     9b2:	fa e0       	ldi	r31, 0x0A	; 10
     9b4:	4f 2e       	mov	r4, r31
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	5f 2e       	mov	r5, r31
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	6f 2e       	mov	r6, r31
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	7f 2e       	mov	r7, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	bc 01       	movw	r22, r24
     9c6:	cd 01       	movw	r24, r26
     9c8:	a3 01       	movw	r20, r6
     9ca:	92 01       	movw	r18, r4
     9cc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__divmodsi4>
     9d0:	82 2e       	mov	r8, r18
     9d2:	c3 2e       	mov	r12, r19
     9d4:	c4 2f       	mov	r28, r20
     9d6:	d5 2f       	mov	r29, r21
     9d8:	86 2f       	mov	r24, r22
     9da:	80 5d       	subi	r24, 0xD0	; 208
     9dc:	0e 94 19 04 	call	0x832	; 0x832 <LCD_WRITE_CHARACHTER>
		temp/=10;
     9e0:	88 2d       	mov	r24, r8
     9e2:	9c 2d       	mov	r25, r12
     9e4:	ac 2f       	mov	r26, r28
     9e6:	bd 2f       	mov	r27, r29
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	91 05       	cpc	r25, r1
     9ec:	a1 05       	cpc	r26, r1
     9ee:	b1 05       	cpc	r27, r1
     9f0:	4c f7       	brge	.-46     	; 0x9c4 <LCD_WriteInteger+0xb6>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
		temp/=10;
	}
}
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	bf 90       	pop	r11
     a00:	af 90       	pop	r10
     a02:	9f 90       	pop	r9
     a04:	8f 90       	pop	r8
     a06:	7f 90       	pop	r7
     a08:	6f 90       	pop	r6
     a0a:	5f 90       	pop	r5
     a0c:	4f 90       	pop	r4
     a0e:	08 95       	ret

00000a10 <LCD_WriteFloat>:

LCD_WriteFloat(float num)
{
     a10:	8f 92       	push	r8
     a12:	9f 92       	push	r9
     a14:	af 92       	push	r10
     a16:	bf 92       	push	r11
     a18:	cf 92       	push	r12
     a1a:	df 92       	push	r13
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	6b 01       	movw	r12, r22
     a22:	7c 01       	movw	r14, r24
	if (num<0)
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	a9 01       	movw	r20, r18
     a2a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__cmpsf2>
     a2e:	88 23       	and	r24, r24
     a30:	3c f4       	brge	.+14     	; 0xa40 <LCD_WriteFloat+0x30>
	{
		LCD_WRITE_CHARACHTER('-');
     a32:	8d e2       	ldi	r24, 0x2D	; 45
     a34:	0e 94 19 04 	call	0x832	; 0x832 <LCD_WRITE_CHARACHTER>
		num=-1*num;
     a38:	f7 fa       	bst	r15, 7
     a3a:	f0 94       	com	r15
     a3c:	f7 f8       	bld	r15, 7
     a3e:	f0 94       	com	r15
	}
	if (num>0 && num<1)
     a40:	c7 01       	movw	r24, r14
     a42:	b6 01       	movw	r22, r12
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	a9 01       	movw	r20, r18
     a4a:	0e 94 57 09 	call	0x12ae	; 0x12ae <__gesf2>
     a4e:	18 16       	cp	r1, r24
     a50:	7c f4       	brge	.+30     	; 0xa70 <LCD_WriteFloat+0x60>
     a52:	c7 01       	movw	r24, r14
     a54:	b6 01       	movw	r22, r12
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__cmpsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <LCD_WriteFloat+0x60>
	{
		LCD_WriteInteger(0);
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	cb 01       	movw	r24, r22
     a6c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_WriteInteger>
	}

	LCD_WriteInteger((uint32)num);
     a70:	c7 01       	movw	r24, r14
     a72:	b6 01       	movw	r22, r12
     a74:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__fixunssfsi>
     a78:	4b 01       	movw	r8, r22
     a7a:	5c 01       	movw	r10, r24
     a7c:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_WriteInteger>
	LCD_WRITE_CHARACHTER('.');
     a80:	8e e2       	ldi	r24, 0x2E	; 46
     a82:	0e 94 19 04 	call	0x832	; 0x832 <LCD_WRITE_CHARACHTER>
	num=(num-(uint32)num)*100;
     a86:	c5 01       	movw	r24, r10
     a88:	b4 01       	movw	r22, r8
     a8a:	0e 94 a5 08 	call	0x114a	; 0x114a <__floatunsisf>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c7 01       	movw	r24, r14
     a94:	b6 01       	movw	r22, r12
     a96:	0e 94 0b 08 	call	0x1016	; 0x1016 <__subsf3>
     a9a:	46 2f       	mov	r20, r22
     a9c:	57 2f       	mov	r21, r23
     a9e:	68 2f       	mov	r22, r24
     aa0:	79 2f       	mov	r23, r25
     aa2:	cb 01       	movw	r24, r22
     aa4:	ba 01       	movw	r22, r20
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	48 ec       	ldi	r20, 0xC8	; 200
     aac:	52 e4       	ldi	r21, 0x42	; 66
     aae:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__mulsf3>
	LCD_WriteInteger(num);
     ab2:	0e 94 74 08 	call	0x10e8	; 0x10e8 <__fixsfsi>
     ab6:	0e 94 87 04 	call	0x90e	; 0x90e <LCD_WriteInteger>
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	df 90       	pop	r13
     ac0:	cf 90       	pop	r12
     ac2:	bf 90       	pop	r11
     ac4:	af 90       	pop	r10
     ac6:	9f 90       	pop	r9
     ac8:	8f 90       	pop	r8
     aca:	08 95       	ret

00000acc <LED0_INIT>:

#include "LED.h"

void LED0_INIT()
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN0 , DIO_PIN_OUTPUT);
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
}
     ad6:	08 95       	ret

00000ad8 <LED1_INIT>:
void LED1_INIT()
{
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN5 , DIO_PIN_OUTPUT);
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	65 e0       	ldi	r22, 0x05	; 5
     adc:	41 e0       	ldi	r20, 0x01	; 1
     ade:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	
}
     ae2:	08 95       	ret

00000ae4 <LED1_toggle>:
void LED1_toggle()
{
	DIO_togglePin(DIO_PORTB , DIO_PIN5);
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	65 e0       	ldi	r22, 0x05	; 5
     ae8:	0e 94 88 02 	call	0x510	; 0x510 <DIO_togglePin>
}
     aec:	08 95       	ret

00000aee <LED0_ON>:

void LED0_ON()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_HIGH);
     aee:	83 e0       	ldi	r24, 0x03	; 3
     af0:	63 e0       	ldi	r22, 0x03	; 3
     af2:	41 e0       	ldi	r20, 0x01	; 1
     af4:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     af8:	08 95       	ret

00000afa <LED0_OFF>:

void LED0_OFF()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_LOW);
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     b04:	08 95       	ret

00000b06 <LED0_toggle>:

void LED0_toggle()
{
	DIO_togglePin(DIO_PORTD , DIO_PIN0);
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	0e 94 88 02 	call	0x510	; 0x510 <DIO_togglePin>
}
     b0e:	08 95       	ret

00000b10 <Button_UP_Init>:

void Button_UP_Init(void)
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN3, DIO_PIN_INPUT);
     b10:	83 e0       	ldi	r24, 0x03	; 3
     b12:	63 e0       	ldi	r22, 0x03	; 3
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_WritePIN(DIO_PORTD, DIO_PIN3, DIO_PIN_HIGH);
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	63 e0       	ldi	r22, 0x03	; 3
     b1e:	41 e0       	ldi	r20, 0x01	; 1
     b20:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     b24:	08 95       	ret

00000b26 <Button_UP_GetVal>:
uint8 Button_UP_GetVal(void)
{
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	0f 92       	push	r0
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	uint8 Button_value=0;
     b30:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTD, DIO_PIN3, &Button_value);
     b32:	83 e0       	ldi	r24, 0x03	; 3
     b34:	63 e0       	ldi	r22, 0x03	; 3
     b36:	ae 01       	movw	r20, r28
     b38:	4f 5f       	subi	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_ReadPin>
	return Button_value;
}
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	0f 90       	pop	r0
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <Button_Down_Init>:
void Button_Down_Init(void)
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN2, DIO_PIN_INPUT);
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	0e 94 17 01 	call	0x22e	; 0x22e <DIO_SetPINDIR>
	DIO_WritePIN(DIO_PORTD, DIO_PIN2, DIO_PIN_HIGH);
     b54:	83 e0       	ldi	r24, 0x03	; 3
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	0e 94 ad 01 	call	0x35a	; 0x35a <DIO_WritePIN>
}
     b5e:	08 95       	ret

00000b60 <Button_Down_GetVal>:
uint8 Button_Down_GetVal(void)
{
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	0f 92       	push	r0
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
	uint8 Button_value=0;
     b6a:	19 82       	std	Y+1, r1	; 0x01
	DIO_ReadPin(DIO_PORTD, DIO_PIN2, &Button_value);
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	62 e0       	ldi	r22, 0x02	; 2
     b70:	ae 01       	movw	r20, r28
     b72:	4f 5f       	subi	r20, 0xFF	; 255
     b74:	5f 4f       	sbci	r21, 0xFF	; 255
     b76:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_ReadPin>
	return Button_value;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	0f 90       	pop	r0
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <main>:
 

int main(void)
{
	
	SCH_Init_T2();
     b84:	0e 94 24 07 	call	0xe48	; 0xe48 <SCH_Init_T2>
	Timer0_Init();
     b88:	0e 94 d7 07 	call	0xfae	; 0xfae <Timer0_Init>
	//LED0_INIT();
	//LED1_INIT();
	TempsSensor_INIT();
     b8c:	0e 94 9c 07 	call	0xf38	; 0xf38 <TempsSensor_INIT>
	cooling_Init();
     b90:	0e 94 de 00 	call	0x1bc	; 0x1bc <cooling_Init>
	heating_Init();
     b94:	0e 94 19 03 	call	0x632	; 0x632 <heating_Init>
	ExternalINT0_INIT();
     b98:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ExternalINT0_INIT>
	//ExternalINT1_INIT();
	segment7_init();
     b9c:	0e 94 49 00 	call	0x92	; 0x92 <segment7_init>
	//Button_UP_Init();
	Button_Down_Init();
     ba0:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Button_Down_Init>
	
	/*if (EEPROM_Read(EEPROM_Address)!=60)
	{
		Set_Tempreature=EEPROM_Read(EEPROM_Address);
	}*/
	Sch_Add_Task(first_segment7_display,0,segment_blinking_speed);  //start display values on 7-segment
     ba4:	40 91 6e 00 	lds	r20, 0x006E
     ba8:	86 e6       	ldi	r24, 0x66	; 102
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	0e 94 85 06 	call	0xd0a	; 0xd0a <Sch_Add_Task>
	Sch_Add_Task(Timer0_SetDelay,0,0);							   //Initialize timer0 to count for 5 seconds
     bb6:	8a ef       	ldi	r24, 0xFA	; 250
     bb8:	97 e0       	ldi	r25, 0x07	; 7
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	0e 94 85 06 	call	0xd0a	; 0xd0a <Sch_Add_Task>
	Sch_Add_Task(Timer0_Start,5000,0);							  //Start counting after 5 seconds in case the user doesn't want to change the tempreature.
     bc6:	80 ee       	ldi	r24, 0xE0	; 224
     bc8:	97 e0       	ldi	r25, 0x07	; 7
     bca:	68 e8       	ldi	r22, 0x88	; 136
     bcc:	73 e1       	ldi	r23, 0x13	; 19
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	0e 94 85 06 	call	0xd0a	; 0xd0a <Sch_Add_Task>
    while(1)
    {	
		SCH_Dispatch_Tasks();
     bd6:	0e 94 f4 06 	call	0xde8	; 0xde8 <SCH_Dispatch_Tasks>
     bda:	fd cf       	rjmp	.-6      	; 0xbd6 <main+0x52>

00000bdc <__vector_2>:
}*/

//ISR of the button used to increase the required value.

ISR(INT1_vect)
{
     bdc:	1f 92       	push	r1
     bde:	0f 92       	push	r0
     be0:	0f b6       	in	r0, 0x3f	; 63
     be2:	0f 92       	push	r0
     be4:	11 24       	eor	r1, r1
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
	//LED1_toggle();
		
		//scheduler delete task for temperature sensor to display the required temperature
		SCH_Delete_Task(TaskID);
     bfe:	80 91 80 00 	lds	r24, 0x0080
     c02:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SCH_Delete_Task>
		//stop counting to re-initialize the timer
		Timer0_Stop();
     c06:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Timer0_Stop>
		//re-initialize the timer by the appropriate value to count 5 seconds
		TCNT0=CounterRegister_InitValue;
     c0a:	80 91 8d 00 	lds	r24, 0x008D
     c0e:	82 bf       	out	0x32, r24	; 50
		//start counting when button pressed
		Timer0_Start();									 
     c10:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <Timer0_Start>
	segment_blinking_speed=50;					
     c14:	82 e3       	ldi	r24, 0x32	; 50
     c16:	80 93 6e 00 	sts	0x006E, r24
	if (Set_Tempreature_mask<75)
     c1a:	80 91 6b 00 	lds	r24, 0x006B
     c1e:	8b 34       	cpi	r24, 0x4B	; 75
     c20:	38 f4       	brcc	.+14     	; 0xc30 <__vector_2+0x54>
	{	
		Set_Tempreature_mask+=5;					//change the required temperature
     c22:	8b 5f       	subi	r24, 0xFB	; 251
     c24:	80 93 6b 00 	sts	0x006B, r24
		Set_Tempreature=Set_Tempreature_mask;	   //set_tempreature variable will store the required value to send it to the 7-segment
     c28:	80 93 6c 00 	sts	0x006C, r24
     c2c:	10 92 6d 00 	sts	0x006D, r1
	}
	//EEPROM_Write(Set_Tempreature,EEPROM_Address);
}
     c30:	ff 91       	pop	r31
     c32:	ef 91       	pop	r30
     c34:	bf 91       	pop	r27
     c36:	af 91       	pop	r26
     c38:	9f 91       	pop	r25
     c3a:	8f 91       	pop	r24
     c3c:	7f 91       	pop	r23
     c3e:	6f 91       	pop	r22
     c40:	5f 91       	pop	r21
     c42:	4f 91       	pop	r20
     c44:	3f 91       	pop	r19
     c46:	2f 91       	pop	r18
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <__vector_11>:


//ISR of timer0 to count 5seconds
ISR(TIMER0_OVF_vect)
{
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	2f 93       	push	r18
     c5e:	3f 93       	push	r19
     c60:	4f 93       	push	r20
     c62:	5f 93       	push	r21
     c64:	6f 93       	push	r22
     c66:	7f 93       	push	r23
     c68:	8f 93       	push	r24
     c6a:	9f 93       	push	r25
     c6c:	af 93       	push	r26
     c6e:	bf 93       	push	r27
     c70:	ef 93       	push	r30
     c72:	ff 93       	push	r31
	
	static uint32 counter=0;
	counter++;
     c74:	80 91 81 00 	lds	r24, 0x0081
     c78:	90 91 82 00 	lds	r25, 0x0082
     c7c:	a0 91 83 00 	lds	r26, 0x0083
     c80:	b0 91 84 00 	lds	r27, 0x0084
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	a1 1d       	adc	r26, r1
     c88:	b1 1d       	adc	r27, r1
     c8a:	80 93 81 00 	sts	0x0081, r24
     c8e:	90 93 82 00 	sts	0x0082, r25
     c92:	a0 93 83 00 	sts	0x0083, r26
     c96:	b0 93 84 00 	sts	0x0084, r27
	//if 5 seconds counted do:
	if (counter==Number_OverFlows)
     c9a:	40 91 89 00 	lds	r20, 0x0089
     c9e:	50 91 8a 00 	lds	r21, 0x008A
     ca2:	60 91 8b 00 	lds	r22, 0x008B
     ca6:	70 91 8c 00 	lds	r23, 0x008C
     caa:	84 17       	cp	r24, r20
     cac:	95 07       	cpc	r25, r21
     cae:	a6 07       	cpc	r26, r22
     cb0:	b7 07       	cpc	r27, r23
     cb2:	d1 f4       	brne	.+52     	; 0xce8 <__vector_11+0x96>
	{
		//Stop the timer as no long needed.
		Timer0_Stop();
     cb4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <Timer0_Stop>
		//re-initialize the timer for next button press
		TCNT0=CounterRegister_InitValue;
     cb8:	80 91 8d 00 	lds	r24, 0x008D
     cbc:	82 bf       	out	0x32, r24	; 50
		//re-initialize counter to start over in the next time
		counter=0;
     cbe:	10 92 81 00 	sts	0x0081, r1
     cc2:	10 92 82 00 	sts	0x0082, r1
     cc6:	10 92 83 00 	sts	0x0083, r1
     cca:	10 92 84 00 	sts	0x0084, r1
		//stop blinking
		segment_blinking_speed=20;
     cce:	84 e1       	ldi	r24, 0x14	; 20
     cd0:	80 93 6e 00 	sts	0x006E, r24
		//Start displaying the ADC(actual) tempreature value.
		TaskID=Sch_Add_Task(TempSensor_READ,0,100);
     cd4:	8f e9       	ldi	r24, 0x9F	; 159
     cd6:	97 e0       	ldi	r25, 0x07	; 7
     cd8:	60 e0       	ldi	r22, 0x00	; 0
     cda:	70 e0       	ldi	r23, 0x00	; 0
     cdc:	44 e6       	ldi	r20, 0x64	; 100
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 85 06 	call	0xd0a	; 0xd0a <Sch_Add_Task>
     ce4:	80 93 80 00 	sts	0x0080, r24
	}
	
     ce8:	ff 91       	pop	r31
     cea:	ef 91       	pop	r30
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	7f 91       	pop	r23
     cf6:	6f 91       	pop	r22
     cf8:	5f 91       	pop	r21
     cfa:	4f 91       	pop	r20
     cfc:	3f 91       	pop	r19
     cfe:	2f 91       	pop	r18
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <Sch_Add_Task>:
	
	
}

uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
     d0a:	ef 92       	push	r14
     d0c:	ff 92       	push	r15
     d0e:	0f 93       	push	r16
     d10:	1f 93       	push	r17
     d12:	cf 93       	push	r28
     d14:	dc 01       	movw	r26, r24
     d16:	7b 01       	movw	r14, r22
     d18:	8a 01       	movw	r16, r20
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     d1a:	80 91 94 00 	lds	r24, 0x0094
     d1e:	90 91 95 00 	lds	r25, 0x0095
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	f9 f0       	breq	.+62     	; 0xd64 <Sch_Add_Task+0x5a>
     d26:	eb e9       	ldi	r30, 0x9B	; 155
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	41 e0       	ldi	r20, 0x01	; 1
     d2c:	50 e0       	ldi	r21, 0x00	; 0
	{
		index++;
     d2e:	84 2f       	mov	r24, r20
uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     d30:	ba 01       	movw	r22, r20
     d32:	20 81       	ld	r18, Z
     d34:	31 81       	ldd	r19, Z+1	; 0x01
     d36:	21 15       	cp	r18, r1
     d38:	31 05       	cpc	r19, r1
     d3a:	41 f0       	breq	.+16     	; 0xd4c <Sch_Add_Task+0x42>
     d3c:	4f 5f       	subi	r20, 0xFF	; 255
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
     d40:	37 96       	adiw	r30, 0x07	; 7
     d42:	4b 30       	cpi	r20, 0x0B	; 11
     d44:	51 05       	cpc	r21, r1
     d46:	99 f7       	brne	.-26     	; 0xd2e <Sch_Add_Task+0x24>
	{
		index++;
     d48:	c8 2f       	mov	r28, r24
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <Sch_Add_Task+0x44>
     d4c:	c4 2f       	mov	r28, r20
	}
	if (index==SCH_MAX_TASKS)
     d4e:	ca 30       	cpi	r28, 0x0A	; 10
     d50:	61 f4       	brne	.+24     	; 0xd6a <Sch_Add_Task+0x60>
	{
		//Task List is full
		LCD_WriteString("Too many Tasks");
     d52:	8f e6       	ldi	r24, 0x6F	; 111
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 58 04 	call	0x8b0	; 0x8b0 <LCD_WriteString>
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	80 93 85 00 	sts	0x0085, r24
		//return an error code
		return SCH_MAX_TASKS;
     d60:	8c 2f       	mov	r24, r28
     d62:	16 c0       	rjmp	.+44     	; 0xd90 <Sch_Add_Task+0x86>
uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
	
}

uint8 Sch_Add_Task (void(*Task_Name)(void),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
     d68:	80 e0       	ldi	r24, 0x00	; 0
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
		//return an error code
		return SCH_MAX_TASKS;
	}
	//if there is a space for a new task
	SCH_Tasks_G[index].ptask=Task_Name;
     d6a:	9b 01       	movw	r18, r22
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	26 1b       	sub	r18, r22
     d7a:	37 0b       	sbc	r19, r23
     d7c:	f9 01       	movw	r30, r18
     d7e:	ec 56       	subi	r30, 0x6C	; 108
     d80:	ff 4f       	sbci	r31, 0xFF	; 255
     d82:	b1 83       	std	Z+1, r27	; 0x01
     d84:	a0 83       	st	Z, r26
	SCH_Tasks_G[index].delay=Initial_Delay;
     d86:	f3 82       	std	Z+3, r15	; 0x03
     d88:	e2 82       	std	Z+2, r14	; 0x02
	SCH_Tasks_G[index].period=Period;
     d8a:	15 83       	std	Z+5, r17	; 0x05
     d8c:	04 83       	std	Z+4, r16	; 0x04
	SCH_Tasks_G[index].Runme=0;
     d8e:	16 82       	std	Z+6, r1	; 0x06
	return index; // return position of task (to allow later deletion)
}
     d90:	cf 91       	pop	r28
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	ff 90       	pop	r15
     d98:	ef 90       	pop	r14
     d9a:	08 95       	ret

00000d9c <SCH_Delete_Task>:
		}
	}
}
uint8 SCH_Delete_Task(const uint8 id)
{
	if (SCH_Tasks_G[id].ptask==0)
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	fc 01       	movw	r30, r24
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e8 1b       	sub	r30, r24
     dae:	f9 0b       	sbc	r31, r25
     db0:	ec 56       	subi	r30, 0x6C	; 108
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	20 81       	ld	r18, Z
     db6:	31 81       	ldd	r19, Z+1	; 0x01
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	11 f4       	brne	.+4      	; 0xdc2 <SCH_Delete_Task+0x26>
	{
		return 0;
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	08 95       	ret
	}
	SCH_Tasks_G[id].ptask=0x00;
     dc2:	fc 01       	movw	r30, r24
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e8 1b       	sub	r30, r24
     dd2:	f9 0b       	sbc	r31, r25
     dd4:	ec 56       	subi	r30, 0x6C	; 108
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	11 82       	std	Z+1, r1	; 0x01
     dda:	10 82       	st	Z, r1
	SCH_Tasks_G[id].period=0;
     ddc:	15 82       	std	Z+5, r1	; 0x05
     dde:	14 82       	std	Z+4, r1	; 0x04
	SCH_Tasks_G[id].delay=0;
     de0:	13 82       	std	Z+3, r1	; 0x03
     de2:	12 82       	std	Z+2, r1	; 0x02
	SCH_Tasks_G[id].Runme=0;
     de4:	16 82       	std	Z+6, r1	; 0x06
}
     de6:	08 95       	ret

00000de8 <SCH_Dispatch_Tasks>:
	SCH_Tasks_G[index].Runme=0;
	return index; // return position of task (to allow later deletion)
}

void SCH_Dispatch_Tasks(void)
{
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
     df2:	ca e9       	ldi	r28, 0x9A	; 154
     df4:	d0 e0       	ldi	r29, 0x00	; 0
     df6:	0f 2e       	mov	r0, r31
     df8:	fa ef       	ldi	r31, 0xFA	; 250
     dfa:	ef 2e       	mov	r14, r31
     dfc:	ff ef       	ldi	r31, 0xFF	; 255
     dfe:	ff 2e       	mov	r15, r31
     e00:	f0 2d       	mov	r31, r0
     e02:	ec 0e       	add	r14, r28
     e04:	fd 1e       	adc	r15, r29
     e06:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (SCH_Tasks_G[index].Runme>0)
     e08:	88 81       	ld	r24, Y
     e0a:	88 23       	and	r24, r24
     e0c:	79 f0       	breq	.+30     	; 0xe2c <SCH_Dispatch_Tasks+0x44>
		{
			(*SCH_Tasks_G[index].ptask)();//run the task.
     e0e:	d7 01       	movw	r26, r14
     e10:	ed 91       	ld	r30, X+
     e12:	fc 91       	ld	r31, X
     e14:	09 95       	icall
			SCH_Tasks_G[index].Runme-=1;
     e16:	88 81       	ld	r24, Y
     e18:	81 50       	subi	r24, 0x01	; 1
     e1a:	88 83       	st	Y, r24
			if (SCH_Tasks_G[index].period==0)
     e1c:	f7 01       	movw	r30, r14
     e1e:	84 81       	ldd	r24, Z+4	; 0x04
     e20:	95 81       	ldd	r25, Z+5	; 0x05
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	19 f4       	brne	.+6      	; 0xe2c <SCH_Dispatch_Tasks+0x44>
			{
				SCH_Delete_Task(index);
     e26:	81 2f       	mov	r24, r17
     e28:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SCH_Delete_Task>

void SCH_Dispatch_Tasks(void)
{
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
     e2c:	1f 5f       	subi	r17, 0xFF	; 255
     e2e:	27 96       	adiw	r28, 0x07	; 7
     e30:	87 e0       	ldi	r24, 0x07	; 7
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	e8 0e       	add	r14, r24
     e36:	f9 1e       	adc	r15, r25
     e38:	1a 30       	cpi	r17, 0x0A	; 10
     e3a:	31 f7       	brne	.-52     	; 0xe08 <SCH_Dispatch_Tasks+0x20>
				SCH_Delete_Task(index);
			}
			
		}
	}
}
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	ff 90       	pop	r15
     e44:	ef 90       	pop	r14
     e46:	08 95       	ret

00000e48 <SCH_Init_T2>:
#include <avr/interrupt.h>

uint8 Error_Code_G=0;

void SCH_Init_T2(void)
{
     e48:	cf 93       	push	r28
	uint8 i;
	for (i=0;i<SCH_MAX_TASKS;i++)
     e4a:	c0 e0       	ldi	r28, 0x00	; 0
	{
	 SCH_Delete_Task(i);
     e4c:	8c 2f       	mov	r24, r28
     e4e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SCH_Delete_Task>
uint8 Error_Code_G=0;

void SCH_Init_T2(void)
{
	uint8 i;
	for (i=0;i<SCH_MAX_TASKS;i++)
     e52:	cf 5f       	subi	r28, 0xFF	; 255
     e54:	ca 30       	cpi	r28, 0x0A	; 10
     e56:	d1 f7       	brne	.-12     	; 0xe4c <SCH_Init_T2+0x4>
	{
	 SCH_Delete_Task(i);
	}
	
	Error_Code_G=0;
     e58:	10 92 85 00 	sts	0x0085, r1
	
	Timer1_Init();
     e5c:	0e 94 c1 07 	call	0xf82	; 0xf82 <Timer1_Init>
	
	
}
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <__vector_7>:
}

														
//ISR of Timer1 used for scheduler
ISR(TIMER1_COMPA_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	2f 93       	push	r18
     e70:	3f 93       	push	r19
     e72:	4f 93       	push	r20
     e74:	5f 93       	push	r21
     e76:	6f 93       	push	r22
     e78:	7f 93       	push	r23
     e7a:	8f 93       	push	r24
     e7c:	9f 93       	push	r25
     e7e:	af 93       	push	r26
     e80:	bf 93       	push	r27
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
	/*********************************** Heating Elements Control *******************************************/
	if (average<=Set_Tempreature_mask-5)
     e8a:	20 91 6b 00 	lds	r18, 0x006B
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	25 50       	subi	r18, 0x05	; 5
     e92:	30 40       	sbci	r19, 0x00	; 0
     e94:	80 91 86 00 	lds	r24, 0x0086
     e98:	90 91 87 00 	lds	r25, 0x0087
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	30 f0       	brcs	.+12     	; 0xeae <__vector_7+0x4a>
	{
		heating_set_state(heat_ON);
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	0e 94 1f 03 	call	0x63e	; 0x63e <heating_set_state>
		cooling_set_state(cool_OFF);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <cooling_set_state>
	}
	if (average+5>Set_Tempreature_mask)
     eae:	20 91 86 00 	lds	r18, 0x0086
     eb2:	30 91 87 00 	lds	r19, 0x0087
     eb6:	2b 5f       	subi	r18, 0xFB	; 251
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	80 91 6b 00 	lds	r24, 0x006B
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	82 17       	cp	r24, r18
     ec2:	93 07       	cpc	r25, r19
     ec4:	30 f4       	brcc	.+12     	; 0xed2 <__vector_7+0x6e>
	{
		heating_set_state(heat_OFF);
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	0e 94 1f 03 	call	0x63e	; 0x63e <heating_set_state>
		cooling_set_state(cool_ON);
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <cooling_set_state>
     ed2:	e4 e9       	ldi	r30, 0x94	; 148
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	df 01       	movw	r26, r30
     ed8:	16 96       	adiw	r26, 0x06	; 6
	SCH_Tasks_G[id].Runme=0;
}

														
//ISR of Timer1 used for scheduler
ISR(TIMER1_COMPA_vect)
     eda:	2a ed       	ldi	r18, 0xDA	; 218
     edc:	30 e0       	ldi	r19, 0x00	; 0
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
	{
		//check if there is a task at this location.
		if (SCH_Tasks_G[index].ptask)
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	00 97       	sbiw	r24, 0x00	; 0
     ee4:	89 f0       	breq	.+34     	; 0xf08 <__vector_7+0xa4>
		{
			if (SCH_Tasks_G[index].delay==0)
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	51 f4       	brne	.+20     	; 0xf02 <__vector_7+0x9e>
			{
				//The task is due to run.
				SCH_Tasks_G[index].Runme+=1; // increase the tun me flag.
     eee:	8c 91       	ld	r24, X
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	8c 93       	st	X, r24
				if (SCH_Tasks_G[index].period)
     ef4:	84 81       	ldd	r24, Z+4	; 0x04
     ef6:	95 81       	ldd	r25, Z+5	; 0x05
     ef8:	00 97       	sbiw	r24, 0x00	; 0
     efa:	31 f0       	breq	.+12     	; 0xf08 <__vector_7+0xa4>
				{
					//schedule periodic task to run again.
					SCH_Tasks_G[index].delay=SCH_Tasks_G[index].period;
     efc:	93 83       	std	Z+3, r25	; 0x03
     efe:	82 83       	std	Z+2, r24	; 0x02
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <__vector_7+0xa4>
				
			}
			else
			{
				//not yet ready to run.
				SCH_Tasks_G[index].delay-=1;
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	93 83       	std	Z+3, r25	; 0x03
     f06:	82 83       	std	Z+2, r24	; 0x02
     f08:	37 96       	adiw	r30, 0x07	; 7
     f0a:	17 96       	adiw	r26, 0x07	; 7
	}
	/************************************** End of Elements control block**************************************/
	uint8 index=0;
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
     f0c:	e2 17       	cp	r30, r18
     f0e:	f3 07       	cpc	r31, r19
     f10:	31 f7       	brne	.-52     	; 0xede <__vector_7+0x7a>
				SCH_Tasks_G[index].delay-=1;
			}
		}
		//Timer1_Manual_Reload();
	}
}
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	0f 90       	pop	r0
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	0f 90       	pop	r0
     f34:	1f 90       	pop	r1
     f36:	18 95       	reti

00000f38 <TempsSensor_INIT>:
extern uint16 read;
uint16 average=0;
extern uint16 Set_Tempreature;
void TempsSensor_INIT(void)
{
	ADC_INIT();
     f38:	0e 94 bc 00 	call	0x178	; 0x178 <ADC_INIT>
}
     f3c:	08 95       	ret

00000f3e <TempSensor_READ>:
void TempSensor_READ(void)
{
     f3e:	cf 93       	push	r28
     f40:	ca e0       	ldi	r28, 0x0A	; 10
	//Calculate average of 10 reads
	for (uint8 i=0;i<10;i++)
	{
		ADC_READ();
     f42:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_READ>
		average=average+read;
     f46:	80 91 86 00 	lds	r24, 0x0086
     f4a:	90 91 87 00 	lds	r25, 0x0087
     f4e:	20 91 7e 00 	lds	r18, 0x007E
     f52:	30 91 7f 00 	lds	r19, 0x007F
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	90 93 87 00 	sts	0x0087, r25
     f5e:	80 93 86 00 	sts	0x0086, r24
     f62:	c1 50       	subi	r28, 0x01	; 1
	ADC_INIT();
}
void TempSensor_READ(void)
{
	//Calculate average of 10 reads
	for (uint8 i=0;i<10;i++)
     f64:	71 f7       	brne	.-36     	; 0xf42 <TempSensor_READ+0x4>
	{
		ADC_READ();
		average=average+read;
	}
	average=average/10;
     f66:	6a e0       	ldi	r22, 0x0A	; 10
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__udivmodhi4>
     f6e:	60 93 86 00 	sts	0x0086, r22
     f72:	70 93 87 00 	sts	0x0087, r23
	//store the result value in set tempreature variable to be displayed
	Set_Tempreature=average;
     f76:	60 93 6c 00 	sts	0x006C, r22
     f7a:	70 93 6d 00 	sts	0x006D, r23
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <Timer1_Init>:
uint8  Num0_ComMatch=0;

/*****************************************************************Timer 1********************************************************************/
void Timer1_Init(void)
{
	TIMSK  |=0x10; //Enable interrupt for timer over flow.
     f82:	89 b7       	in	r24, 0x39	; 57
     f84:	80 61       	ori	r24, 0x10	; 16
     f86:	89 bf       	out	0x39, r24	; 57
	SREG   |=0x80; //Enable the global interrupt.
     f88:	8f b7       	in	r24, 0x3f	; 63
     f8a:	80 68       	ori	r24, 0x80	; 128
     f8c:	8f bf       	out	0x3f, r24	; 63
	//Timer1_Manual_Reload();
	TCCR1A |=0x00; //OC1A state at compare match & mode of the timer.
     f8e:	8f b5       	in	r24, 0x2f	; 47
     f90:	8f bd       	out	0x2f, r24	; 47
	TCNT1 =0;
     f92:	1d bc       	out	0x2d, r1	; 45
     f94:	1c bc       	out	0x2c, r1	; 44
	OCR1A=16;
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	9b bd       	out	0x2b, r25	; 43
     f9c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B =13;
     f9e:	8d e0       	ldi	r24, 0x0D	; 13
     fa0:	8e bd       	out	0x2e, r24	; 46
	
	
}
     fa2:	08 95       	ret

00000fa4 <Set_Call_Back_Timer1>:

void Set_Call_Back_Timer1(void(*ptr)(void))
{
	Time1_Call_Back_ptr = ptr;
     fa4:	90 93 8f 00 	sts	0x008F, r25
     fa8:	80 93 8e 00 	sts	0x008E, r24
}
     fac:	08 95       	ret

00000fae <Timer0_Init>:
{
	#if TIMER0_MODE==NORMAL
	
	/*Initialize Timer 0  in Normal mode */
	
	TCCR0 |= 0x00 ;
     fae:	83 b7       	in	r24, 0x33	; 51
     fb0:	83 bf       	out	0x33, r24	; 51
	
	TIMSK |= 0x01;
     fb2:	89 b7       	in	r24, 0x39	; 57
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	89 bf       	out	0x39, r24	; 57

	SREG |= 0x80;
     fb8:	8f b7       	in	r24, 0x3f	; 63
     fba:	80 68       	ori	r24, 0x80	; 128
     fbc:	8f bf       	out	0x3f, r24	; 63
	Set_bit(TCCR0,3);
	SREG |=0x80;
	Set_bit(TIMSK,1);
	
	#endif
}
     fbe:	08 95       	ret

00000fc0 <Timer0_Start>:
void Timer0_Start(void)
{
	
	/* start timer with prescaller   1024 */
	
	TCCR0 |= 0x05;
     fc0:	83 b7       	in	r24, 0x33	; 51
     fc2:	85 60       	ori	r24, 0x05	; 5
     fc4:	83 bf       	out	0x33, r24	; 51
	
}
     fc6:	08 95       	ret

00000fc8 <Timer0_Stop>:
void Timer0_Stop(void)
{
	
	Clr_bit(TCCR0,0);
     fc8:	83 b7       	in	r24, 0x33	; 51
     fca:	8e 7f       	andi	r24, 0xFE	; 254
     fcc:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,1);
     fce:	83 b7       	in	r24, 0x33	; 51
     fd0:	8d 7f       	andi	r24, 0xFD	; 253
     fd2:	83 bf       	out	0x33, r24	; 51
	Clr_bit(TCCR0,2);
     fd4:	83 b7       	in	r24, 0x33	; 51
     fd6:	8b 7f       	andi	r24, 0xFB	; 251
     fd8:	83 bf       	out	0x33, r24	; 51
	
}
     fda:	08 95       	ret

00000fdc <Timer0_Manual_Reload>:

void Timer0_Manual_Reload(void)
{
	TCCR0 |=0x00;
     fdc:	83 b7       	in	r24, 0x33	; 51
     fde:	83 bf       	out	0x33, r24	; 51
	TCNT0 =0;
     fe0:	12 be       	out	0x32, r1	; 50
	TCCR0 |=0x05;
     fe2:	83 b7       	in	r24, 0x33	; 51
     fe4:	85 60       	ori	r24, 0x05	; 5
     fe6:	83 bf       	out	0x33, r24	; 51
}
     fe8:	08 95       	ret

00000fea <Set_Call_Back_Timer0>:

void Set_Call_Back_Timer0(void(*ptr)(uint8 *str))
{
	Time0_Call_Back_ptr=ptr;
     fea:	90 93 91 00 	sts	0x0091, r25
     fee:	80 93 90 00 	sts	0x0090, r24
}
     ff2:	08 95       	ret

00000ff4 <Timer0_SetDelay>:
	
	#if TIMER0_MODE==NORMAL
	
	Number_OverFlows = Total_Ticks / 256 ;
	
	CounterRegister_InitValue = 256 - (Total_Ticks % 256) ; //256 - ((  ((float) Total_Ticks / 256 ) - Number_OverFlows ) * 256 );
     ff4:	83 ed       	ldi	r24, 0xD3	; 211
     ff6:	80 93 8d 00 	sts	0x008D, r24
	
	
	TCNT0 = CounterRegister_InitValue ;
     ffa:	82 bf       	out	0x32, r24	; 50
	
	Number_OverFlows ++;
     ffc:	82 e0       	ldi	r24, 0x02	; 2
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	80 93 89 00 	sts	0x0089, r24
    1008:	90 93 8a 00 	sts	0x008A, r25
    100c:	a0 93 8b 00 	sts	0x008B, r26
    1010:	b0 93 8c 00 	sts	0x008C, r27
		Num0_ComMatch=1;
	}
	
	
	#endif
}
    1014:	08 95       	ret

00001016 <__subsf3>:
    1016:	50 58       	subi	r21, 0x80	; 128

00001018 <__addsf3>:
    1018:	bb 27       	eor	r27, r27
    101a:	aa 27       	eor	r26, r26
    101c:	0e d0       	rcall	.+28     	; 0x103a <__addsf3x>
    101e:	0d c1       	rjmp	.+538    	; 0x123a <__fp_round>
    1020:	fe d0       	rcall	.+508    	; 0x121e <__fp_pscA>
    1022:	30 f0       	brcs	.+12     	; 0x1030 <__addsf3+0x18>
    1024:	03 d1       	rcall	.+518    	; 0x122c <__fp_pscB>
    1026:	20 f0       	brcs	.+8      	; 0x1030 <__addsf3+0x18>
    1028:	31 f4       	brne	.+12     	; 0x1036 <__addsf3+0x1e>
    102a:	9f 3f       	cpi	r25, 0xFF	; 255
    102c:	11 f4       	brne	.+4      	; 0x1032 <__addsf3+0x1a>
    102e:	1e f4       	brtc	.+6      	; 0x1036 <__addsf3+0x1e>
    1030:	f3 c0       	rjmp	.+486    	; 0x1218 <__fp_nan>
    1032:	0e f4       	brtc	.+2      	; 0x1036 <__addsf3+0x1e>
    1034:	e0 95       	com	r30
    1036:	e7 fb       	bst	r30, 7
    1038:	e9 c0       	rjmp	.+466    	; 0x120c <__fp_inf>

0000103a <__addsf3x>:
    103a:	e9 2f       	mov	r30, r25
    103c:	0f d1       	rcall	.+542    	; 0x125c <__fp_split3>
    103e:	80 f3       	brcs	.-32     	; 0x1020 <__addsf3+0x8>
    1040:	ba 17       	cp	r27, r26
    1042:	62 07       	cpc	r22, r18
    1044:	73 07       	cpc	r23, r19
    1046:	84 07       	cpc	r24, r20
    1048:	95 07       	cpc	r25, r21
    104a:	18 f0       	brcs	.+6      	; 0x1052 <__addsf3x+0x18>
    104c:	71 f4       	brne	.+28     	; 0x106a <__addsf3x+0x30>
    104e:	9e f5       	brtc	.+102    	; 0x10b6 <__addsf3x+0x7c>
    1050:	27 c1       	rjmp	.+590    	; 0x12a0 <__fp_zero>
    1052:	0e f4       	brtc	.+2      	; 0x1056 <__addsf3x+0x1c>
    1054:	e0 95       	com	r30
    1056:	0b 2e       	mov	r0, r27
    1058:	ba 2f       	mov	r27, r26
    105a:	a0 2d       	mov	r26, r0
    105c:	0b 01       	movw	r0, r22
    105e:	b9 01       	movw	r22, r18
    1060:	90 01       	movw	r18, r0
    1062:	0c 01       	movw	r0, r24
    1064:	ca 01       	movw	r24, r20
    1066:	a0 01       	movw	r20, r0
    1068:	11 24       	eor	r1, r1
    106a:	ff 27       	eor	r31, r31
    106c:	59 1b       	sub	r21, r25
    106e:	99 f0       	breq	.+38     	; 0x1096 <__addsf3x+0x5c>
    1070:	59 3f       	cpi	r21, 0xF9	; 249
    1072:	50 f4       	brcc	.+20     	; 0x1088 <__addsf3x+0x4e>
    1074:	50 3e       	cpi	r21, 0xE0	; 224
    1076:	68 f1       	brcs	.+90     	; 0x10d2 <__addsf3x+0x98>
    1078:	1a 16       	cp	r1, r26
    107a:	f0 40       	sbci	r31, 0x00	; 0
    107c:	a2 2f       	mov	r26, r18
    107e:	23 2f       	mov	r18, r19
    1080:	34 2f       	mov	r19, r20
    1082:	44 27       	eor	r20, r20
    1084:	58 5f       	subi	r21, 0xF8	; 248
    1086:	f3 cf       	rjmp	.-26     	; 0x106e <__addsf3x+0x34>
    1088:	46 95       	lsr	r20
    108a:	37 95       	ror	r19
    108c:	27 95       	ror	r18
    108e:	a7 95       	ror	r26
    1090:	f0 40       	sbci	r31, 0x00	; 0
    1092:	53 95       	inc	r21
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__addsf3x+0x4e>
    1096:	7e f4       	brtc	.+30     	; 0x10b6 <__addsf3x+0x7c>
    1098:	1f 16       	cp	r1, r31
    109a:	ba 0b       	sbc	r27, r26
    109c:	62 0b       	sbc	r22, r18
    109e:	73 0b       	sbc	r23, r19
    10a0:	84 0b       	sbc	r24, r20
    10a2:	ba f0       	brmi	.+46     	; 0x10d2 <__addsf3x+0x98>
    10a4:	91 50       	subi	r25, 0x01	; 1
    10a6:	a1 f0       	breq	.+40     	; 0x10d0 <__addsf3x+0x96>
    10a8:	ff 0f       	add	r31, r31
    10aa:	bb 1f       	adc	r27, r27
    10ac:	66 1f       	adc	r22, r22
    10ae:	77 1f       	adc	r23, r23
    10b0:	88 1f       	adc	r24, r24
    10b2:	c2 f7       	brpl	.-16     	; 0x10a4 <__addsf3x+0x6a>
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <__addsf3x+0x98>
    10b6:	ba 0f       	add	r27, r26
    10b8:	62 1f       	adc	r22, r18
    10ba:	73 1f       	adc	r23, r19
    10bc:	84 1f       	adc	r24, r20
    10be:	48 f4       	brcc	.+18     	; 0x10d2 <__addsf3x+0x98>
    10c0:	87 95       	ror	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f7 95       	ror	r31
    10ca:	9e 3f       	cpi	r25, 0xFE	; 254
    10cc:	08 f0       	brcs	.+2      	; 0x10d0 <__addsf3x+0x96>
    10ce:	b3 cf       	rjmp	.-154    	; 0x1036 <__addsf3+0x1e>
    10d0:	93 95       	inc	r25
    10d2:	88 0f       	add	r24, r24
    10d4:	08 f0       	brcs	.+2      	; 0x10d8 <__addsf3x+0x9e>
    10d6:	99 27       	eor	r25, r25
    10d8:	ee 0f       	add	r30, r30
    10da:	97 95       	ror	r25
    10dc:	87 95       	ror	r24
    10de:	08 95       	ret

000010e0 <__cmpsf2>:
    10e0:	71 d0       	rcall	.+226    	; 0x11c4 <__fp_cmp>
    10e2:	08 f4       	brcc	.+2      	; 0x10e6 <__cmpsf2+0x6>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	08 95       	ret

000010e8 <__fixsfsi>:
    10e8:	04 d0       	rcall	.+8      	; 0x10f2 <__fixunssfsi>
    10ea:	68 94       	set
    10ec:	b1 11       	cpse	r27, r1
    10ee:	d9 c0       	rjmp	.+434    	; 0x12a2 <__fp_szero>
    10f0:	08 95       	ret

000010f2 <__fixunssfsi>:
    10f2:	bc d0       	rcall	.+376    	; 0x126c <__fp_splitA>
    10f4:	88 f0       	brcs	.+34     	; 0x1118 <__fixunssfsi+0x26>
    10f6:	9f 57       	subi	r25, 0x7F	; 127
    10f8:	90 f0       	brcs	.+36     	; 0x111e <__fixunssfsi+0x2c>
    10fa:	b9 2f       	mov	r27, r25
    10fc:	99 27       	eor	r25, r25
    10fe:	b7 51       	subi	r27, 0x17	; 23
    1100:	a0 f0       	brcs	.+40     	; 0x112a <__fixunssfsi+0x38>
    1102:	d1 f0       	breq	.+52     	; 0x1138 <__fixunssfsi+0x46>
    1104:	66 0f       	add	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	1a f0       	brmi	.+6      	; 0x1114 <__fixunssfsi+0x22>
    110e:	ba 95       	dec	r27
    1110:	c9 f7       	brne	.-14     	; 0x1104 <__fixunssfsi+0x12>
    1112:	12 c0       	rjmp	.+36     	; 0x1138 <__fixunssfsi+0x46>
    1114:	b1 30       	cpi	r27, 0x01	; 1
    1116:	81 f0       	breq	.+32     	; 0x1138 <__fixunssfsi+0x46>
    1118:	c3 d0       	rcall	.+390    	; 0x12a0 <__fp_zero>
    111a:	b1 e0       	ldi	r27, 0x01	; 1
    111c:	08 95       	ret
    111e:	c0 c0       	rjmp	.+384    	; 0x12a0 <__fp_zero>
    1120:	67 2f       	mov	r22, r23
    1122:	78 2f       	mov	r23, r24
    1124:	88 27       	eor	r24, r24
    1126:	b8 5f       	subi	r27, 0xF8	; 248
    1128:	39 f0       	breq	.+14     	; 0x1138 <__fixunssfsi+0x46>
    112a:	b9 3f       	cpi	r27, 0xF9	; 249
    112c:	cc f3       	brlt	.-14     	; 0x1120 <__fixunssfsi+0x2e>
    112e:	86 95       	lsr	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	b3 95       	inc	r27
    1136:	d9 f7       	brne	.-10     	; 0x112e <__fixunssfsi+0x3c>
    1138:	3e f4       	brtc	.+14     	; 0x1148 <__fixunssfsi+0x56>
    113a:	90 95       	com	r25
    113c:	80 95       	com	r24
    113e:	70 95       	com	r23
    1140:	61 95       	neg	r22
    1142:	7f 4f       	sbci	r23, 0xFF	; 255
    1144:	8f 4f       	sbci	r24, 0xFF	; 255
    1146:	9f 4f       	sbci	r25, 0xFF	; 255
    1148:	08 95       	ret

0000114a <__floatunsisf>:
    114a:	e8 94       	clt
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__floatsisf+0x12>

0000114e <__floatsisf>:
    114e:	97 fb       	bst	r25, 7
    1150:	3e f4       	brtc	.+14     	; 0x1160 <__floatsisf+0x12>
    1152:	90 95       	com	r25
    1154:	80 95       	com	r24
    1156:	70 95       	com	r23
    1158:	61 95       	neg	r22
    115a:	7f 4f       	sbci	r23, 0xFF	; 255
    115c:	8f 4f       	sbci	r24, 0xFF	; 255
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	99 23       	and	r25, r25
    1162:	a9 f0       	breq	.+42     	; 0x118e <__floatsisf+0x40>
    1164:	f9 2f       	mov	r31, r25
    1166:	96 e9       	ldi	r25, 0x96	; 150
    1168:	bb 27       	eor	r27, r27
    116a:	93 95       	inc	r25
    116c:	f6 95       	lsr	r31
    116e:	87 95       	ror	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f1 11       	cpse	r31, r1
    1178:	f8 cf       	rjmp	.-16     	; 0x116a <__floatsisf+0x1c>
    117a:	fa f4       	brpl	.+62     	; 0x11ba <__floatsisf+0x6c>
    117c:	bb 0f       	add	r27, r27
    117e:	11 f4       	brne	.+4      	; 0x1184 <__floatsisf+0x36>
    1180:	60 ff       	sbrs	r22, 0
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <__floatsisf+0x6c>
    1184:	6f 5f       	subi	r22, 0xFF	; 255
    1186:	7f 4f       	sbci	r23, 0xFF	; 255
    1188:	8f 4f       	sbci	r24, 0xFF	; 255
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	16 c0       	rjmp	.+44     	; 0x11ba <__floatsisf+0x6c>
    118e:	88 23       	and	r24, r24
    1190:	11 f0       	breq	.+4      	; 0x1196 <__floatsisf+0x48>
    1192:	96 e9       	ldi	r25, 0x96	; 150
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <__floatsisf+0x6a>
    1196:	77 23       	and	r23, r23
    1198:	21 f0       	breq	.+8      	; 0x11a2 <__floatsisf+0x54>
    119a:	9e e8       	ldi	r25, 0x8E	; 142
    119c:	87 2f       	mov	r24, r23
    119e:	76 2f       	mov	r23, r22
    11a0:	05 c0       	rjmp	.+10     	; 0x11ac <__floatsisf+0x5e>
    11a2:	66 23       	and	r22, r22
    11a4:	71 f0       	breq	.+28     	; 0x11c2 <__floatsisf+0x74>
    11a6:	96 e8       	ldi	r25, 0x86	; 134
    11a8:	86 2f       	mov	r24, r22
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	2a f0       	brmi	.+10     	; 0x11ba <__floatsisf+0x6c>
    11b0:	9a 95       	dec	r25
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	da f7       	brpl	.-10     	; 0x11b0 <__floatsisf+0x62>
    11ba:	88 0f       	add	r24, r24
    11bc:	96 95       	lsr	r25
    11be:	87 95       	ror	r24
    11c0:	97 f9       	bld	r25, 7
    11c2:	08 95       	ret

000011c4 <__fp_cmp>:
    11c4:	99 0f       	add	r25, r25
    11c6:	00 08       	sbc	r0, r0
    11c8:	55 0f       	add	r21, r21
    11ca:	aa 0b       	sbc	r26, r26
    11cc:	e0 e8       	ldi	r30, 0x80	; 128
    11ce:	fe ef       	ldi	r31, 0xFE	; 254
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	e8 07       	cpc	r30, r24
    11d6:	f9 07       	cpc	r31, r25
    11d8:	c0 f0       	brcs	.+48     	; 0x120a <__fp_cmp+0x46>
    11da:	12 16       	cp	r1, r18
    11dc:	13 06       	cpc	r1, r19
    11de:	e4 07       	cpc	r30, r20
    11e0:	f5 07       	cpc	r31, r21
    11e2:	98 f0       	brcs	.+38     	; 0x120a <__fp_cmp+0x46>
    11e4:	62 1b       	sub	r22, r18
    11e6:	73 0b       	sbc	r23, r19
    11e8:	84 0b       	sbc	r24, r20
    11ea:	95 0b       	sbc	r25, r21
    11ec:	39 f4       	brne	.+14     	; 0x11fc <__fp_cmp+0x38>
    11ee:	0a 26       	eor	r0, r26
    11f0:	61 f0       	breq	.+24     	; 0x120a <__fp_cmp+0x46>
    11f2:	23 2b       	or	r18, r19
    11f4:	24 2b       	or	r18, r20
    11f6:	25 2b       	or	r18, r21
    11f8:	21 f4       	brne	.+8      	; 0x1202 <__fp_cmp+0x3e>
    11fa:	08 95       	ret
    11fc:	0a 26       	eor	r0, r26
    11fe:	09 f4       	brne	.+2      	; 0x1202 <__fp_cmp+0x3e>
    1200:	a1 40       	sbci	r26, 0x01	; 1
    1202:	a6 95       	lsr	r26
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	81 1d       	adc	r24, r1
    1208:	81 1d       	adc	r24, r1
    120a:	08 95       	ret

0000120c <__fp_inf>:
    120c:	97 f9       	bld	r25, 7
    120e:	9f 67       	ori	r25, 0x7F	; 127
    1210:	80 e8       	ldi	r24, 0x80	; 128
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	08 95       	ret

00001218 <__fp_nan>:
    1218:	9f ef       	ldi	r25, 0xFF	; 255
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	08 95       	ret

0000121e <__fp_pscA>:
    121e:	00 24       	eor	r0, r0
    1220:	0a 94       	dec	r0
    1222:	16 16       	cp	r1, r22
    1224:	17 06       	cpc	r1, r23
    1226:	18 06       	cpc	r1, r24
    1228:	09 06       	cpc	r0, r25
    122a:	08 95       	ret

0000122c <__fp_pscB>:
    122c:	00 24       	eor	r0, r0
    122e:	0a 94       	dec	r0
    1230:	12 16       	cp	r1, r18
    1232:	13 06       	cpc	r1, r19
    1234:	14 06       	cpc	r1, r20
    1236:	05 06       	cpc	r0, r21
    1238:	08 95       	ret

0000123a <__fp_round>:
    123a:	09 2e       	mov	r0, r25
    123c:	03 94       	inc	r0
    123e:	00 0c       	add	r0, r0
    1240:	11 f4       	brne	.+4      	; 0x1246 <__fp_round+0xc>
    1242:	88 23       	and	r24, r24
    1244:	52 f0       	brmi	.+20     	; 0x125a <__fp_round+0x20>
    1246:	bb 0f       	add	r27, r27
    1248:	40 f4       	brcc	.+16     	; 0x125a <__fp_round+0x20>
    124a:	bf 2b       	or	r27, r31
    124c:	11 f4       	brne	.+4      	; 0x1252 <__fp_round+0x18>
    124e:	60 ff       	sbrs	r22, 0
    1250:	04 c0       	rjmp	.+8      	; 0x125a <__fp_round+0x20>
    1252:	6f 5f       	subi	r22, 0xFF	; 255
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	8f 4f       	sbci	r24, 0xFF	; 255
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	08 95       	ret

0000125c <__fp_split3>:
    125c:	57 fd       	sbrc	r21, 7
    125e:	90 58       	subi	r25, 0x80	; 128
    1260:	44 0f       	add	r20, r20
    1262:	55 1f       	adc	r21, r21
    1264:	59 f0       	breq	.+22     	; 0x127c <__fp_splitA+0x10>
    1266:	5f 3f       	cpi	r21, 0xFF	; 255
    1268:	71 f0       	breq	.+28     	; 0x1286 <__fp_splitA+0x1a>
    126a:	47 95       	ror	r20

0000126c <__fp_splitA>:
    126c:	88 0f       	add	r24, r24
    126e:	97 fb       	bst	r25, 7
    1270:	99 1f       	adc	r25, r25
    1272:	61 f0       	breq	.+24     	; 0x128c <__fp_splitA+0x20>
    1274:	9f 3f       	cpi	r25, 0xFF	; 255
    1276:	79 f0       	breq	.+30     	; 0x1296 <__fp_splitA+0x2a>
    1278:	87 95       	ror	r24
    127a:	08 95       	ret
    127c:	12 16       	cp	r1, r18
    127e:	13 06       	cpc	r1, r19
    1280:	14 06       	cpc	r1, r20
    1282:	55 1f       	adc	r21, r21
    1284:	f2 cf       	rjmp	.-28     	; 0x126a <__fp_split3+0xe>
    1286:	46 95       	lsr	r20
    1288:	f1 df       	rcall	.-30     	; 0x126c <__fp_splitA>
    128a:	08 c0       	rjmp	.+16     	; 0x129c <__fp_splitA+0x30>
    128c:	16 16       	cp	r1, r22
    128e:	17 06       	cpc	r1, r23
    1290:	18 06       	cpc	r1, r24
    1292:	99 1f       	adc	r25, r25
    1294:	f1 cf       	rjmp	.-30     	; 0x1278 <__fp_splitA+0xc>
    1296:	86 95       	lsr	r24
    1298:	71 05       	cpc	r23, r1
    129a:	61 05       	cpc	r22, r1
    129c:	08 94       	sec
    129e:	08 95       	ret

000012a0 <__fp_zero>:
    12a0:	e8 94       	clt

000012a2 <__fp_szero>:
    12a2:	bb 27       	eor	r27, r27
    12a4:	66 27       	eor	r22, r22
    12a6:	77 27       	eor	r23, r23
    12a8:	cb 01       	movw	r24, r22
    12aa:	97 f9       	bld	r25, 7
    12ac:	08 95       	ret

000012ae <__gesf2>:
    12ae:	8a df       	rcall	.-236    	; 0x11c4 <__fp_cmp>
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <__gesf2+0x6>
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	08 95       	ret

000012b6 <__mulsf3>:
    12b6:	0b d0       	rcall	.+22     	; 0x12ce <__mulsf3x>
    12b8:	c0 cf       	rjmp	.-128    	; 0x123a <__fp_round>
    12ba:	b1 df       	rcall	.-158    	; 0x121e <__fp_pscA>
    12bc:	28 f0       	brcs	.+10     	; 0x12c8 <__mulsf3+0x12>
    12be:	b6 df       	rcall	.-148    	; 0x122c <__fp_pscB>
    12c0:	18 f0       	brcs	.+6      	; 0x12c8 <__mulsf3+0x12>
    12c2:	95 23       	and	r25, r21
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <__mulsf3+0x12>
    12c6:	a2 cf       	rjmp	.-188    	; 0x120c <__fp_inf>
    12c8:	a7 cf       	rjmp	.-178    	; 0x1218 <__fp_nan>
    12ca:	11 24       	eor	r1, r1
    12cc:	ea cf       	rjmp	.-44     	; 0x12a2 <__fp_szero>

000012ce <__mulsf3x>:
    12ce:	c6 df       	rcall	.-116    	; 0x125c <__fp_split3>
    12d0:	a0 f3       	brcs	.-24     	; 0x12ba <__mulsf3+0x4>

000012d2 <__mulsf3_pse>:
    12d2:	95 9f       	mul	r25, r21
    12d4:	d1 f3       	breq	.-12     	; 0x12ca <__mulsf3+0x14>
    12d6:	95 0f       	add	r25, r21
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	55 1f       	adc	r21, r21
    12dc:	62 9f       	mul	r22, r18
    12de:	f0 01       	movw	r30, r0
    12e0:	72 9f       	mul	r23, r18
    12e2:	bb 27       	eor	r27, r27
    12e4:	f0 0d       	add	r31, r0
    12e6:	b1 1d       	adc	r27, r1
    12e8:	63 9f       	mul	r22, r19
    12ea:	aa 27       	eor	r26, r26
    12ec:	f0 0d       	add	r31, r0
    12ee:	b1 1d       	adc	r27, r1
    12f0:	aa 1f       	adc	r26, r26
    12f2:	64 9f       	mul	r22, r20
    12f4:	66 27       	eor	r22, r22
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	66 1f       	adc	r22, r22
    12fc:	82 9f       	mul	r24, r18
    12fe:	22 27       	eor	r18, r18
    1300:	b0 0d       	add	r27, r0
    1302:	a1 1d       	adc	r26, r1
    1304:	62 1f       	adc	r22, r18
    1306:	73 9f       	mul	r23, r19
    1308:	b0 0d       	add	r27, r0
    130a:	a1 1d       	adc	r26, r1
    130c:	62 1f       	adc	r22, r18
    130e:	83 9f       	mul	r24, r19
    1310:	a0 0d       	add	r26, r0
    1312:	61 1d       	adc	r22, r1
    1314:	22 1f       	adc	r18, r18
    1316:	74 9f       	mul	r23, r20
    1318:	33 27       	eor	r19, r19
    131a:	a0 0d       	add	r26, r0
    131c:	61 1d       	adc	r22, r1
    131e:	23 1f       	adc	r18, r19
    1320:	84 9f       	mul	r24, r20
    1322:	60 0d       	add	r22, r0
    1324:	21 1d       	adc	r18, r1
    1326:	82 2f       	mov	r24, r18
    1328:	76 2f       	mov	r23, r22
    132a:	6a 2f       	mov	r22, r26
    132c:	11 24       	eor	r1, r1
    132e:	9f 57       	subi	r25, 0x7F	; 127
    1330:	50 40       	sbci	r21, 0x00	; 0
    1332:	8a f0       	brmi	.+34     	; 0x1356 <__mulsf3_pse+0x84>
    1334:	e1 f0       	breq	.+56     	; 0x136e <__mulsf3_pse+0x9c>
    1336:	88 23       	and	r24, r24
    1338:	4a f0       	brmi	.+18     	; 0x134c <__mulsf3_pse+0x7a>
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	bb 1f       	adc	r27, r27
    1340:	66 1f       	adc	r22, r22
    1342:	77 1f       	adc	r23, r23
    1344:	88 1f       	adc	r24, r24
    1346:	91 50       	subi	r25, 0x01	; 1
    1348:	50 40       	sbci	r21, 0x00	; 0
    134a:	a9 f7       	brne	.-22     	; 0x1336 <__mulsf3_pse+0x64>
    134c:	9e 3f       	cpi	r25, 0xFE	; 254
    134e:	51 05       	cpc	r21, r1
    1350:	70 f0       	brcs	.+28     	; 0x136e <__mulsf3_pse+0x9c>
    1352:	5c cf       	rjmp	.-328    	; 0x120c <__fp_inf>
    1354:	a6 cf       	rjmp	.-180    	; 0x12a2 <__fp_szero>
    1356:	5f 3f       	cpi	r21, 0xFF	; 255
    1358:	ec f3       	brlt	.-6      	; 0x1354 <__mulsf3_pse+0x82>
    135a:	98 3e       	cpi	r25, 0xE8	; 232
    135c:	dc f3       	brlt	.-10     	; 0x1354 <__mulsf3_pse+0x82>
    135e:	86 95       	lsr	r24
    1360:	77 95       	ror	r23
    1362:	67 95       	ror	r22
    1364:	b7 95       	ror	r27
    1366:	f7 95       	ror	r31
    1368:	e7 95       	ror	r30
    136a:	9f 5f       	subi	r25, 0xFF	; 255
    136c:	c1 f7       	brne	.-16     	; 0x135e <__mulsf3_pse+0x8c>
    136e:	fe 2b       	or	r31, r30
    1370:	88 0f       	add	r24, r24
    1372:	91 1d       	adc	r25, r1
    1374:	96 95       	lsr	r25
    1376:	87 95       	ror	r24
    1378:	97 f9       	bld	r25, 7
    137a:	08 95       	ret

0000137c <__mulsi3>:
    137c:	62 9f       	mul	r22, r18
    137e:	d0 01       	movw	r26, r0
    1380:	73 9f       	mul	r23, r19
    1382:	f0 01       	movw	r30, r0
    1384:	82 9f       	mul	r24, r18
    1386:	e0 0d       	add	r30, r0
    1388:	f1 1d       	adc	r31, r1
    138a:	64 9f       	mul	r22, r20
    138c:	e0 0d       	add	r30, r0
    138e:	f1 1d       	adc	r31, r1
    1390:	92 9f       	mul	r25, r18
    1392:	f0 0d       	add	r31, r0
    1394:	83 9f       	mul	r24, r19
    1396:	f0 0d       	add	r31, r0
    1398:	74 9f       	mul	r23, r20
    139a:	f0 0d       	add	r31, r0
    139c:	65 9f       	mul	r22, r21
    139e:	f0 0d       	add	r31, r0
    13a0:	99 27       	eor	r25, r25
    13a2:	72 9f       	mul	r23, r18
    13a4:	b0 0d       	add	r27, r0
    13a6:	e1 1d       	adc	r30, r1
    13a8:	f9 1f       	adc	r31, r25
    13aa:	63 9f       	mul	r22, r19
    13ac:	b0 0d       	add	r27, r0
    13ae:	e1 1d       	adc	r30, r1
    13b0:	f9 1f       	adc	r31, r25
    13b2:	bd 01       	movw	r22, r26
    13b4:	cf 01       	movw	r24, r30
    13b6:	11 24       	eor	r1, r1
    13b8:	08 95       	ret

000013ba <__udivmodhi4>:
    13ba:	aa 1b       	sub	r26, r26
    13bc:	bb 1b       	sub	r27, r27
    13be:	51 e1       	ldi	r21, 0x11	; 17
    13c0:	07 c0       	rjmp	.+14     	; 0x13d0 <__udivmodhi4_ep>

000013c2 <__udivmodhi4_loop>:
    13c2:	aa 1f       	adc	r26, r26
    13c4:	bb 1f       	adc	r27, r27
    13c6:	a6 17       	cp	r26, r22
    13c8:	b7 07       	cpc	r27, r23
    13ca:	10 f0       	brcs	.+4      	; 0x13d0 <__udivmodhi4_ep>
    13cc:	a6 1b       	sub	r26, r22
    13ce:	b7 0b       	sbc	r27, r23

000013d0 <__udivmodhi4_ep>:
    13d0:	88 1f       	adc	r24, r24
    13d2:	99 1f       	adc	r25, r25
    13d4:	5a 95       	dec	r21
    13d6:	a9 f7       	brne	.-22     	; 0x13c2 <__udivmodhi4_loop>
    13d8:	80 95       	com	r24
    13da:	90 95       	com	r25
    13dc:	bc 01       	movw	r22, r24
    13de:	cd 01       	movw	r24, r26
    13e0:	08 95       	ret

000013e2 <__divmodsi4>:
    13e2:	97 fb       	bst	r25, 7
    13e4:	09 2e       	mov	r0, r25
    13e6:	05 26       	eor	r0, r21
    13e8:	0e d0       	rcall	.+28     	; 0x1406 <__divmodsi4_neg1>
    13ea:	57 fd       	sbrc	r21, 7
    13ec:	04 d0       	rcall	.+8      	; 0x13f6 <__divmodsi4_neg2>
    13ee:	14 d0       	rcall	.+40     	; 0x1418 <__udivmodsi4>
    13f0:	0a d0       	rcall	.+20     	; 0x1406 <__divmodsi4_neg1>
    13f2:	00 1c       	adc	r0, r0
    13f4:	38 f4       	brcc	.+14     	; 0x1404 <__divmodsi4_exit>

000013f6 <__divmodsi4_neg2>:
    13f6:	50 95       	com	r21
    13f8:	40 95       	com	r20
    13fa:	30 95       	com	r19
    13fc:	21 95       	neg	r18
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	4f 4f       	sbci	r20, 0xFF	; 255
    1402:	5f 4f       	sbci	r21, 0xFF	; 255

00001404 <__divmodsi4_exit>:
    1404:	08 95       	ret

00001406 <__divmodsi4_neg1>:
    1406:	f6 f7       	brtc	.-4      	; 0x1404 <__divmodsi4_exit>
    1408:	90 95       	com	r25
    140a:	80 95       	com	r24
    140c:	70 95       	com	r23
    140e:	61 95       	neg	r22
    1410:	7f 4f       	sbci	r23, 0xFF	; 255
    1412:	8f 4f       	sbci	r24, 0xFF	; 255
    1414:	9f 4f       	sbci	r25, 0xFF	; 255
    1416:	08 95       	ret

00001418 <__udivmodsi4>:
    1418:	a1 e2       	ldi	r26, 0x21	; 33
    141a:	1a 2e       	mov	r1, r26
    141c:	aa 1b       	sub	r26, r26
    141e:	bb 1b       	sub	r27, r27
    1420:	fd 01       	movw	r30, r26
    1422:	0d c0       	rjmp	.+26     	; 0x143e <__udivmodsi4_ep>

00001424 <__udivmodsi4_loop>:
    1424:	aa 1f       	adc	r26, r26
    1426:	bb 1f       	adc	r27, r27
    1428:	ee 1f       	adc	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	a2 17       	cp	r26, r18
    142e:	b3 07       	cpc	r27, r19
    1430:	e4 07       	cpc	r30, r20
    1432:	f5 07       	cpc	r31, r21
    1434:	20 f0       	brcs	.+8      	; 0x143e <__udivmodsi4_ep>
    1436:	a2 1b       	sub	r26, r18
    1438:	b3 0b       	sbc	r27, r19
    143a:	e4 0b       	sbc	r30, r20
    143c:	f5 0b       	sbc	r31, r21

0000143e <__udivmodsi4_ep>:
    143e:	66 1f       	adc	r22, r22
    1440:	77 1f       	adc	r23, r23
    1442:	88 1f       	adc	r24, r24
    1444:	99 1f       	adc	r25, r25
    1446:	1a 94       	dec	r1
    1448:	69 f7       	brne	.-38     	; 0x1424 <__udivmodsi4_loop>
    144a:	60 95       	com	r22
    144c:	70 95       	com	r23
    144e:	80 95       	com	r24
    1450:	90 95       	com	r25
    1452:	9b 01       	movw	r18, r22
    1454:	ac 01       	movw	r20, r24
    1456:	bd 01       	movw	r22, r26
    1458:	cf 01       	movw	r24, r30
    145a:	08 95       	ret

0000145c <_exit>:
    145c:	f8 94       	cli

0000145e <__stop_program>:
    145e:	ff cf       	rjmp	.-2      	; 0x145e <__stop_program>
