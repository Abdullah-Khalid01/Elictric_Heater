
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000f5c  00000ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800070  00800070  00001000  2**0
                  ALLOC
  3 .stab         00001ef0  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000707  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000035f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001419  00000000  00000000  000037b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069b  00000000  00000000  00004bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0b  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00005d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  00006110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b8b  00000000  00000000  000064fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 73 04 	call	0x8e6	; 0x8e6 <main>
  8a:	0c 94 ac 07 	jmp	0xf58	; 0xf58 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <segment7_init>:
#include <util/delay.h>
#define F_CPU 8000000

void segment7_init(void)
{
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN1, DIO_PIN_OUTPUT);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(DIO_PORTB, DIO_PIN2, DIO_PIN_OUTPUT);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPortDIR(DIO_PORTA, DIO_PORT_OUTPUT);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	6f ef       	ldi	r22, 0xFF	; 255
  aa:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_SetPortDIR>
	
	//DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
	//DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
}
  ae:	08 95       	ret

000000b0 <segment7_display>:
void segment7_display(uint8 num)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	uint8 temp=0;
	
	if (num<1 && num>=0)
  b4:	88 23       	and	r24, r24
  b6:	41 f5       	brne	.+80     	; 0x108 <segment7_display+0x58>
	{
		
		PORTA=0;
  b8:	1b ba       	out	0x1b, r1	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	89 ef       	ldi	r24, 0xF9	; 249
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <segment7_display+0x18>
  cc:	00 c0       	rjmp	.+0      	; 0xce <segment7_display+0x1e>
  ce:	00 00       	nop
		_delay_ms(1);
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	62 e0       	ldi	r22, 0x02	; 2
  d4:	40 e0       	ldi	r20, 0x00	; 0
  d6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
		DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_HIGH);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
		
		num*=10;
		PORTA=(num <<4);
  e4:	1b ba       	out	0x1b, r1	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	61 e0       	ldi	r22, 0x01	; 1
  ea:	41 e0       	ldi	r20, 0x01	; 1
  ec:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <segment7_display+0x44>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <segment7_display+0x4a>
  fa:	00 00       	nop
		_delay_ms(1);
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 106:	46 c0       	rjmp	.+140    	; 0x194 <segment7_display+0xe4>
		
		
		
		
	}
	else if (num >=10)
 108:	8a 30       	cpi	r24, 0x0A	; 10
 10a:	88 f1       	brcs	.+98     	; 0x16e <segment7_display+0xbe>
	{
		DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_LOW);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
		temp=num/10;
 116:	8c 2f       	mov	r24, r28
 118:	6a e0       	ldi	r22, 0x0A	; 10
 11a:	0e 94 63 07 	call	0xec6	; 0xec6 <__udivmodqi4>
 11e:	c9 2f       	mov	r28, r25
		num=num%10;
		PORTA=(temp <<4);
 120:	82 95       	swap	r24
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	8b bb       	out	0x1b, r24	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	41 e0       	ldi	r20, 0x01	; 1
 12c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 130:	89 ef       	ldi	r24, 0xF9	; 249
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <segment7_display+0x84>
 138:	00 c0       	rjmp	.+0      	; 0x13a <segment7_display+0x8a>
 13a:	00 00       	nop
		_delay_ms(1);
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_LOW);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
		
		
		PORTA=(num <<4);
 146:	c2 95       	swap	r28
 148:	c0 7f       	andi	r28, 0xF0	; 240
 14a:	cb bb       	out	0x1b, r28	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 156:	89 ef       	ldi	r24, 0xF9	; 249
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <segment7_display+0xaa>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <segment7_display+0xb0>
 160:	00 00       	nop
		_delay_ms(1);
		DIO_WritePIN(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	61 e0       	ldi	r22, 0x01	; 1
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 16c:	13 c0       	rjmp	.+38     	; 0x194 <segment7_display+0xe4>
		
		
	}
	else if (num>=1 && num <10 ||num==0)
	{
		DIO_WritePIN(DIO_PORTB, DIO_PIN3, DIO_PIN_LOW);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
		PORTA=(num<<4 );
 178:	c2 95       	swap	r28
 17a:	c0 7f       	andi	r28, 0xF0	; 240
 17c:	cb bb       	out	0x1b, r28	; 27
		DIO_WritePIN(DIO_PORTB, DIO_PIN2, DIO_PIN_HIGH);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	62 e0       	ldi	r22, 0x02	; 2
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 188:	87 ea       	ldi	r24, 0xA7	; 167
 18a:	91 e6       	ldi	r25, 0x61	; 97
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <segment7_display+0xdc>
 190:	00 c0       	rjmp	.+0      	; 0x192 <segment7_display+0xe2>
 192:	00 00       	nop
		
	}
	
	
	
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <DIO_SetPortDIR>:

#include "DIO.h"

void DIO_SetPortDIR(uint8 PORT , uint8 dir)
{
	switch (PORT)
 198:	81 30       	cpi	r24, 0x01	; 1
 19a:	49 f0       	breq	.+18     	; 0x1ae <DIO_SetPortDIR+0x16>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	28 f0       	brcs	.+10     	; 0x1aa <DIO_SetPortDIR+0x12>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	39 f0       	breq	.+14     	; 0x1b2 <DIO_SetPortDIR+0x1a>
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	41 f4       	brne	.+16     	; 0x1b8 <DIO_SetPortDIR+0x20>
 1a8:	06 c0       	rjmp	.+12     	; 0x1b6 <DIO_SetPortDIR+0x1e>
	{
		case DIO_PORTA:
		DDRA=dir;
 1aa:	6a bb       	out	0x1a, r22	; 26
		break;
 1ac:	08 95       	ret
		
		case DIO_PORTB:
		DDRB=dir;
 1ae:	67 bb       	out	0x17, r22	; 23
		break;
 1b0:	08 95       	ret
		
		case DIO_PORTC:
		DDRC=dir;
 1b2:	64 bb       	out	0x14, r22	; 20
		break;
 1b4:	08 95       	ret
		
		case DIO_PORTD:
		DDRD=dir;
 1b6:	61 bb       	out	0x11, r22	; 17
 1b8:	08 95       	ret

000001ba <DIO_SetPINDIR>:
		break;
	}
}
void DIO_SetPINDIR(uint8 PORT  , uint8 PIN , uint8 DIR)
{
	switch (DIR)
 1ba:	44 23       	and	r20, r20
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <DIO_SetPINDIR+0x6>
 1be:	41 c0       	rjmp	.+130    	; 0x242 <DIO_SetPINDIR+0x88>
 1c0:	41 30       	cpi	r20, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <DIO_SetPINDIR+0xc>
 1c4:	7e c0       	rjmp	.+252    	; 0x2c2 <DIO_SetPINDIR+0x108>
	{
		case DIO_PIN_OUTPUT:
		switch (PORT)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	a9 f0       	breq	.+42     	; 0x1f4 <DIO_SetPINDIR+0x3a>
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	30 f0       	brcs	.+12     	; 0x1da <DIO_SetPINDIR+0x20>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	f1 f0       	breq	.+60     	; 0x20e <DIO_SetPINDIR+0x54>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <DIO_SetPINDIR+0x1e>
 1d6:	75 c0       	rjmp	.+234    	; 0x2c2 <DIO_SetPINDIR+0x108>
 1d8:	27 c0       	rjmp	.+78     	; 0x228 <DIO_SetPINDIR+0x6e>
		{
			case DIO_PORTA:
			Set_bit(DDRA,PIN);
 1da:	2a b3       	in	r18, 0x1a	; 26
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	ac 01       	movw	r20, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_SetPINDIR+0x2e>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_SetPINDIR+0x2a>
 1ec:	ba 01       	movw	r22, r20
 1ee:	62 2b       	or	r22, r18
 1f0:	6a bb       	out	0x1a, r22	; 26
			break;
 1f2:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(DDRB,PIN);
 1f4:	27 b3       	in	r18, 0x17	; 23
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPINDIR+0x48>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPINDIR+0x44>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	67 bb       	out	0x17, r22	; 23
			break;
 20c:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(DDRC,PIN);
 20e:	24 b3       	in	r18, 0x14	; 20
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPINDIR+0x62>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPINDIR+0x5e>
 220:	ba 01       	movw	r22, r20
 222:	62 2b       	or	r22, r18
 224:	64 bb       	out	0x14, r22	; 20
			break;
 226:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(DDRD,PIN);
 228:	21 b3       	in	r18, 0x11	; 17
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	ac 01       	movw	r20, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPINDIR+0x7c>
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPINDIR+0x78>
 23a:	ba 01       	movw	r22, r20
 23c:	62 2b       	or	r22, r18
 23e:	61 bb       	out	0x11, r22	; 17
			break;
 240:	08 95       	ret
		}
		
		break;
		
		case DIO_PIN_INPUT:
		switch (PORT)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	a9 f0       	breq	.+42     	; 0x270 <DIO_SetPINDIR+0xb6>
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	28 f0       	brcs	.+10     	; 0x254 <DIO_SetPINDIR+0x9a>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	f9 f0       	breq	.+62     	; 0x28c <DIO_SetPINDIR+0xd2>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	c1 f5       	brne	.+112    	; 0x2c2 <DIO_SetPINDIR+0x108>
 252:	2a c0       	rjmp	.+84     	; 0x2a8 <DIO_SetPINDIR+0xee>
		{
			case DIO_PORTA:
			Clr_bit(DDRA,PIN);
 254:	2a b3       	in	r18, 0x1a	; 26
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPINDIR+0xa8>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPINDIR+0xa4>
 266:	ba 01       	movw	r22, r20
 268:	60 95       	com	r22
 26a:	62 23       	and	r22, r18
 26c:	6a bb       	out	0x1a, r22	; 26
			break;
 26e:	08 95       	ret
			
			case DIO_PORTB:
			Clr_bit(DDRB,PIN);
 270:	27 b3       	in	r18, 0x17	; 23
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_SetPINDIR+0xc4>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_SetPINDIR+0xc0>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	67 bb       	out	0x17, r22	; 23
			break;
 28a:	08 95       	ret
			
			case DIO_PORTC:
			Clr_bit(DDRC,PIN);
 28c:	24 b3       	in	r18, 0x14	; 20
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPINDIR+0xe0>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPINDIR+0xdc>
 29e:	ba 01       	movw	r22, r20
 2a0:	60 95       	com	r22
 2a2:	62 23       	and	r22, r18
 2a4:	64 bb       	out	0x14, r22	; 20
			break;
 2a6:	08 95       	ret
			
			case DIO_PORTD:
			Clr_bit(DDRD,PIN);
 2a8:	21 b3       	in	r18, 0x11	; 17
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_SetPINDIR+0xfc>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_SetPINDIR+0xf8>
 2ba:	ba 01       	movw	r22, r20
 2bc:	60 95       	com	r22
 2be:	62 23       	and	r22, r18
 2c0:	61 bb       	out	0x11, r22	; 17
 2c2:	08 95       	ret

000002c4 <DIO_WritePort>:
	}
}

void DIO_WritePort(uint8 PORT , uint8 val)
{
	switch (PORT)
 2c4:	81 30       	cpi	r24, 0x01	; 1
 2c6:	49 f0       	breq	.+18     	; 0x2da <DIO_WritePort+0x16>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	28 f0       	brcs	.+10     	; 0x2d6 <DIO_WritePort+0x12>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	39 f0       	breq	.+14     	; 0x2de <DIO_WritePort+0x1a>
 2d0:	83 30       	cpi	r24, 0x03	; 3
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <DIO_WritePort+0x20>
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <DIO_WritePort+0x1e>
	{
	case DIO_PORTA:
	PORTA = val;
 2d6:	6b bb       	out	0x1b, r22	; 27
	break;
 2d8:	08 95       	ret
	
	case DIO_PORTB:
	PORTB = val;
 2da:	68 bb       	out	0x18, r22	; 24
	break;
 2dc:	08 95       	ret
	
	case DIO_PORTC:
	PORTC = val;
 2de:	65 bb       	out	0x15, r22	; 21
	break;
 2e0:	08 95       	ret
	
	case DIO_PORTD:
	PORTD = val;
 2e2:	62 bb       	out	0x12, r22	; 18
 2e4:	08 95       	ret

000002e6 <DIO_WritePIN>:
	break;
	}
}
void DIO_WritePIN(uint8 PORT , uint8 PIN ,uint8 val)
{
	switch (val)
 2e6:	44 23       	and	r20, r20
 2e8:	09 f4       	brne	.+2      	; 0x2ec <DIO_WritePIN+0x6>
 2ea:	41 c0       	rjmp	.+130    	; 0x36e <DIO_WritePIN+0x88>
 2ec:	41 30       	cpi	r20, 0x01	; 1
 2ee:	09 f0       	breq	.+2      	; 0x2f2 <DIO_WritePIN+0xc>
 2f0:	7e c0       	rjmp	.+252    	; 0x3ee <DIO_WritePIN+0x108>
	{
		case DIO_PIN_HIGH:
		switch (PORT)
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	a9 f0       	breq	.+42     	; 0x320 <DIO_WritePIN+0x3a>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	30 f0       	brcs	.+12     	; 0x306 <DIO_WritePIN+0x20>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	f1 f0       	breq	.+60     	; 0x33a <DIO_WritePIN+0x54>
 2fe:	83 30       	cpi	r24, 0x03	; 3
 300:	09 f0       	breq	.+2      	; 0x304 <DIO_WritePIN+0x1e>
 302:	75 c0       	rjmp	.+234    	; 0x3ee <DIO_WritePIN+0x108>
 304:	27 c0       	rjmp	.+78     	; 0x354 <DIO_WritePIN+0x6e>
		{
			case DIO_PORTA:
			Set_bit(PORTA,PIN);
 306:	2b b3       	in	r18, 0x1b	; 27
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	ac 01       	movw	r20, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_WritePIN+0x2e>
 310:	44 0f       	add	r20, r20
 312:	55 1f       	adc	r21, r21
 314:	6a 95       	dec	r22
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_WritePIN+0x2a>
 318:	ba 01       	movw	r22, r20
 31a:	62 2b       	or	r22, r18
 31c:	6b bb       	out	0x1b, r22	; 27
			break;
 31e:	08 95       	ret
			
			case DIO_PORTB:
			Set_bit(PORTB,PIN);
 320:	28 b3       	in	r18, 0x18	; 24
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	ac 01       	movw	r20, r24
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_WritePIN+0x48>
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_WritePIN+0x44>
 332:	ba 01       	movw	r22, r20
 334:	62 2b       	or	r22, r18
 336:	68 bb       	out	0x18, r22	; 24
			break;
 338:	08 95       	ret
			
			case DIO_PORTC:
			Set_bit(PORTC,PIN);
 33a:	25 b3       	in	r18, 0x15	; 21
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_WritePIN+0x62>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_WritePIN+0x5e>
 34c:	ba 01       	movw	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	65 bb       	out	0x15, r22	; 21
			break;
 352:	08 95       	ret
			
			case DIO_PORTD:
			Set_bit(PORTD,PIN);
 354:	22 b3       	in	r18, 0x12	; 18
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	ac 01       	movw	r20, r24
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_WritePIN+0x7c>
 35e:	44 0f       	add	r20, r20
 360:	55 1f       	adc	r21, r21
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_WritePIN+0x78>
 366:	ba 01       	movw	r22, r20
 368:	62 2b       	or	r22, r18
 36a:	62 bb       	out	0x12, r22	; 18
			break;
 36c:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW:
		switch (PORT)
 36e:	81 30       	cpi	r24, 0x01	; 1
 370:	a9 f0       	breq	.+42     	; 0x39c <DIO_WritePIN+0xb6>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	28 f0       	brcs	.+10     	; 0x380 <DIO_WritePIN+0x9a>
 376:	82 30       	cpi	r24, 0x02	; 2
 378:	f9 f0       	breq	.+62     	; 0x3b8 <DIO_WritePIN+0xd2>
 37a:	83 30       	cpi	r24, 0x03	; 3
 37c:	c1 f5       	brne	.+112    	; 0x3ee <DIO_WritePIN+0x108>
 37e:	2a c0       	rjmp	.+84     	; 0x3d4 <DIO_WritePIN+0xee>
		{
		case DIO_PORTA:
		Clr_bit(PORTA,PIN);
 380:	2b b3       	in	r18, 0x1b	; 27
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_WritePIN+0xa8>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_WritePIN+0xa4>
 392:	ba 01       	movw	r22, r20
 394:	60 95       	com	r22
 396:	62 23       	and	r22, r18
 398:	6b bb       	out	0x1b, r22	; 27
		break;
 39a:	08 95       	ret
		
		case DIO_PORTB:
		Clr_bit(PORTB,PIN);
 39c:	28 b3       	in	r18, 0x18	; 24
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_WritePIN+0xc4>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_WritePIN+0xc0>
 3ae:	ba 01       	movw	r22, r20
 3b0:	60 95       	com	r22
 3b2:	62 23       	and	r22, r18
 3b4:	68 bb       	out	0x18, r22	; 24
		break;
 3b6:	08 95       	ret
		
		case DIO_PORTC:
		Clr_bit(PORTC,PIN);
 3b8:	25 b3       	in	r18, 0x15	; 21
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	ac 01       	movw	r20, r24
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_WritePIN+0xe0>
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	6a 95       	dec	r22
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_WritePIN+0xdc>
 3ca:	ba 01       	movw	r22, r20
 3cc:	60 95       	com	r22
 3ce:	62 23       	and	r22, r18
 3d0:	65 bb       	out	0x15, r22	; 21
		break;
 3d2:	08 95       	ret
		
		case DIO_PORTD:
		Clr_bit(PORTD,PIN);
 3d4:	22 b3       	in	r18, 0x12	; 18
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	ac 01       	movw	r20, r24
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_WritePIN+0xfc>
 3de:	44 0f       	add	r20, r20
 3e0:	55 1f       	adc	r21, r21
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_WritePIN+0xf8>
 3e6:	ba 01       	movw	r22, r20
 3e8:	60 95       	com	r22
 3ea:	62 23       	and	r22, r18
 3ec:	62 bb       	out	0x12, r22	; 18
 3ee:	08 95       	ret

000003f0 <DIO_ReadPort>:
	
}

void DIO_ReadPort(uint8 PORT , uint8*val)
{
	switch (PORT)
 3f0:	81 30       	cpi	r24, 0x01	; 1
 3f2:	59 f0       	breq	.+22     	; 0x40a <DIO_ReadPort+0x1a>
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	28 f0       	brcs	.+10     	; 0x402 <DIO_ReadPort+0x12>
 3f8:	82 30       	cpi	r24, 0x02	; 2
 3fa:	59 f0       	breq	.+22     	; 0x412 <DIO_ReadPort+0x22>
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	81 f4       	brne	.+32     	; 0x420 <DIO_ReadPort+0x30>
 400:	0c c0       	rjmp	.+24     	; 0x41a <DIO_ReadPort+0x2a>
	{
		case DIO_PORTA:
		*val=PINA;
 402:	89 b3       	in	r24, 0x19	; 25
 404:	fb 01       	movw	r30, r22
 406:	80 83       	st	Z, r24
		break;
 408:	08 95       	ret
		
		case DIO_PORTB:
		*val=PINB;
 40a:	86 b3       	in	r24, 0x16	; 22
 40c:	fb 01       	movw	r30, r22
 40e:	80 83       	st	Z, r24
		break;
 410:	08 95       	ret
		
		case DIO_PORTC:
		*val=PINC;
 412:	83 b3       	in	r24, 0x13	; 19
 414:	fb 01       	movw	r30, r22
 416:	80 83       	st	Z, r24
		break;
 418:	08 95       	ret
		
		case DIO_PORTD:
		*val=PIND;
 41a:	80 b3       	in	r24, 0x10	; 16
 41c:	fb 01       	movw	r30, r22
 41e:	80 83       	st	Z, r24
 420:	08 95       	ret

00000422 <DIO_ReadPin>:
		break;
	}
}
void DIO_ReadPin(uint8 PORT ,uint8 PIN , uint8* val)
{
	switch(PORT)
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	a1 f0       	breq	.+40     	; 0x44e <DIO_ReadPin+0x2c>
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	28 f0       	brcs	.+10     	; 0x434 <DIO_ReadPin+0x12>
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	e9 f0       	breq	.+58     	; 0x468 <DIO_ReadPin+0x46>
 42e:	83 30       	cpi	r24, 0x03	; 3
 430:	a1 f5       	brne	.+104    	; 0x49a <DIO_ReadPin+0x78>
 432:	27 c0       	rjmp	.+78     	; 0x482 <DIO_ReadPin+0x60>
	{
		case DIO_PORTA:
		*val=Get_bit(PINA,PIN);
 434:	89 b3       	in	r24, 0x19	; 25
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	9c 01       	movw	r18, r24
 43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_ReadPin+0x1e>
 43c:	35 95       	asr	r19
 43e:	27 95       	ror	r18
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_ReadPin+0x1a>
 444:	b9 01       	movw	r22, r18
 446:	61 70       	andi	r22, 0x01	; 1
 448:	fa 01       	movw	r30, r20
 44a:	60 83       	st	Z, r22
		break;
 44c:	08 95       	ret
		
		case DIO_PORTB:
		*val=Get_bit(PINB,PIN);
 44e:	86 b3       	in	r24, 0x16	; 22
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	9c 01       	movw	r18, r24
 454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_ReadPin+0x38>
 456:	35 95       	asr	r19
 458:	27 95       	ror	r18
 45a:	6a 95       	dec	r22
 45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_ReadPin+0x34>
 45e:	b9 01       	movw	r22, r18
 460:	61 70       	andi	r22, 0x01	; 1
 462:	fa 01       	movw	r30, r20
 464:	60 83       	st	Z, r22
		break;
 466:	08 95       	ret
		
		case DIO_PORTC:
		*val=Get_bit(PINC,PIN);
 468:	83 b3       	in	r24, 0x13	; 19
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	9c 01       	movw	r18, r24
 46e:	02 c0       	rjmp	.+4      	; 0x474 <DIO_ReadPin+0x52>
 470:	35 95       	asr	r19
 472:	27 95       	ror	r18
 474:	6a 95       	dec	r22
 476:	e2 f7       	brpl	.-8      	; 0x470 <DIO_ReadPin+0x4e>
 478:	b9 01       	movw	r22, r18
 47a:	61 70       	andi	r22, 0x01	; 1
 47c:	fa 01       	movw	r30, r20
 47e:	60 83       	st	Z, r22
		break;
 480:	08 95       	ret
		
		case DIO_PORTD:
		*val=Get_bit(PIND,PIN);
 482:	80 b3       	in	r24, 0x10	; 16
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	9c 01       	movw	r18, r24
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_ReadPin+0x6c>
 48a:	35 95       	asr	r19
 48c:	27 95       	ror	r18
 48e:	6a 95       	dec	r22
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_ReadPin+0x68>
 492:	b9 01       	movw	r22, r18
 494:	61 70       	andi	r22, 0x01	; 1
 496:	fa 01       	movw	r30, r20
 498:	60 83       	st	Z, r22
 49a:	08 95       	ret

0000049c <DIO_togglePin>:
	}
}

void DIO_togglePin(uint8 PORT , uint8 PIN)
{
	switch (PORT)
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	a1 f0       	breq	.+40     	; 0x4c8 <DIO_togglePin+0x2c>
 4a0:	81 30       	cpi	r24, 0x01	; 1
 4a2:	28 f0       	brcs	.+10     	; 0x4ae <DIO_togglePin+0x12>
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	e9 f0       	breq	.+58     	; 0x4e2 <DIO_togglePin+0x46>
 4a8:	83 30       	cpi	r24, 0x03	; 3
 4aa:	a1 f5       	brne	.+104    	; 0x514 <DIO_togglePin+0x78>
 4ac:	27 c0       	rjmp	.+78     	; 0x4fc <DIO_togglePin+0x60>
	{
		case DIO_PORTA:
		toggle_bit(PORTA,PIN);
 4ae:	2b b3       	in	r18, 0x1b	; 27
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	ac 01       	movw	r20, r24
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_togglePin+0x20>
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_togglePin+0x1c>
 4c0:	ba 01       	movw	r22, r20
 4c2:	62 27       	eor	r22, r18
 4c4:	6b bb       	out	0x1b, r22	; 27
		break;
 4c6:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB,PIN);
 4c8:	28 b3       	in	r18, 0x18	; 24
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	ac 01       	movw	r20, r24
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_togglePin+0x3a>
 4d2:	44 0f       	add	r20, r20
 4d4:	55 1f       	adc	r21, r21
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_togglePin+0x36>
 4da:	ba 01       	movw	r22, r20
 4dc:	62 27       	eor	r22, r18
 4de:	68 bb       	out	0x18, r22	; 24
		break;
 4e0:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC,PIN);
 4e2:	25 b3       	in	r18, 0x15	; 21
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	ac 01       	movw	r20, r24
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_togglePin+0x54>
 4ec:	44 0f       	add	r20, r20
 4ee:	55 1f       	adc	r21, r21
 4f0:	6a 95       	dec	r22
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_togglePin+0x50>
 4f4:	ba 01       	movw	r22, r20
 4f6:	62 27       	eor	r22, r18
 4f8:	65 bb       	out	0x15, r22	; 21
		break;
 4fa:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD,PIN);
 4fc:	22 b3       	in	r18, 0x12	; 18
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	ac 01       	movw	r20, r24
 504:	02 c0       	rjmp	.+4      	; 0x50a <DIO_togglePin+0x6e>
 506:	44 0f       	add	r20, r20
 508:	55 1f       	adc	r21, r21
 50a:	6a 95       	dec	r22
 50c:	e2 f7       	brpl	.-8      	; 0x506 <DIO_togglePin+0x6a>
 50e:	ba 01       	movw	r22, r20
 510:	62 27       	eor	r22, r18
 512:	62 bb       	out	0x12, r22	; 18
 514:	08 95       	ret

00000516 <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(0x02);	
	
	#endif
}
void LCD_WRITE_COMMAND(uint8 cmd)
{
 516:	cf 93       	push	r28
 518:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_LOW) ;
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	63 e0       	ldi	r22, 0x03	; 3
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	
	PORTA = (cmd & 0xF0) | (PORTA & 0x0F);
 538:	8b b3       	in	r24, 0x1b	; 27
 53a:	9c 2f       	mov	r25, r28
 53c:	90 7f       	andi	r25, 0xF0	; 240
 53e:	8f 70       	andi	r24, 0x0F	; 15
 540:	89 2b       	or	r24, r25
 542:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	63 e0       	ldi	r22, 0x03	; 3
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 54e:	8f e9       	ldi	r24, 0x9F	; 159
 550:	9f e0       	ldi	r25, 0x0F	; 15
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <LCD_WRITE_COMMAND+0x3c>
 556:	00 c0       	rjmp	.+0      	; 0x558 <LCD_WRITE_COMMAND+0x42>
 558:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	63 e0       	ldi	r22, 0x03	; 3
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	
	PORTA = (cmd <<4) | (PORTA & 0x0F);
 564:	8b b3       	in	r24, 0x1b	; 27
 566:	c2 95       	swap	r28
 568:	c0 7f       	andi	r28, 0xF0	; 240
 56a:	8f 70       	andi	r24, 0x0F	; 15
 56c:	c8 2b       	or	r28, r24
 56e:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	63 e0       	ldi	r22, 0x03	; 3
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 57a:	8f e9       	ldi	r24, 0x9F	; 159
 57c:	9f e0       	ldi	r25, 0x0F	; 15
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCD_WRITE_COMMAND+0x68>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCD_WRITE_COMMAND+0x6e>
 584:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	63 e0       	ldi	r22, 0x03	; 3
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 590:	8f e1       	ldi	r24, 0x1F	; 31
 592:	9e e4       	ldi	r25, 0x4E	; 78
 594:	01 97       	sbiw	r24, 0x01	; 1
 596:	f1 f7       	brne	.-4      	; 0x594 <LCD_WRITE_COMMAND+0x7e>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_WRITE_COMMAND+0x84>
 59a:	00 00       	nop
	
	_delay_ms(5);
	
	#endif 
	
}
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <LCD_INIT>:
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_OUTPUT) ;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	41 e0       	ldi	r20, 0x01	; 1
 5a6:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_OUTPUT) ;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	62 e0       	ldi	r22, 0x02	; 2
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_OUTPUT) ;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	63 e0       	ldi	r22, 0x03	; 3
 5b8:	41 e0       	ldi	r20, 0x01	; 1
 5ba:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	
	
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D4,DIO_PIN_OUTPUT);
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	64 e0       	ldi	r22, 0x04	; 4
 5c2:	41 e0       	ldi	r20, 0x01	; 1
 5c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D5,DIO_PIN_OUTPUT);
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	65 e0       	ldi	r22, 0x05	; 5
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D6,DIO_PIN_OUTPUT);
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	66 e0       	ldi	r22, 0x06	; 6
 5d6:	41 e0       	ldi	r20, 0x01	; 1
 5d8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
	DIO_SetPINDIR(LCD_4BIT_DATA_PORT,LCD_D7,DIO_PIN_OUTPUT);
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	67 e0       	ldi	r22, 0x07	; 7
 5e0:	41 e0       	ldi	r20, 0x01	; 1
 5e2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
 5e6:	8f ef       	ldi	r24, 0xFF	; 255
 5e8:	91 ee       	ldi	r25, 0xE1	; 225
 5ea:	a4 e0       	ldi	r26, 0x04	; 4
 5ec:	81 50       	subi	r24, 0x01	; 1
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	a0 40       	sbci	r26, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <LCD_INIT+0x4c>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <LCD_INIT+0x56>
 5f6:	00 00       	nop
	
	_delay_ms(100);
	
	LCD_WRITE_COMMAND(0x33);
 5f8:	83 e3       	ldi	r24, 0x33	; 51
 5fa:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x32);
 5fe:	82 e3       	ldi	r24, 0x32	; 50
 600:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x28);
 604:	88 e2       	ldi	r24, 0x28	; 40
 606:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x0E);
 60a:	8e e0       	ldi	r24, 0x0E	; 14
 60c:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x01);
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0x02);	
 616:	82 e0       	ldi	r24, 0x02	; 2
 618:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
	
	#endif
}
 61c:	08 95       	ret

0000061e <LCD_WRITE_CHARACHTER>:
	
	#endif 
	
}
void LCD_WRITE_CHARACHTER(uint8 chr)
{
 61e:	cf 93       	push	r28
 620:	c8 2f       	mov	r28, r24
	
	_delay_ms(5);
	
	#elif LCD_MODE==4
	
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RS , DIO_PIN_HIGH) ;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	41 e0       	ldi	r20, 0x01	; 1
 628:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_RW , DIO_PIN_LOW) ;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	DIO_WritePIN(LCD_8BIT_CMD_PORT , LCD_E  , DIO_PIN_LOW) ;
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	63 e0       	ldi	r22, 0x03	; 3
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	
	PORTA = (chr & 0xF0);
 640:	8c 2f       	mov	r24, r28
 642:	80 7f       	andi	r24, 0xF0	; 240
 644:	8b bb       	out	0x1b, r24	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	63 e0       	ldi	r22, 0x03	; 3
 64a:	41 e0       	ldi	r20, 0x01	; 1
 64c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 650:	8f e9       	ldi	r24, 0x9F	; 159
 652:	9f e0       	ldi	r25, 0x0F	; 15
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <LCD_WRITE_CHARACHTER+0x36>
 658:	00 c0       	rjmp	.+0      	; 0x65a <LCD_WRITE_CHARACHTER+0x3c>
 65a:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	63 e0       	ldi	r22, 0x03	; 3
 660:	40 e0       	ldi	r20, 0x00	; 0
 662:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
	
	PORTA = (chr <<4);
 666:	c2 95       	swap	r28
 668:	c0 7f       	andi	r28, 0xF0	; 240
 66a:	cb bb       	out	0x1b, r28	; 27
	
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_HIGH);
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	63 e0       	ldi	r22, 0x03	; 3
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 676:	8f e9       	ldi	r24, 0x9F	; 159
 678:	9f e0       	ldi	r25, 0x0F	; 15
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	f1 f7       	brne	.-4      	; 0x67a <LCD_WRITE_CHARACHTER+0x5c>
 67e:	00 c0       	rjmp	.+0      	; 0x680 <LCD_WRITE_CHARACHTER+0x62>
 680:	00 00       	nop
	_delay_ms(1);
	DIO_WritePIN(LCD_4BIT_CMD_PORT ,LCD_E, DIO_PIN_LOW);
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	40 e0       	ldi	r20, 0x00	; 0
 688:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
 68c:	8f e1       	ldi	r24, 0x1F	; 31
 68e:	9e e4       	ldi	r25, 0x4E	; 78
 690:	01 97       	sbiw	r24, 0x01	; 1
 692:	f1 f7       	brne	.-4      	; 0x690 <LCD_WRITE_CHARACHTER+0x72>
 694:	00 c0       	rjmp	.+0      	; 0x696 <LCD_WRITE_CHARACHTER+0x78>
 696:	00 00       	nop
	
	_delay_ms(5);
	
	#endif
}
 698:	cf 91       	pop	r28
 69a:	08 95       	ret

0000069c <LCD_WriteString>:
void LCD_WriteString(uint8 *str)
{
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	8c 01       	movw	r16, r24
	uint8 i=0;
	while(str[i] != '\0')
 6a4:	fc 01       	movw	r30, r24
 6a6:	80 81       	ld	r24, Z
 6a8:	88 23       	and	r24, r24
 6aa:	51 f0       	breq	.+20     	; 0x6c0 <LCD_WriteString+0x24>
	
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
 6ac:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != '\0')
	{
		LCD_WRITE_CHARACHTER(str[i]);
 6ae:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_WRITE_CHARACHTER>
		i++;
 6b2:	cf 5f       	subi	r28, 0xFF	; 255
	#endif
}
void LCD_WriteString(uint8 *str)
{
	uint8 i=0;
	while(str[i] != '\0')
 6b4:	f8 01       	movw	r30, r16
 6b6:	ec 0f       	add	r30, r28
 6b8:	f1 1d       	adc	r31, r1
 6ba:	80 81       	ld	r24, Z
 6bc:	88 23       	and	r24, r24
 6be:	b9 f7       	brne	.-18     	; 0x6ae <LCD_WriteString+0x12>
	{
		LCD_WRITE_CHARACHTER(str[i]);
		i++;
	}
}
 6c0:	cf 91       	pop	r28
 6c2:	1f 91       	pop	r17
 6c4:	0f 91       	pop	r16
 6c6:	08 95       	ret

000006c8 <LCD_CLEAR>:
void LCD_CLEAR(void)
{
	LCD_WRITE_COMMAND(0x01);
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
}
 6ce:	08 95       	ret

000006d0 <LCD_MoveTo>:
void LCD_MoveTo(uint8 row , uint8 col)
{
 6d0:	cf 93       	push	r28
 6d2:	df 93       	push	r29
 6d4:	00 d0       	rcall	.+0      	; 0x6d6 <LCD_MoveTo+0x6>
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
          uint8 pos[2] = {0x80 , 0xC0};
 6da:	90 e8       	ldi	r25, 0x80	; 128
 6dc:	99 83       	std	Y+1, r25	; 0x01
 6de:	90 ec       	ldi	r25, 0xC0	; 192
 6e0:	9a 83       	std	Y+2, r25	; 0x02

          LCD_WRITE_COMMAND(pos[row]+col);
 6e2:	fe 01       	movw	r30, r28
 6e4:	e8 0f       	add	r30, r24
 6e6:	f1 1d       	adc	r31, r1
 6e8:	81 81       	ldd	r24, Z+1	; 0x01
 6ea:	86 0f       	add	r24, r22
 6ec:	0e 94 8b 02 	call	0x516	; 0x516 <LCD_WRITE_COMMAND>
}
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	08 95       	ret

000006fa <LCD_WriteInteger>:
void LCD_WriteInteger(sint32 num)
{
 6fa:	4f 92       	push	r4
 6fc:	5f 92       	push	r5
 6fe:	6f 92       	push	r6
 700:	7f 92       	push	r7
 702:	8f 92       	push	r8
 704:	9f 92       	push	r9
 706:	af 92       	push	r10
 708:	bf 92       	push	r11
 70a:	cf 92       	push	r12
 70c:	df 92       	push	r13
 70e:	ef 92       	push	r14
 710:	ff 92       	push	r15
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	6b 01       	movw	r12, r22
 718:	7c 01       	movw	r14, r24
	sint32 temp =1;
	if(num < 0)
 71a:	99 23       	and	r25, r25
 71c:	5c f4       	brge	.+22     	; 0x734 <LCD_WriteInteger+0x3a>
	{
		LCD_WRITE_CHARACHTER('-');
 71e:	8d e2       	ldi	r24, 0x2D	; 45
 720:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_WRITE_CHARACHTER>
		num *= -1;
 724:	f0 94       	com	r15
 726:	e0 94       	com	r14
 728:	d0 94       	com	r13
 72a:	c0 94       	com	r12
 72c:	c1 1c       	adc	r12, r1
 72e:	d1 1c       	adc	r13, r1
 730:	e1 1c       	adc	r14, r1
 732:	f1 1c       	adc	r15, r1
	}
	
	while (num != 0)
 734:	c1 14       	cp	r12, r1
 736:	d1 04       	cpc	r13, r1
 738:	e1 04       	cpc	r14, r1
 73a:	f1 04       	cpc	r15, r1
 73c:	09 f4       	brne	.+2      	; 0x740 <LCD_WriteInteger+0x46>
 73e:	4f c0       	rjmp	.+158    	; 0x7de <LCD_WriteInteger+0xe4>
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	a0 e0       	ldi	r26, 0x00	; 0
 746:	b0 e0       	ldi	r27, 0x00	; 0
	{
		
		temp = (temp *10) +num %10;
 748:	0f 2e       	mov	r0, r31
 74a:	fa e0       	ldi	r31, 0x0A	; 10
 74c:	8f 2e       	mov	r8, r31
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	9f 2e       	mov	r9, r31
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	af 2e       	mov	r10, r31
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	bf 2e       	mov	r11, r31
 75a:	f0 2d       	mov	r31, r0
 75c:	bc 01       	movw	r22, r24
 75e:	cd 01       	movw	r24, r26
 760:	a5 01       	movw	r20, r10
 762:	94 01       	movw	r18, r8
 764:	0e 94 44 07 	call	0xe88	; 0xe88 <__mulsi3>
 768:	2b 01       	movw	r4, r22
 76a:	3c 01       	movw	r6, r24
 76c:	c7 01       	movw	r24, r14
 76e:	b6 01       	movw	r22, r12
 770:	0e 94 6f 07 	call	0xede	; 0xede <__divmodsi4>
 774:	dc 01       	movw	r26, r24
 776:	cb 01       	movw	r24, r22
 778:	84 0d       	add	r24, r4
 77a:	95 1d       	adc	r25, r5
 77c:	a6 1d       	adc	r26, r6
 77e:	b7 1d       	adc	r27, r7
		num=num/10;
 780:	c2 2e       	mov	r12, r18
 782:	d3 2e       	mov	r13, r19
 784:	e4 2e       	mov	r14, r20
 786:	f5 2e       	mov	r15, r21
	{
		LCD_WRITE_CHARACHTER('-');
		num *= -1;
	}
	
	while (num != 0)
 788:	c1 14       	cp	r12, r1
 78a:	d1 04       	cpc	r13, r1
 78c:	e1 04       	cpc	r14, r1
 78e:	f1 04       	cpc	r15, r1
 790:	29 f7       	brne	.-54     	; 0x75c <LCD_WriteInteger+0x62>
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 792:	82 30       	cpi	r24, 0x02	; 2
 794:	91 05       	cpc	r25, r1
 796:	a1 05       	cpc	r26, r1
 798:	b1 05       	cpc	r27, r1
 79a:	0c f1       	brlt	.+66     	; 0x7de <LCD_WriteInteger+0xe4>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
 79c:	0f 2e       	mov	r0, r31
 79e:	fa e0       	ldi	r31, 0x0A	; 10
 7a0:	4f 2e       	mov	r4, r31
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	5f 2e       	mov	r5, r31
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	6f 2e       	mov	r6, r31
 7aa:	f0 e0       	ldi	r31, 0x00	; 0
 7ac:	7f 2e       	mov	r7, r31
 7ae:	f0 2d       	mov	r31, r0
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	a3 01       	movw	r20, r6
 7b6:	92 01       	movw	r18, r4
 7b8:	0e 94 6f 07 	call	0xede	; 0xede <__divmodsi4>
 7bc:	82 2e       	mov	r8, r18
 7be:	c3 2e       	mov	r12, r19
 7c0:	c4 2f       	mov	r28, r20
 7c2:	d5 2f       	mov	r29, r21
 7c4:	86 2f       	mov	r24, r22
 7c6:	80 5d       	subi	r24, 0xD0	; 208
 7c8:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_WRITE_CHARACHTER>
		temp/=10;
 7cc:	88 2d       	mov	r24, r8
 7ce:	9c 2d       	mov	r25, r12
 7d0:	ac 2f       	mov	r26, r28
 7d2:	bd 2f       	mov	r27, r29
	{
		
		temp = (temp *10) +num %10;
		num=num/10;
	}
	while (temp>1)
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	91 05       	cpc	r25, r1
 7d8:	a1 05       	cpc	r26, r1
 7da:	b1 05       	cpc	r27, r1
 7dc:	4c f7       	brge	.-46     	; 0x7b0 <LCD_WriteInteger+0xb6>
	{
		LCD_WRITE_CHARACHTER((temp)%10+48);
		temp/=10;
	}
}
 7de:	df 91       	pop	r29
 7e0:	cf 91       	pop	r28
 7e2:	ff 90       	pop	r15
 7e4:	ef 90       	pop	r14
 7e6:	df 90       	pop	r13
 7e8:	cf 90       	pop	r12
 7ea:	bf 90       	pop	r11
 7ec:	af 90       	pop	r10
 7ee:	9f 90       	pop	r9
 7f0:	8f 90       	pop	r8
 7f2:	7f 90       	pop	r7
 7f4:	6f 90       	pop	r6
 7f6:	5f 90       	pop	r5
 7f8:	4f 90       	pop	r4
 7fa:	08 95       	ret

000007fc <LCD_WriteFloat>:

LCD_WriteFloat(float num)
{
 7fc:	8f 92       	push	r8
 7fe:	9f 92       	push	r9
 800:	af 92       	push	r10
 802:	bf 92       	push	r11
 804:	cf 92       	push	r12
 806:	df 92       	push	r13
 808:	ef 92       	push	r14
 80a:	ff 92       	push	r15
 80c:	6b 01       	movw	r12, r22
 80e:	7c 01       	movw	r14, r24
	if (num<0)
 810:	20 e0       	ldi	r18, 0x00	; 0
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	a9 01       	movw	r20, r18
 816:	0e 94 f6 05 	call	0xbec	; 0xbec <__cmpsf2>
 81a:	88 23       	and	r24, r24
 81c:	3c f4       	brge	.+14     	; 0x82c <LCD_WriteFloat+0x30>
	{
		LCD_WRITE_CHARACHTER('-');
 81e:	8d e2       	ldi	r24, 0x2D	; 45
 820:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_WRITE_CHARACHTER>
		num=-1*num;
 824:	f7 fa       	bst	r15, 7
 826:	f0 94       	com	r15
 828:	f7 f8       	bld	r15, 7
 82a:	f0 94       	com	r15
	}
	if (num>0 && num<1)
 82c:	c7 01       	movw	r24, r14
 82e:	b6 01       	movw	r22, r12
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	a9 01       	movw	r20, r18
 836:	0e 94 dd 06 	call	0xdba	; 0xdba <__gesf2>
 83a:	18 16       	cp	r1, r24
 83c:	7c f4       	brge	.+30     	; 0x85c <LCD_WriteFloat+0x60>
 83e:	c7 01       	movw	r24, r14
 840:	b6 01       	movw	r22, r12
 842:	20 e0       	ldi	r18, 0x00	; 0
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	40 e8       	ldi	r20, 0x80	; 128
 848:	5f e3       	ldi	r21, 0x3F	; 63
 84a:	0e 94 f6 05 	call	0xbec	; 0xbec <__cmpsf2>
 84e:	88 23       	and	r24, r24
 850:	2c f4       	brge	.+10     	; 0x85c <LCD_WriteFloat+0x60>
	{
		LCD_WriteInteger(0);
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	70 e0       	ldi	r23, 0x00	; 0
 856:	cb 01       	movw	r24, r22
 858:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_WriteInteger>
	}

	LCD_WriteInteger((uint32)num);
 85c:	c7 01       	movw	r24, r14
 85e:	b6 01       	movw	r22, r12
 860:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__fixunssfsi>
 864:	4b 01       	movw	r8, r22
 866:	5c 01       	movw	r10, r24
 868:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_WriteInteger>
	LCD_WRITE_CHARACHTER('.');
 86c:	8e e2       	ldi	r24, 0x2E	; 46
 86e:	0e 94 0f 03 	call	0x61e	; 0x61e <LCD_WRITE_CHARACHTER>
	num=(num-(uint32)num)*100;
 872:	c5 01       	movw	r24, r10
 874:	b4 01       	movw	r22, r8
 876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__floatunsisf>
 87a:	9b 01       	movw	r18, r22
 87c:	ac 01       	movw	r20, r24
 87e:	c7 01       	movw	r24, r14
 880:	b6 01       	movw	r22, r12
 882:	0e 94 91 05 	call	0xb22	; 0xb22 <__subsf3>
 886:	46 2f       	mov	r20, r22
 888:	57 2f       	mov	r21, r23
 88a:	68 2f       	mov	r22, r24
 88c:	79 2f       	mov	r23, r25
 88e:	cb 01       	movw	r24, r22
 890:	ba 01       	movw	r22, r20
 892:	20 e0       	ldi	r18, 0x00	; 0
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	48 ec       	ldi	r20, 0xC8	; 200
 898:	52 e4       	ldi	r21, 0x42	; 66
 89a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__mulsf3>
	LCD_WriteInteger(num);
 89e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <__fixsfsi>
 8a2:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_WriteInteger>
 8a6:	ff 90       	pop	r15
 8a8:	ef 90       	pop	r14
 8aa:	df 90       	pop	r13
 8ac:	cf 90       	pop	r12
 8ae:	bf 90       	pop	r11
 8b0:	af 90       	pop	r10
 8b2:	9f 90       	pop	r9
 8b4:	8f 90       	pop	r8
 8b6:	08 95       	ret

000008b8 <LED0_INIT>:

#include "LED.h"

void LED0_INIT()
{
	DIO_SetPINDIR(DIO_PORTD, DIO_PIN3 , DIO_PIN_OUTPUT);
 8b8:	83 e0       	ldi	r24, 0x03	; 3
 8ba:	63 e0       	ldi	r22, 0x03	; 3
 8bc:	41 e0       	ldi	r20, 0x01	; 1
 8be:	0e 94 dd 00 	call	0x1ba	; 0x1ba <DIO_SetPINDIR>
}
 8c2:	08 95       	ret

000008c4 <LED0_ON>:

void LED0_ON()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_HIGH);
 8c4:	83 e0       	ldi	r24, 0x03	; 3
 8c6:	63 e0       	ldi	r22, 0x03	; 3
 8c8:	41 e0       	ldi	r20, 0x01	; 1
 8ca:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
}
 8ce:	08 95       	ret

000008d0 <LED0_OFF>:

void LED0_OFF()
{
	DIO_WritePIN(DIO_PORTD , DIO_PIN3 , DIO_PIN_LOW);
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	63 e0       	ldi	r22, 0x03	; 3
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_WritePIN>
}
 8da:	08 95       	ret

000008dc <LED0_toggle>:

void LED0_toggle()
{
	DIO_togglePin(DIO_PORTD , DIO_PIN3);
 8dc:	83 e0       	ldi	r24, 0x03	; 3
 8de:	63 e0       	ldi	r22, 0x03	; 3
 8e0:	0e 94 4e 02 	call	0x49c	; 0x49c <DIO_togglePin>
 8e4:	08 95       	ret

000008e6 <main>:
	/*SCH_Init_T2();
	LED0_INIT();
	LCD_INIT();
	Sch_Add_Task(LED0_toggle,0,1000);
	Sch_Add_Task(LCD_CLEAR,0,900);*/
	segment7_init();
 8e6:	0e 94 49 00 	call	0x92	; 0x92 <segment7_init>
	
    while(1)
    {
		segment7_display(44);
 8ea:	8c e2       	ldi	r24, 0x2C	; 44
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 58 00 	call	0xb0	; 0xb0 <segment7_display>
 8f2:	fb cf       	rjmp	.-10     	; 0x8ea <main+0x4>

000008f4 <Sch_Add_Task>:
	
	
}

uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	ec 01       	movw	r28, r24
 8fa:	db 01       	movw	r26, r22
 8fc:	ba 01       	movw	r22, r20
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
 8fe:	80 91 75 00 	lds	r24, 0x0075
 902:	90 91 76 00 	lds	r25, 0x0076
 906:	00 97       	sbiw	r24, 0x00	; 0
 908:	41 f1       	breq	.+80     	; 0x95a <Sch_Add_Task+0x66>
 90a:	80 91 7c 00 	lds	r24, 0x007C
 90e:	90 91 7d 00 	lds	r25, 0x007D
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	81 f0       	breq	.+32     	; 0x936 <Sch_Add_Task+0x42>
 916:	80 91 83 00 	lds	r24, 0x0083
 91a:	90 91 84 00 	lds	r25, 0x0084
 91e:	00 97       	sbiw	r24, 0x00	; 0
 920:	71 f0       	breq	.+28     	; 0x93e <Sch_Add_Task+0x4a>
 922:	80 91 8a 00 	lds	r24, 0x008A
 926:	90 91 8b 00 	lds	r25, 0x008B
 92a:	00 97       	sbiw	r24, 0x00	; 0
 92c:	69 f4       	brne	.+26     	; 0x948 <Sch_Add_Task+0x54>
	{
		index++;
 92e:	83 e0       	ldi	r24, 0x03	; 3
uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
 930:	23 e0       	ldi	r18, 0x03	; 3
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	07 c0       	rjmp	.+14     	; 0x944 <Sch_Add_Task+0x50>
	{
		index++;
 936:	81 e0       	ldi	r24, 0x01	; 1
uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	03 c0       	rjmp	.+6      	; 0x944 <Sch_Add_Task+0x50>
	{
		index++;
 93e:	82 e0       	ldi	r24, 0x02	; 2
uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
 940:	22 e0       	ldi	r18, 0x02	; 2
 942:	30 e0       	ldi	r19, 0x00	; 0
	{
		index++;
	}
	if (index==SCH_MAX_TASKS)
 944:	83 30       	cpi	r24, 0x03	; 3
 946:	61 f4       	brne	.+24     	; 0x960 <Sch_Add_Task+0x6c>
	{
		//Task List is full
		LCD_WriteString("Too many Tasks");
 948:	80 e6       	ldi	r24, 0x60	; 96
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 4e 03 	call	0x69c	; 0x69c <LCD_WriteString>
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	80 93 70 00 	sts	0x0070, r24
		//return an error code
		return SCH_MAX_TASKS;
 956:	83 e0       	ldi	r24, 0x03	; 3
 958:	16 c0       	rjmp	.+44     	; 0x986 <Sch_Add_Task+0x92>
uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
	
	// First find a gap in the array (if there is one)
	while ((SCH_Tasks_G[index].ptask != 0) && (index < SCH_MAX_TASKS))
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	30 e0       	ldi	r19, 0x00	; 0
	
}

uint8 Sch_Add_Task (void(*Task_Name)(),const uint16 Initial_Delay,const uint16 Period)
{
	uint8 index=0;
 95e:	80 e0       	ldi	r24, 0x00	; 0
		Error_Code_G=ERROR_SCH_TOO_MANY_TASKS;//set the global error variable
		//return an error code
		return SCH_MAX_TASKS;
	}
	//if there is a space for a new task
	SCH_Tasks_G[index].ptask=Task_Name;
 960:	a9 01       	movw	r20, r18
 962:	44 0f       	add	r20, r20
 964:	55 1f       	adc	r21, r21
 966:	44 0f       	add	r20, r20
 968:	55 1f       	adc	r21, r21
 96a:	44 0f       	add	r20, r20
 96c:	55 1f       	adc	r21, r21
 96e:	42 1b       	sub	r20, r18
 970:	53 0b       	sbc	r21, r19
 972:	fa 01       	movw	r30, r20
 974:	eb 58       	subi	r30, 0x8B	; 139
 976:	ff 4f       	sbci	r31, 0xFF	; 255
 978:	d1 83       	std	Z+1, r29	; 0x01
 97a:	c0 83       	st	Z, r28
	SCH_Tasks_G[index].delay=Initial_Delay;
 97c:	b3 83       	std	Z+3, r27	; 0x03
 97e:	a2 83       	std	Z+2, r26	; 0x02
	SCH_Tasks_G[index].period=Period;
 980:	75 83       	std	Z+5, r23	; 0x05
 982:	64 83       	std	Z+4, r22	; 0x04
	SCH_Tasks_G[index].Runme=0;
 984:	16 82       	std	Z+6, r1	; 0x06
	return index; // return position of task (to allow later deletion)
}
 986:	df 91       	pop	r29
 988:	cf 91       	pop	r28
 98a:	08 95       	ret

0000098c <SCH_Delete_Task>:
		}
	}
}
uint8 SCH_Delete_Task(const uint8 id)
{
	if (SCH_Tasks_G[id].ptask==0)
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	fc 01       	movw	r30, r24
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	ee 0f       	add	r30, r30
 996:	ff 1f       	adc	r31, r31
 998:	ee 0f       	add	r30, r30
 99a:	ff 1f       	adc	r31, r31
 99c:	e8 1b       	sub	r30, r24
 99e:	f9 0b       	sbc	r31, r25
 9a0:	eb 58       	subi	r30, 0x8B	; 139
 9a2:	ff 4f       	sbci	r31, 0xFF	; 255
 9a4:	20 81       	ld	r18, Z
 9a6:	31 81       	ldd	r19, Z+1	; 0x01
 9a8:	21 15       	cp	r18, r1
 9aa:	31 05       	cpc	r19, r1
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <SCH_Delete_Task+0x26>
	{
		return 0;
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	08 95       	ret
	}
	SCH_Tasks_G[id].ptask=0x00;
 9b2:	fc 01       	movw	r30, r24
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	ee 0f       	add	r30, r30
 9ba:	ff 1f       	adc	r31, r31
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	e8 1b       	sub	r30, r24
 9c2:	f9 0b       	sbc	r31, r25
 9c4:	eb 58       	subi	r30, 0x8B	; 139
 9c6:	ff 4f       	sbci	r31, 0xFF	; 255
 9c8:	11 82       	std	Z+1, r1	; 0x01
 9ca:	10 82       	st	Z, r1
	SCH_Tasks_G[id].period=0;
 9cc:	15 82       	std	Z+5, r1	; 0x05
 9ce:	14 82       	std	Z+4, r1	; 0x04
	SCH_Tasks_G[id].delay=0;
 9d0:	13 82       	std	Z+3, r1	; 0x03
 9d2:	12 82       	std	Z+2, r1	; 0x02
	SCH_Tasks_G[id].Runme=0;
 9d4:	16 82       	std	Z+6, r1	; 0x06
}
 9d6:	08 95       	ret

000009d8 <SCH_Dispatch_Tasks>:
	SCH_Tasks_G[index].Runme=0;
	return index; // return position of task (to allow later deletion)
}

void SCH_Dispatch_Tasks(void)
{
 9d8:	ef 92       	push	r14
 9da:	ff 92       	push	r15
 9dc:	1f 93       	push	r17
 9de:	cf 93       	push	r28
 9e0:	df 93       	push	r29
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
 9e2:	cb e7       	ldi	r28, 0x7B	; 123
 9e4:	d0 e0       	ldi	r29, 0x00	; 0
 9e6:	0f 2e       	mov	r0, r31
 9e8:	fa ef       	ldi	r31, 0xFA	; 250
 9ea:	ef 2e       	mov	r14, r31
 9ec:	ff ef       	ldi	r31, 0xFF	; 255
 9ee:	ff 2e       	mov	r15, r31
 9f0:	f0 2d       	mov	r31, r0
 9f2:	ec 0e       	add	r14, r28
 9f4:	fd 1e       	adc	r15, r29
 9f6:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (SCH_Tasks_G[index].Runme>0)
 9f8:	88 81       	ld	r24, Y
 9fa:	88 23       	and	r24, r24
 9fc:	79 f0       	breq	.+30     	; 0xa1c <SCH_Dispatch_Tasks+0x44>
		{
			(*SCH_Tasks_G[index].ptask)();//run the task.
 9fe:	d7 01       	movw	r26, r14
 a00:	ed 91       	ld	r30, X+
 a02:	fc 91       	ld	r31, X
 a04:	09 95       	icall
			SCH_Tasks_G[index].Runme-=1;
 a06:	88 81       	ld	r24, Y
 a08:	81 50       	subi	r24, 0x01	; 1
 a0a:	88 83       	st	Y, r24
			if (SCH_Tasks_G[index].period==0)
 a0c:	f7 01       	movw	r30, r14
 a0e:	84 81       	ldd	r24, Z+4	; 0x04
 a10:	95 81       	ldd	r25, Z+5	; 0x05
 a12:	00 97       	sbiw	r24, 0x00	; 0
 a14:	19 f4       	brne	.+6      	; 0xa1c <SCH_Dispatch_Tasks+0x44>
			{
				SCH_Delete_Task(index);
 a16:	81 2f       	mov	r24, r17
 a18:	0e 94 c6 04 	call	0x98c	; 0x98c <SCH_Delete_Task>

void SCH_Dispatch_Tasks(void)
{
	uint8 index=0;
	// Dispatches (runs) the next task (if one is ready).
	for (index=0;index<SCH_MAX_TASKS;index++)
 a1c:	1f 5f       	subi	r17, 0xFF	; 255
 a1e:	27 96       	adiw	r28, 0x07	; 7
 a20:	87 e0       	ldi	r24, 0x07	; 7
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	e8 0e       	add	r14, r24
 a26:	f9 1e       	adc	r15, r25
 a28:	13 30       	cpi	r17, 0x03	; 3
 a2a:	31 f7       	brne	.-52     	; 0x9f8 <SCH_Dispatch_Tasks+0x20>
				SCH_Delete_Task(index);
			}
			
		}
	}
}
 a2c:	df 91       	pop	r29
 a2e:	cf 91       	pop	r28
 a30:	1f 91       	pop	r17
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	08 95       	ret

00000a38 <SCH_Init_T2>:
void SCH_Init_T2(void)
{
	uint8 i;
	for (i=0;i<SCH_MAX_TASKS;i++)
	{
	 SCH_Delete_Task(i);
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	0e 94 c6 04 	call	0x98c	; 0x98c <SCH_Delete_Task>
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	0e 94 c6 04 	call	0x98c	; 0x98c <SCH_Delete_Task>
 a44:	82 e0       	ldi	r24, 0x02	; 2
 a46:	0e 94 c6 04 	call	0x98c	; 0x98c <SCH_Delete_Task>
	}
	
	Error_Code_G=0;
 a4a:	10 92 70 00 	sts	0x0070, r1
	
	Timer1_Init();
 a4e:	0e 94 69 05 	call	0xad2	; 0xad2 <Timer1_Init>
	
	
}
 a52:	08 95       	ret

00000a54 <__vector_7>:
	SCH_Tasks_G[id].delay=0;
	SCH_Tasks_G[id].Runme=0;
}

ISR(TIMER1_COMPA_vect)
{
 a54:	1f 92       	push	r1
 a56:	0f 92       	push	r0
 a58:	0f b6       	in	r0, 0x3f	; 63
 a5a:	0f 92       	push	r0
 a5c:	11 24       	eor	r1, r1
 a5e:	2f 93       	push	r18
 a60:	3f 93       	push	r19
 a62:	8f 93       	push	r24
 a64:	9f 93       	push	r25
 a66:	af 93       	push	r26
 a68:	bf 93       	push	r27
 a6a:	cf 93       	push	r28
 a6c:	df 93       	push	r29
 a6e:	ef 93       	push	r30
 a70:	ff 93       	push	r31
 a72:	e5 e7       	ldi	r30, 0x75	; 117
 a74:	f0 e0       	ldi	r31, 0x00	; 0
 a76:	df 01       	movw	r26, r30
 a78:	16 96       	adiw	r26, 0x06	; 6
	SCH_Tasks_G[id].period=0;
	SCH_Tasks_G[id].delay=0;
	SCH_Tasks_G[id].Runme=0;
}

ISR(TIMER1_COMPA_vect)
 a7a:	9f 01       	movw	r18, r30
 a7c:	2b 5e       	subi	r18, 0xEB	; 235
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
	{
		//check if there is a task at this location.
		if (SCH_Tasks_G[index].ptask)
 a80:	80 81       	ld	r24, Z
 a82:	91 81       	ldd	r25, Z+1	; 0x01
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	89 f0       	breq	.+34     	; 0xaaa <__vector_7+0x56>
		{
			if (SCH_Tasks_G[index].delay==0)
 a88:	82 81       	ldd	r24, Z+2	; 0x02
 a8a:	93 81       	ldd	r25, Z+3	; 0x03
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	51 f4       	brne	.+20     	; 0xaa4 <__vector_7+0x50>
			{
				//The task is due to run.
				SCH_Tasks_G[index].Runme+=1; // increase the tun me flag.
 a90:	8c 91       	ld	r24, X
 a92:	8f 5f       	subi	r24, 0xFF	; 255
 a94:	8c 93       	st	X, r24
				if (SCH_Tasks_G[index].period)
 a96:	84 81       	ldd	r24, Z+4	; 0x04
 a98:	95 81       	ldd	r25, Z+5	; 0x05
 a9a:	00 97       	sbiw	r24, 0x00	; 0
 a9c:	31 f0       	breq	.+12     	; 0xaaa <__vector_7+0x56>
				{
					//schedule periodic task to run again.
					SCH_Tasks_G[index].delay=SCH_Tasks_G[index].period;
 a9e:	93 83       	std	Z+3, r25	; 0x03
 aa0:	82 83       	std	Z+2, r24	; 0x02
 aa2:	03 c0       	rjmp	.+6      	; 0xaaa <__vector_7+0x56>
				
			}
			else
			{
				//not yet ready to run.
				SCH_Tasks_G[index].delay-=1;
 aa4:	01 97       	sbiw	r24, 0x01	; 1
 aa6:	93 83       	std	Z+3, r25	; 0x03
 aa8:	82 83       	std	Z+2, r24	; 0x02
 aaa:	37 96       	adiw	r30, 0x07	; 7
 aac:	17 96       	adiw	r26, 0x07	; 7
		counter=0;
	}*/
	uint8 index=0;
	
	//calculations are in ticks not milliseconds.
	for (index=0;index<SCH_MAX_TASKS;index++)
 aae:	e2 17       	cp	r30, r18
 ab0:	f3 07       	cpc	r31, r19
 ab2:	31 f7       	brne	.-52     	; 0xa80 <__vector_7+0x2c>
				SCH_Tasks_G[index].delay-=1;
			}
		}
		//Timer1_Manual_Reload();
	}
 ab4:	ff 91       	pop	r31
 ab6:	ef 91       	pop	r30
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	bf 91       	pop	r27
 abe:	af 91       	pop	r26
 ac0:	9f 91       	pop	r25
 ac2:	8f 91       	pop	r24
 ac4:	3f 91       	pop	r19
 ac6:	2f 91       	pop	r18
 ac8:	0f 90       	pop	r0
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	0f 90       	pop	r0
 ace:	1f 90       	pop	r1
 ad0:	18 95       	reti

00000ad2 <Timer1_Init>:
static void (*Time1_Call_Back_ptr)(void);
static void (*Time0_Call_Back_ptr)(void);
/*****************************************************************Timer 1********************************************************************/
void Timer1_Init(void)
{
	TIMSK  |=0x10; //Enable interrupt for timer over flow.
 ad2:	89 b7       	in	r24, 0x39	; 57
 ad4:	80 61       	ori	r24, 0x10	; 16
 ad6:	89 bf       	out	0x39, r24	; 57
	SREG   |=0x80; //Enable the global interrupt.
 ad8:	8f b7       	in	r24, 0x3f	; 63
 ada:	80 68       	ori	r24, 0x80	; 128
 adc:	8f bf       	out	0x3f, r24	; 63
	//Timer1_Manual_Reload();
	TCCR1A |=0x00; //OC1A state at compare match & mode of the timer.
 ade:	8f b5       	in	r24, 0x2f	; 47
 ae0:	8f bd       	out	0x2f, r24	; 47
	TCNT1 =0;
 ae2:	1d bc       	out	0x2d, r1	; 45
 ae4:	1c bc       	out	0x2c, r1	; 44
	OCR1A=16;
 ae6:	80 e1       	ldi	r24, 0x10	; 16
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	9b bd       	out	0x2b, r25	; 43
 aec:	8a bd       	out	0x2a, r24	; 42
	TCCR1B =13;
 aee:	8d e0       	ldi	r24, 0x0D	; 13
 af0:	8e bd       	out	0x2e, r24	; 46
	
	
}
 af2:	08 95       	ret

00000af4 <Set_Call_Back_Timer1>:

void Set_Call_Back_Timer1(void(*ptr)(void))
{
	Time1_Call_Back_ptr = ptr;
 af4:	90 93 72 00 	sts	0x0072, r25
 af8:	80 93 71 00 	sts	0x0071, r24
}
 afc:	08 95       	ret

00000afe <Timer0_Manual_Reload>:
	Timer0_Manual_Reload();
}

void Timer0_Manual_Reload(void)
{
	TCCR0 |=0x00;
 afe:	83 b7       	in	r24, 0x33	; 51
 b00:	83 bf       	out	0x33, r24	; 51
	TCNT0 =0;
 b02:	12 be       	out	0x32, r1	; 50
	TCCR0 |=0x05;
 b04:	83 b7       	in	r24, 0x33	; 51
 b06:	85 60       	ori	r24, 0x05	; 5
 b08:	83 bf       	out	0x33, r24	; 51
}
 b0a:	08 95       	ret

00000b0c <Timer0_Init>:
}

/***************************************************************Timer 0**********************************************************/
void Timer0_Init(void)
{
	TIMSK |= 0x01;
 b0c:	89 b7       	in	r24, 0x39	; 57
 b0e:	81 60       	ori	r24, 0x01	; 1
 b10:	89 bf       	out	0x39, r24	; 57
	Timer0_Manual_Reload();
 b12:	0e 94 7f 05 	call	0xafe	; 0xafe <Timer0_Manual_Reload>
}
 b16:	08 95       	ret

00000b18 <Set_Call_Back_Timer0>:
	TCCR0 |=0x05;
}

void Set_Call_Back_Timer0(void(*ptr)(uint8 *str))
{
	Time0_Call_Back_ptr=ptr;
 b18:	90 93 74 00 	sts	0x0074, r25
 b1c:	80 93 73 00 	sts	0x0073, r24
}
 b20:	08 95       	ret

00000b22 <__subsf3>:
 b22:	50 58       	subi	r21, 0x80	; 128

00000b24 <__addsf3>:
 b24:	bb 27       	eor	r27, r27
 b26:	aa 27       	eor	r26, r26
 b28:	0e d0       	rcall	.+28     	; 0xb46 <__addsf3x>
 b2a:	0d c1       	rjmp	.+538    	; 0xd46 <__fp_round>
 b2c:	fe d0       	rcall	.+508    	; 0xd2a <__fp_pscA>
 b2e:	30 f0       	brcs	.+12     	; 0xb3c <__addsf3+0x18>
 b30:	03 d1       	rcall	.+518    	; 0xd38 <__fp_pscB>
 b32:	20 f0       	brcs	.+8      	; 0xb3c <__addsf3+0x18>
 b34:	31 f4       	brne	.+12     	; 0xb42 <__addsf3+0x1e>
 b36:	9f 3f       	cpi	r25, 0xFF	; 255
 b38:	11 f4       	brne	.+4      	; 0xb3e <__addsf3+0x1a>
 b3a:	1e f4       	brtc	.+6      	; 0xb42 <__addsf3+0x1e>
 b3c:	f3 c0       	rjmp	.+486    	; 0xd24 <__fp_nan>
 b3e:	0e f4       	brtc	.+2      	; 0xb42 <__addsf3+0x1e>
 b40:	e0 95       	com	r30
 b42:	e7 fb       	bst	r30, 7
 b44:	e9 c0       	rjmp	.+466    	; 0xd18 <__fp_inf>

00000b46 <__addsf3x>:
 b46:	e9 2f       	mov	r30, r25
 b48:	0f d1       	rcall	.+542    	; 0xd68 <__fp_split3>
 b4a:	80 f3       	brcs	.-32     	; 0xb2c <__addsf3+0x8>
 b4c:	ba 17       	cp	r27, r26
 b4e:	62 07       	cpc	r22, r18
 b50:	73 07       	cpc	r23, r19
 b52:	84 07       	cpc	r24, r20
 b54:	95 07       	cpc	r25, r21
 b56:	18 f0       	brcs	.+6      	; 0xb5e <__addsf3x+0x18>
 b58:	71 f4       	brne	.+28     	; 0xb76 <__addsf3x+0x30>
 b5a:	9e f5       	brtc	.+102    	; 0xbc2 <__addsf3x+0x7c>
 b5c:	27 c1       	rjmp	.+590    	; 0xdac <__fp_zero>
 b5e:	0e f4       	brtc	.+2      	; 0xb62 <__addsf3x+0x1c>
 b60:	e0 95       	com	r30
 b62:	0b 2e       	mov	r0, r27
 b64:	ba 2f       	mov	r27, r26
 b66:	a0 2d       	mov	r26, r0
 b68:	0b 01       	movw	r0, r22
 b6a:	b9 01       	movw	r22, r18
 b6c:	90 01       	movw	r18, r0
 b6e:	0c 01       	movw	r0, r24
 b70:	ca 01       	movw	r24, r20
 b72:	a0 01       	movw	r20, r0
 b74:	11 24       	eor	r1, r1
 b76:	ff 27       	eor	r31, r31
 b78:	59 1b       	sub	r21, r25
 b7a:	99 f0       	breq	.+38     	; 0xba2 <__addsf3x+0x5c>
 b7c:	59 3f       	cpi	r21, 0xF9	; 249
 b7e:	50 f4       	brcc	.+20     	; 0xb94 <__addsf3x+0x4e>
 b80:	50 3e       	cpi	r21, 0xE0	; 224
 b82:	68 f1       	brcs	.+90     	; 0xbde <__addsf3x+0x98>
 b84:	1a 16       	cp	r1, r26
 b86:	f0 40       	sbci	r31, 0x00	; 0
 b88:	a2 2f       	mov	r26, r18
 b8a:	23 2f       	mov	r18, r19
 b8c:	34 2f       	mov	r19, r20
 b8e:	44 27       	eor	r20, r20
 b90:	58 5f       	subi	r21, 0xF8	; 248
 b92:	f3 cf       	rjmp	.-26     	; 0xb7a <__addsf3x+0x34>
 b94:	46 95       	lsr	r20
 b96:	37 95       	ror	r19
 b98:	27 95       	ror	r18
 b9a:	a7 95       	ror	r26
 b9c:	f0 40       	sbci	r31, 0x00	; 0
 b9e:	53 95       	inc	r21
 ba0:	c9 f7       	brne	.-14     	; 0xb94 <__addsf3x+0x4e>
 ba2:	7e f4       	brtc	.+30     	; 0xbc2 <__addsf3x+0x7c>
 ba4:	1f 16       	cp	r1, r31
 ba6:	ba 0b       	sbc	r27, r26
 ba8:	62 0b       	sbc	r22, r18
 baa:	73 0b       	sbc	r23, r19
 bac:	84 0b       	sbc	r24, r20
 bae:	ba f0       	brmi	.+46     	; 0xbde <__addsf3x+0x98>
 bb0:	91 50       	subi	r25, 0x01	; 1
 bb2:	a1 f0       	breq	.+40     	; 0xbdc <__addsf3x+0x96>
 bb4:	ff 0f       	add	r31, r31
 bb6:	bb 1f       	adc	r27, r27
 bb8:	66 1f       	adc	r22, r22
 bba:	77 1f       	adc	r23, r23
 bbc:	88 1f       	adc	r24, r24
 bbe:	c2 f7       	brpl	.-16     	; 0xbb0 <__addsf3x+0x6a>
 bc0:	0e c0       	rjmp	.+28     	; 0xbde <__addsf3x+0x98>
 bc2:	ba 0f       	add	r27, r26
 bc4:	62 1f       	adc	r22, r18
 bc6:	73 1f       	adc	r23, r19
 bc8:	84 1f       	adc	r24, r20
 bca:	48 f4       	brcc	.+18     	; 0xbde <__addsf3x+0x98>
 bcc:	87 95       	ror	r24
 bce:	77 95       	ror	r23
 bd0:	67 95       	ror	r22
 bd2:	b7 95       	ror	r27
 bd4:	f7 95       	ror	r31
 bd6:	9e 3f       	cpi	r25, 0xFE	; 254
 bd8:	08 f0       	brcs	.+2      	; 0xbdc <__addsf3x+0x96>
 bda:	b3 cf       	rjmp	.-154    	; 0xb42 <__addsf3+0x1e>
 bdc:	93 95       	inc	r25
 bde:	88 0f       	add	r24, r24
 be0:	08 f0       	brcs	.+2      	; 0xbe4 <__addsf3x+0x9e>
 be2:	99 27       	eor	r25, r25
 be4:	ee 0f       	add	r30, r30
 be6:	97 95       	ror	r25
 be8:	87 95       	ror	r24
 bea:	08 95       	ret

00000bec <__cmpsf2>:
 bec:	71 d0       	rcall	.+226    	; 0xcd0 <__fp_cmp>
 bee:	08 f4       	brcc	.+2      	; 0xbf2 <__cmpsf2+0x6>
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	08 95       	ret

00000bf4 <__fixsfsi>:
 bf4:	04 d0       	rcall	.+8      	; 0xbfe <__fixunssfsi>
 bf6:	68 94       	set
 bf8:	b1 11       	cpse	r27, r1
 bfa:	d9 c0       	rjmp	.+434    	; 0xdae <__fp_szero>
 bfc:	08 95       	ret

00000bfe <__fixunssfsi>:
 bfe:	bc d0       	rcall	.+376    	; 0xd78 <__fp_splitA>
 c00:	88 f0       	brcs	.+34     	; 0xc24 <__fixunssfsi+0x26>
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	90 f0       	brcs	.+36     	; 0xc2a <__fixunssfsi+0x2c>
 c06:	b9 2f       	mov	r27, r25
 c08:	99 27       	eor	r25, r25
 c0a:	b7 51       	subi	r27, 0x17	; 23
 c0c:	a0 f0       	brcs	.+40     	; 0xc36 <__fixunssfsi+0x38>
 c0e:	d1 f0       	breq	.+52     	; 0xc44 <__fixunssfsi+0x46>
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	1a f0       	brmi	.+6      	; 0xc20 <__fixunssfsi+0x22>
 c1a:	ba 95       	dec	r27
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__fixunssfsi+0x12>
 c1e:	12 c0       	rjmp	.+36     	; 0xc44 <__fixunssfsi+0x46>
 c20:	b1 30       	cpi	r27, 0x01	; 1
 c22:	81 f0       	breq	.+32     	; 0xc44 <__fixunssfsi+0x46>
 c24:	c3 d0       	rcall	.+390    	; 0xdac <__fp_zero>
 c26:	b1 e0       	ldi	r27, 0x01	; 1
 c28:	08 95       	ret
 c2a:	c0 c0       	rjmp	.+384    	; 0xdac <__fp_zero>
 c2c:	67 2f       	mov	r22, r23
 c2e:	78 2f       	mov	r23, r24
 c30:	88 27       	eor	r24, r24
 c32:	b8 5f       	subi	r27, 0xF8	; 248
 c34:	39 f0       	breq	.+14     	; 0xc44 <__fixunssfsi+0x46>
 c36:	b9 3f       	cpi	r27, 0xF9	; 249
 c38:	cc f3       	brlt	.-14     	; 0xc2c <__fixunssfsi+0x2e>
 c3a:	86 95       	lsr	r24
 c3c:	77 95       	ror	r23
 c3e:	67 95       	ror	r22
 c40:	b3 95       	inc	r27
 c42:	d9 f7       	brne	.-10     	; 0xc3a <__fixunssfsi+0x3c>
 c44:	3e f4       	brtc	.+14     	; 0xc54 <__fixunssfsi+0x56>
 c46:	90 95       	com	r25
 c48:	80 95       	com	r24
 c4a:	70 95       	com	r23
 c4c:	61 95       	neg	r22
 c4e:	7f 4f       	sbci	r23, 0xFF	; 255
 c50:	8f 4f       	sbci	r24, 0xFF	; 255
 c52:	9f 4f       	sbci	r25, 0xFF	; 255
 c54:	08 95       	ret

00000c56 <__floatunsisf>:
 c56:	e8 94       	clt
 c58:	09 c0       	rjmp	.+18     	; 0xc6c <__floatsisf+0x12>

00000c5a <__floatsisf>:
 c5a:	97 fb       	bst	r25, 7
 c5c:	3e f4       	brtc	.+14     	; 0xc6c <__floatsisf+0x12>
 c5e:	90 95       	com	r25
 c60:	80 95       	com	r24
 c62:	70 95       	com	r23
 c64:	61 95       	neg	r22
 c66:	7f 4f       	sbci	r23, 0xFF	; 255
 c68:	8f 4f       	sbci	r24, 0xFF	; 255
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	99 23       	and	r25, r25
 c6e:	a9 f0       	breq	.+42     	; 0xc9a <__floatsisf+0x40>
 c70:	f9 2f       	mov	r31, r25
 c72:	96 e9       	ldi	r25, 0x96	; 150
 c74:	bb 27       	eor	r27, r27
 c76:	93 95       	inc	r25
 c78:	f6 95       	lsr	r31
 c7a:	87 95       	ror	r24
 c7c:	77 95       	ror	r23
 c7e:	67 95       	ror	r22
 c80:	b7 95       	ror	r27
 c82:	f1 11       	cpse	r31, r1
 c84:	f8 cf       	rjmp	.-16     	; 0xc76 <__floatsisf+0x1c>
 c86:	fa f4       	brpl	.+62     	; 0xcc6 <__floatsisf+0x6c>
 c88:	bb 0f       	add	r27, r27
 c8a:	11 f4       	brne	.+4      	; 0xc90 <__floatsisf+0x36>
 c8c:	60 ff       	sbrs	r22, 0
 c8e:	1b c0       	rjmp	.+54     	; 0xcc6 <__floatsisf+0x6c>
 c90:	6f 5f       	subi	r22, 0xFF	; 255
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	16 c0       	rjmp	.+44     	; 0xcc6 <__floatsisf+0x6c>
 c9a:	88 23       	and	r24, r24
 c9c:	11 f0       	breq	.+4      	; 0xca2 <__floatsisf+0x48>
 c9e:	96 e9       	ldi	r25, 0x96	; 150
 ca0:	11 c0       	rjmp	.+34     	; 0xcc4 <__floatsisf+0x6a>
 ca2:	77 23       	and	r23, r23
 ca4:	21 f0       	breq	.+8      	; 0xcae <__floatsisf+0x54>
 ca6:	9e e8       	ldi	r25, 0x8E	; 142
 ca8:	87 2f       	mov	r24, r23
 caa:	76 2f       	mov	r23, r22
 cac:	05 c0       	rjmp	.+10     	; 0xcb8 <__floatsisf+0x5e>
 cae:	66 23       	and	r22, r22
 cb0:	71 f0       	breq	.+28     	; 0xcce <__floatsisf+0x74>
 cb2:	96 e8       	ldi	r25, 0x86	; 134
 cb4:	86 2f       	mov	r24, r22
 cb6:	70 e0       	ldi	r23, 0x00	; 0
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	2a f0       	brmi	.+10     	; 0xcc6 <__floatsisf+0x6c>
 cbc:	9a 95       	dec	r25
 cbe:	66 0f       	add	r22, r22
 cc0:	77 1f       	adc	r23, r23
 cc2:	88 1f       	adc	r24, r24
 cc4:	da f7       	brpl	.-10     	; 0xcbc <__floatsisf+0x62>
 cc6:	88 0f       	add	r24, r24
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	97 f9       	bld	r25, 7
 cce:	08 95       	ret

00000cd0 <__fp_cmp>:
 cd0:	99 0f       	add	r25, r25
 cd2:	00 08       	sbc	r0, r0
 cd4:	55 0f       	add	r21, r21
 cd6:	aa 0b       	sbc	r26, r26
 cd8:	e0 e8       	ldi	r30, 0x80	; 128
 cda:	fe ef       	ldi	r31, 0xFE	; 254
 cdc:	16 16       	cp	r1, r22
 cde:	17 06       	cpc	r1, r23
 ce0:	e8 07       	cpc	r30, r24
 ce2:	f9 07       	cpc	r31, r25
 ce4:	c0 f0       	brcs	.+48     	; 0xd16 <__fp_cmp+0x46>
 ce6:	12 16       	cp	r1, r18
 ce8:	13 06       	cpc	r1, r19
 cea:	e4 07       	cpc	r30, r20
 cec:	f5 07       	cpc	r31, r21
 cee:	98 f0       	brcs	.+38     	; 0xd16 <__fp_cmp+0x46>
 cf0:	62 1b       	sub	r22, r18
 cf2:	73 0b       	sbc	r23, r19
 cf4:	84 0b       	sbc	r24, r20
 cf6:	95 0b       	sbc	r25, r21
 cf8:	39 f4       	brne	.+14     	; 0xd08 <__fp_cmp+0x38>
 cfa:	0a 26       	eor	r0, r26
 cfc:	61 f0       	breq	.+24     	; 0xd16 <__fp_cmp+0x46>
 cfe:	23 2b       	or	r18, r19
 d00:	24 2b       	or	r18, r20
 d02:	25 2b       	or	r18, r21
 d04:	21 f4       	brne	.+8      	; 0xd0e <__fp_cmp+0x3e>
 d06:	08 95       	ret
 d08:	0a 26       	eor	r0, r26
 d0a:	09 f4       	brne	.+2      	; 0xd0e <__fp_cmp+0x3e>
 d0c:	a1 40       	sbci	r26, 0x01	; 1
 d0e:	a6 95       	lsr	r26
 d10:	8f ef       	ldi	r24, 0xFF	; 255
 d12:	81 1d       	adc	r24, r1
 d14:	81 1d       	adc	r24, r1
 d16:	08 95       	ret

00000d18 <__fp_inf>:
 d18:	97 f9       	bld	r25, 7
 d1a:	9f 67       	ori	r25, 0x7F	; 127
 d1c:	80 e8       	ldi	r24, 0x80	; 128
 d1e:	70 e0       	ldi	r23, 0x00	; 0
 d20:	60 e0       	ldi	r22, 0x00	; 0
 d22:	08 95       	ret

00000d24 <__fp_nan>:
 d24:	9f ef       	ldi	r25, 0xFF	; 255
 d26:	80 ec       	ldi	r24, 0xC0	; 192
 d28:	08 95       	ret

00000d2a <__fp_pscA>:
 d2a:	00 24       	eor	r0, r0
 d2c:	0a 94       	dec	r0
 d2e:	16 16       	cp	r1, r22
 d30:	17 06       	cpc	r1, r23
 d32:	18 06       	cpc	r1, r24
 d34:	09 06       	cpc	r0, r25
 d36:	08 95       	ret

00000d38 <__fp_pscB>:
 d38:	00 24       	eor	r0, r0
 d3a:	0a 94       	dec	r0
 d3c:	12 16       	cp	r1, r18
 d3e:	13 06       	cpc	r1, r19
 d40:	14 06       	cpc	r1, r20
 d42:	05 06       	cpc	r0, r21
 d44:	08 95       	ret

00000d46 <__fp_round>:
 d46:	09 2e       	mov	r0, r25
 d48:	03 94       	inc	r0
 d4a:	00 0c       	add	r0, r0
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__fp_round+0xc>
 d4e:	88 23       	and	r24, r24
 d50:	52 f0       	brmi	.+20     	; 0xd66 <__fp_round+0x20>
 d52:	bb 0f       	add	r27, r27
 d54:	40 f4       	brcc	.+16     	; 0xd66 <__fp_round+0x20>
 d56:	bf 2b       	or	r27, r31
 d58:	11 f4       	brne	.+4      	; 0xd5e <__fp_round+0x18>
 d5a:	60 ff       	sbrs	r22, 0
 d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__fp_round+0x20>
 d5e:	6f 5f       	subi	r22, 0xFF	; 255
 d60:	7f 4f       	sbci	r23, 0xFF	; 255
 d62:	8f 4f       	sbci	r24, 0xFF	; 255
 d64:	9f 4f       	sbci	r25, 0xFF	; 255
 d66:	08 95       	ret

00000d68 <__fp_split3>:
 d68:	57 fd       	sbrc	r21, 7
 d6a:	90 58       	subi	r25, 0x80	; 128
 d6c:	44 0f       	add	r20, r20
 d6e:	55 1f       	adc	r21, r21
 d70:	59 f0       	breq	.+22     	; 0xd88 <__fp_splitA+0x10>
 d72:	5f 3f       	cpi	r21, 0xFF	; 255
 d74:	71 f0       	breq	.+28     	; 0xd92 <__fp_splitA+0x1a>
 d76:	47 95       	ror	r20

00000d78 <__fp_splitA>:
 d78:	88 0f       	add	r24, r24
 d7a:	97 fb       	bst	r25, 7
 d7c:	99 1f       	adc	r25, r25
 d7e:	61 f0       	breq	.+24     	; 0xd98 <__fp_splitA+0x20>
 d80:	9f 3f       	cpi	r25, 0xFF	; 255
 d82:	79 f0       	breq	.+30     	; 0xda2 <__fp_splitA+0x2a>
 d84:	87 95       	ror	r24
 d86:	08 95       	ret
 d88:	12 16       	cp	r1, r18
 d8a:	13 06       	cpc	r1, r19
 d8c:	14 06       	cpc	r1, r20
 d8e:	55 1f       	adc	r21, r21
 d90:	f2 cf       	rjmp	.-28     	; 0xd76 <__fp_split3+0xe>
 d92:	46 95       	lsr	r20
 d94:	f1 df       	rcall	.-30     	; 0xd78 <__fp_splitA>
 d96:	08 c0       	rjmp	.+16     	; 0xda8 <__fp_splitA+0x30>
 d98:	16 16       	cp	r1, r22
 d9a:	17 06       	cpc	r1, r23
 d9c:	18 06       	cpc	r1, r24
 d9e:	99 1f       	adc	r25, r25
 da0:	f1 cf       	rjmp	.-30     	; 0xd84 <__fp_splitA+0xc>
 da2:	86 95       	lsr	r24
 da4:	71 05       	cpc	r23, r1
 da6:	61 05       	cpc	r22, r1
 da8:	08 94       	sec
 daa:	08 95       	ret

00000dac <__fp_zero>:
 dac:	e8 94       	clt

00000dae <__fp_szero>:
 dae:	bb 27       	eor	r27, r27
 db0:	66 27       	eor	r22, r22
 db2:	77 27       	eor	r23, r23
 db4:	cb 01       	movw	r24, r22
 db6:	97 f9       	bld	r25, 7
 db8:	08 95       	ret

00000dba <__gesf2>:
 dba:	8a df       	rcall	.-236    	; 0xcd0 <__fp_cmp>
 dbc:	08 f4       	brcc	.+2      	; 0xdc0 <__gesf2+0x6>
 dbe:	8f ef       	ldi	r24, 0xFF	; 255
 dc0:	08 95       	ret

00000dc2 <__mulsf3>:
 dc2:	0b d0       	rcall	.+22     	; 0xdda <__mulsf3x>
 dc4:	c0 cf       	rjmp	.-128    	; 0xd46 <__fp_round>
 dc6:	b1 df       	rcall	.-158    	; 0xd2a <__fp_pscA>
 dc8:	28 f0       	brcs	.+10     	; 0xdd4 <__mulsf3+0x12>
 dca:	b6 df       	rcall	.-148    	; 0xd38 <__fp_pscB>
 dcc:	18 f0       	brcs	.+6      	; 0xdd4 <__mulsf3+0x12>
 dce:	95 23       	and	r25, r21
 dd0:	09 f0       	breq	.+2      	; 0xdd4 <__mulsf3+0x12>
 dd2:	a2 cf       	rjmp	.-188    	; 0xd18 <__fp_inf>
 dd4:	a7 cf       	rjmp	.-178    	; 0xd24 <__fp_nan>
 dd6:	11 24       	eor	r1, r1
 dd8:	ea cf       	rjmp	.-44     	; 0xdae <__fp_szero>

00000dda <__mulsf3x>:
 dda:	c6 df       	rcall	.-116    	; 0xd68 <__fp_split3>
 ddc:	a0 f3       	brcs	.-24     	; 0xdc6 <__mulsf3+0x4>

00000dde <__mulsf3_pse>:
 dde:	95 9f       	mul	r25, r21
 de0:	d1 f3       	breq	.-12     	; 0xdd6 <__mulsf3+0x14>
 de2:	95 0f       	add	r25, r21
 de4:	50 e0       	ldi	r21, 0x00	; 0
 de6:	55 1f       	adc	r21, r21
 de8:	62 9f       	mul	r22, r18
 dea:	f0 01       	movw	r30, r0
 dec:	72 9f       	mul	r23, r18
 dee:	bb 27       	eor	r27, r27
 df0:	f0 0d       	add	r31, r0
 df2:	b1 1d       	adc	r27, r1
 df4:	63 9f       	mul	r22, r19
 df6:	aa 27       	eor	r26, r26
 df8:	f0 0d       	add	r31, r0
 dfa:	b1 1d       	adc	r27, r1
 dfc:	aa 1f       	adc	r26, r26
 dfe:	64 9f       	mul	r22, r20
 e00:	66 27       	eor	r22, r22
 e02:	b0 0d       	add	r27, r0
 e04:	a1 1d       	adc	r26, r1
 e06:	66 1f       	adc	r22, r22
 e08:	82 9f       	mul	r24, r18
 e0a:	22 27       	eor	r18, r18
 e0c:	b0 0d       	add	r27, r0
 e0e:	a1 1d       	adc	r26, r1
 e10:	62 1f       	adc	r22, r18
 e12:	73 9f       	mul	r23, r19
 e14:	b0 0d       	add	r27, r0
 e16:	a1 1d       	adc	r26, r1
 e18:	62 1f       	adc	r22, r18
 e1a:	83 9f       	mul	r24, r19
 e1c:	a0 0d       	add	r26, r0
 e1e:	61 1d       	adc	r22, r1
 e20:	22 1f       	adc	r18, r18
 e22:	74 9f       	mul	r23, r20
 e24:	33 27       	eor	r19, r19
 e26:	a0 0d       	add	r26, r0
 e28:	61 1d       	adc	r22, r1
 e2a:	23 1f       	adc	r18, r19
 e2c:	84 9f       	mul	r24, r20
 e2e:	60 0d       	add	r22, r0
 e30:	21 1d       	adc	r18, r1
 e32:	82 2f       	mov	r24, r18
 e34:	76 2f       	mov	r23, r22
 e36:	6a 2f       	mov	r22, r26
 e38:	11 24       	eor	r1, r1
 e3a:	9f 57       	subi	r25, 0x7F	; 127
 e3c:	50 40       	sbci	r21, 0x00	; 0
 e3e:	8a f0       	brmi	.+34     	; 0xe62 <__mulsf3_pse+0x84>
 e40:	e1 f0       	breq	.+56     	; 0xe7a <__mulsf3_pse+0x9c>
 e42:	88 23       	and	r24, r24
 e44:	4a f0       	brmi	.+18     	; 0xe58 <__mulsf3_pse+0x7a>
 e46:	ee 0f       	add	r30, r30
 e48:	ff 1f       	adc	r31, r31
 e4a:	bb 1f       	adc	r27, r27
 e4c:	66 1f       	adc	r22, r22
 e4e:	77 1f       	adc	r23, r23
 e50:	88 1f       	adc	r24, r24
 e52:	91 50       	subi	r25, 0x01	; 1
 e54:	50 40       	sbci	r21, 0x00	; 0
 e56:	a9 f7       	brne	.-22     	; 0xe42 <__mulsf3_pse+0x64>
 e58:	9e 3f       	cpi	r25, 0xFE	; 254
 e5a:	51 05       	cpc	r21, r1
 e5c:	70 f0       	brcs	.+28     	; 0xe7a <__mulsf3_pse+0x9c>
 e5e:	5c cf       	rjmp	.-328    	; 0xd18 <__fp_inf>
 e60:	a6 cf       	rjmp	.-180    	; 0xdae <__fp_szero>
 e62:	5f 3f       	cpi	r21, 0xFF	; 255
 e64:	ec f3       	brlt	.-6      	; 0xe60 <__mulsf3_pse+0x82>
 e66:	98 3e       	cpi	r25, 0xE8	; 232
 e68:	dc f3       	brlt	.-10     	; 0xe60 <__mulsf3_pse+0x82>
 e6a:	86 95       	lsr	r24
 e6c:	77 95       	ror	r23
 e6e:	67 95       	ror	r22
 e70:	b7 95       	ror	r27
 e72:	f7 95       	ror	r31
 e74:	e7 95       	ror	r30
 e76:	9f 5f       	subi	r25, 0xFF	; 255
 e78:	c1 f7       	brne	.-16     	; 0xe6a <__mulsf3_pse+0x8c>
 e7a:	fe 2b       	or	r31, r30
 e7c:	88 0f       	add	r24, r24
 e7e:	91 1d       	adc	r25, r1
 e80:	96 95       	lsr	r25
 e82:	87 95       	ror	r24
 e84:	97 f9       	bld	r25, 7
 e86:	08 95       	ret

00000e88 <__mulsi3>:
 e88:	62 9f       	mul	r22, r18
 e8a:	d0 01       	movw	r26, r0
 e8c:	73 9f       	mul	r23, r19
 e8e:	f0 01       	movw	r30, r0
 e90:	82 9f       	mul	r24, r18
 e92:	e0 0d       	add	r30, r0
 e94:	f1 1d       	adc	r31, r1
 e96:	64 9f       	mul	r22, r20
 e98:	e0 0d       	add	r30, r0
 e9a:	f1 1d       	adc	r31, r1
 e9c:	92 9f       	mul	r25, r18
 e9e:	f0 0d       	add	r31, r0
 ea0:	83 9f       	mul	r24, r19
 ea2:	f0 0d       	add	r31, r0
 ea4:	74 9f       	mul	r23, r20
 ea6:	f0 0d       	add	r31, r0
 ea8:	65 9f       	mul	r22, r21
 eaa:	f0 0d       	add	r31, r0
 eac:	99 27       	eor	r25, r25
 eae:	72 9f       	mul	r23, r18
 eb0:	b0 0d       	add	r27, r0
 eb2:	e1 1d       	adc	r30, r1
 eb4:	f9 1f       	adc	r31, r25
 eb6:	63 9f       	mul	r22, r19
 eb8:	b0 0d       	add	r27, r0
 eba:	e1 1d       	adc	r30, r1
 ebc:	f9 1f       	adc	r31, r25
 ebe:	bd 01       	movw	r22, r26
 ec0:	cf 01       	movw	r24, r30
 ec2:	11 24       	eor	r1, r1
 ec4:	08 95       	ret

00000ec6 <__udivmodqi4>:
 ec6:	99 1b       	sub	r25, r25
 ec8:	79 e0       	ldi	r23, 0x09	; 9
 eca:	04 c0       	rjmp	.+8      	; 0xed4 <__udivmodqi4_ep>

00000ecc <__udivmodqi4_loop>:
 ecc:	99 1f       	adc	r25, r25
 ece:	96 17       	cp	r25, r22
 ed0:	08 f0       	brcs	.+2      	; 0xed4 <__udivmodqi4_ep>
 ed2:	96 1b       	sub	r25, r22

00000ed4 <__udivmodqi4_ep>:
 ed4:	88 1f       	adc	r24, r24
 ed6:	7a 95       	dec	r23
 ed8:	c9 f7       	brne	.-14     	; 0xecc <__udivmodqi4_loop>
 eda:	80 95       	com	r24
 edc:	08 95       	ret

00000ede <__divmodsi4>:
 ede:	97 fb       	bst	r25, 7
 ee0:	09 2e       	mov	r0, r25
 ee2:	05 26       	eor	r0, r21
 ee4:	0e d0       	rcall	.+28     	; 0xf02 <__divmodsi4_neg1>
 ee6:	57 fd       	sbrc	r21, 7
 ee8:	04 d0       	rcall	.+8      	; 0xef2 <__divmodsi4_neg2>
 eea:	14 d0       	rcall	.+40     	; 0xf14 <__udivmodsi4>
 eec:	0a d0       	rcall	.+20     	; 0xf02 <__divmodsi4_neg1>
 eee:	00 1c       	adc	r0, r0
 ef0:	38 f4       	brcc	.+14     	; 0xf00 <__divmodsi4_exit>

00000ef2 <__divmodsi4_neg2>:
 ef2:	50 95       	com	r21
 ef4:	40 95       	com	r20
 ef6:	30 95       	com	r19
 ef8:	21 95       	neg	r18
 efa:	3f 4f       	sbci	r19, 0xFF	; 255
 efc:	4f 4f       	sbci	r20, 0xFF	; 255
 efe:	5f 4f       	sbci	r21, 0xFF	; 255

00000f00 <__divmodsi4_exit>:
 f00:	08 95       	ret

00000f02 <__divmodsi4_neg1>:
 f02:	f6 f7       	brtc	.-4      	; 0xf00 <__divmodsi4_exit>
 f04:	90 95       	com	r25
 f06:	80 95       	com	r24
 f08:	70 95       	com	r23
 f0a:	61 95       	neg	r22
 f0c:	7f 4f       	sbci	r23, 0xFF	; 255
 f0e:	8f 4f       	sbci	r24, 0xFF	; 255
 f10:	9f 4f       	sbci	r25, 0xFF	; 255
 f12:	08 95       	ret

00000f14 <__udivmodsi4>:
 f14:	a1 e2       	ldi	r26, 0x21	; 33
 f16:	1a 2e       	mov	r1, r26
 f18:	aa 1b       	sub	r26, r26
 f1a:	bb 1b       	sub	r27, r27
 f1c:	fd 01       	movw	r30, r26
 f1e:	0d c0       	rjmp	.+26     	; 0xf3a <__udivmodsi4_ep>

00000f20 <__udivmodsi4_loop>:
 f20:	aa 1f       	adc	r26, r26
 f22:	bb 1f       	adc	r27, r27
 f24:	ee 1f       	adc	r30, r30
 f26:	ff 1f       	adc	r31, r31
 f28:	a2 17       	cp	r26, r18
 f2a:	b3 07       	cpc	r27, r19
 f2c:	e4 07       	cpc	r30, r20
 f2e:	f5 07       	cpc	r31, r21
 f30:	20 f0       	brcs	.+8      	; 0xf3a <__udivmodsi4_ep>
 f32:	a2 1b       	sub	r26, r18
 f34:	b3 0b       	sbc	r27, r19
 f36:	e4 0b       	sbc	r30, r20
 f38:	f5 0b       	sbc	r31, r21

00000f3a <__udivmodsi4_ep>:
 f3a:	66 1f       	adc	r22, r22
 f3c:	77 1f       	adc	r23, r23
 f3e:	88 1f       	adc	r24, r24
 f40:	99 1f       	adc	r25, r25
 f42:	1a 94       	dec	r1
 f44:	69 f7       	brne	.-38     	; 0xf20 <__udivmodsi4_loop>
 f46:	60 95       	com	r22
 f48:	70 95       	com	r23
 f4a:	80 95       	com	r24
 f4c:	90 95       	com	r25
 f4e:	9b 01       	movw	r18, r22
 f50:	ac 01       	movw	r20, r24
 f52:	bd 01       	movw	r22, r26
 f54:	cf 01       	movw	r24, r30
 f56:	08 95       	ret

00000f58 <_exit>:
 f58:	f8 94       	cli

00000f5a <__stop_program>:
 f5a:	ff cf       	rjmp	.-2      	; 0xf5a <__stop_program>
